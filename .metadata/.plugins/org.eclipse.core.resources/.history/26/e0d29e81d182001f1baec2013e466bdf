/*
 * GPIO_Driver.c
 *
 *  Created on: Sep 12, 2024
 *      Author: user
 */

#include <GPIO_Driver.h>

#define FOUR_BIT_REG_WIDTH 4
#define TWO_BIT_REG_WIDTH 2

// TODO make sure they start with GPIO_ or move them out
// Nevermind, asked Xavion and helper functions not in the header dont need to start with gpio
void setFourBitReg(volatile uint32_t (*reg)[2], uint8_t subPos, uint32_t bits){
	uint32_t temp;
	temp = (bits << (FOUR_BIT_REG_WIDTH * subPos));

	// Move up by 4 bytes if we are over halfway through, thats what [(subPos > 7)] does

	// Clear the mode with two zeros in our pin related bits
	(*reg)[(subPos > 7)] &= ~(0b1111 << (FOUR_BIT_REG_WIDTH * subPos));

	// Set the mode from our args
	(*reg)[(subPos > 7)] |= temp;
}
void setTwoBitReg(volatile uint32_t * reg, uint8_t subPos, uint32_t bits){
	uint32_t temp;
	temp = (bits << (TWO_BIT_REG_WIDTH * subPos));

	// Clear the mode with two zeros in our pin related bits
	(*reg) &= ~(0b11 << (TWO_BIT_REG_WIDTH * subPos));

	// Set the mode from our args
	(*reg) |= temp;
}
void setOneBitReg(volatile uint32_t * reg, uint8_t subPos, uint32_t bits){
	uint32_t temp;
	temp = (bits << subPos);

	// Clear the mode with two zeros in our pin related bits
	(*reg) &= ~(0b1 << subPos);

	// Set the mode from our args
	(*reg) |= temp;
}

void GPIO_Init(GPIO_RegDef_t * port, GPIO_PinConfig_t config){
	static bool calledBefore;
	if (!calledBefore){
		IRQ_Init();
		calledBefore = 1;
	}

	setTwoBitReg(&(port->MODER), config.PinNumber, config.PinMode);

	if (config.PinInteruptMode != NO_INTERRUPT && config.PinNumber <=15){
		// Set triggers
		bool falling = ((FALLING_EDGE_INTERRUPT == config.PinInteruptMode) | (FALLING_OR_RISING_EDGE_INTERRUPT == config.PinInteruptMode));
		bool rising = ((RISING_EDGE_INTERRUPT == config.PinInteruptMode) | (FALLING_OR_RISING_EDGE_INTERRUPT == config.PinInteruptMode));
		EXTI->RTSR |= (rising << config.PinNumber); // on if on
		EXTI->RTSR &= (rising << config.PinNumber); // off if off
		EXTI->FTSR |= (falling << config.PinNumber);
		EXTI->FTSR &= (falling << config.PinNumber);

		// Unmask this pin/line
		EXTI->IMR |= (1 << config.PinMode);
	}

	setTwoBitReg(&(port->OSPEEDR), config.PinNumber, config.PinSpeed);
	setTwoBitReg(&(port->PUPDR), config.PinNumber, config.PinPuPdControl);

	setOneBitReg(&(port->OTYPER), config.PinNumber, config.OPType);

	if (port->MODER == 0b10) {
		setFourBitReg(&(port->AFRL), config.PinNumber, config.PinAltFunMode);
	}
}

void GPIO_ClockControl(GPIO_RegDef_t * port, uint8_t enableDisable) {
	if (enableDisable == 1){ // Enable it
		RCC->AHB1EN |= (1 << GPIO_PortToIndex(port));
	} else { // Disable it
		RCC->AHB1EN &= ((!1) << GPIO_PortToIndex(port));
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t * port, uint8_t pinNumber) {
	if ( (((port->MODER) & (0b11<<pinNumber*2)) >> pinNumber*2) == OUTPUT) {
		return ((port->ODR) & (1<<pinNumber)) >> pinNumber;
	} else if ( (((port->MODER) & (0b11<<pinNumber*2)) >> pinNumber*2) == INPUT) {
		return ((port->IDR) & (1<<pinNumber)) >> pinNumber;
	} else {
		return 0;
	}
}

uint8_t GPIO_PortToIndex(GPIO_RegDef_t * port) {
	uint32_t address = ((uint32_t) port);
	// TODO assert address not >GPIO_END_ADDR
	uint32_t offsetFromBase = address - GPIO_START_ADDR;
	uint32_t portIndex = offsetFromBase/GPIO_SEPPARATION_BYTES;
	return portIndex;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t * port, uint8_t pinNumber, uint8_t value) {
	if (value == 0){
		(port->ODR) &= !((1) << pinNumber);
	} else {
		(port->ODR) |= (1 << pinNumber);
	}
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t * port, uint8_t pinNumber) {
	GPIO_WriteToOutputPin(port, pinNumber, GPIO_ReadFromInputPin(port, pinNumber) == 0);
}
