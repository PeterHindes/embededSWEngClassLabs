
PHindesLab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000938  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000ae4  08000ae4  00001ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aec  08000aec  00001af4  2**0
                  CONTENTS
  4 .ARM          00000000  08000aec  08000aec  00001af4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aec  08000af4  00001af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aec  08000aec  00001aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000af0  08000af0  00001af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001af4  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001666  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007a7  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00003930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000015b  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001580  00000000  00000000  00003c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002536  00000000  00000000  0000520b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004c48  00000000  00000000  00007741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000c389  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005d0  00000000  00000000  0000c3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0000c99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000acc 	.word	0x08000acc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000acc 	.word	0x08000acc

080001ec <applicationInit>:
}
void redLEDInit(){
	LED_Init(RED_LED);
}

void applicationInit(){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	LED_Init(GREEN_LED);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 fb43 	bl	800087c <LED_Init>
	LED_Init(RED_LED);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 fb40 	bl	800087c <LED_Init>

#if defined(USE_INTERRUPTS)
	BUT_Init(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f000 f85f 	bl	80002c0 <BUT_Init>
#else
	BUT_Init(0);
	addSchedulerEvent(POLL_BTN_EVENT);
#endif
//	addSchedulerEvent(LED_TOGGLE_EVENT);
	addSchedulerEvent(DELAY_EVENT);
 8000202:	2002      	movs	r0, #2
 8000204:	f000 fbc4 	bl	8000990 <addSchedulerEvent>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}

0800020c <toggleGreenLED>:

void toggleGreenLED(){
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	ToggleLED(GREEN_LED);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 fba1 	bl	8000958 <ToggleLED>
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}

0800021a <activateGreenLED>:
void toggleRedLED(){
	ToggleLED(RED_LED);
}
void activateGreenLED(){
 800021a:	b580      	push	{r7, lr}
 800021c:	af00      	add	r7, sp, #0
	TurnOnLED(GREEN_LED);
 800021e:	2001      	movs	r0, #1
 8000220:	f000 fb7c 	bl	800091c <TurnOnLED>
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}

08000228 <deactivateGreenLED>:
void activateRedLED(){
	TurnOnLED(RED_LED);
}
void deactivateGreenLED(){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	TurnOffLED(GREEN_LED);
 800022c:	2001      	movs	r0, #1
 800022e:	f000 fb57 	bl	80008e0 <TurnOffLED>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}

08000236 <syncButton>:
void deactivateRedLED(){
	TurnOffLED(RED_LED);
}

void syncButton(){
 8000236:	b580      	push	{r7, lr}
 8000238:	b082      	sub	sp, #8
 800023a:	af00      	add	r7, sp, #0
	bool pressed = BUT_Pressed();
 800023c:	f000 f862 	bl	8000304 <BUT_Pressed>
 8000240:	4603      	mov	r3, r0
 8000242:	71fb      	strb	r3, [r7, #7]
	pressed ? activateGreenLED() : deactivateGreenLED();
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <syncButton+0x1a>
 800024a:	f7ff ffe6 	bl	800021a <activateGreenLED>
}
 800024e:	e001      	b.n	8000254 <syncButton+0x1e>
	pressed ? activateGreenLED() : deactivateGreenLED();
 8000250:	f7ff ffea 	bl	8000228 <deactivateGreenLED>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <appDelay>:

void appDelay(uint32_t timeDelay) {
 800025c:	b480      	push	{r7}
 800025e:	b089      	sub	sp, #36	@ 0x24
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	char name[NAME_LEN] = {'P', 'e', 't', 'e', 'r'};
 8000264:	4a15      	ldr	r2, [pc, #84]	@ (80002bc <appDelay+0x60>)
 8000266:	f107 0310 	add.w	r3, r7, #16
 800026a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800026e:	6018      	str	r0, [r3, #0]
 8000270:	3304      	adds	r3, #4
 8000272:	7019      	strb	r1, [r3, #0]
	[[maybe_unused]] char cname[NAME_LEN];
	for (uint32_t l = 0; l < timeDelay; l++) {
 8000274:	2300      	movs	r3, #0
 8000276:	61fb      	str	r3, [r7, #28]
 8000278:	e016      	b.n	80002a8 <appDelay+0x4c>
		for (uint32_t i = 0; i < NAME_LEN; i++) {
 800027a:	2300      	movs	r3, #0
 800027c:	61bb      	str	r3, [r7, #24]
 800027e:	e00d      	b.n	800029c <appDelay+0x40>
			cname[i]=name[i];
 8000280:	f107 0210 	add.w	r2, r7, #16
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	4413      	add	r3, r2
 8000288:	7819      	ldrb	r1, [r3, #0]
 800028a:	f107 0208 	add.w	r2, r7, #8
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	4413      	add	r3, r2
 8000292:	460a      	mov	r2, r1
 8000294:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < NAME_LEN; i++) {
 8000296:	69bb      	ldr	r3, [r7, #24]
 8000298:	3301      	adds	r3, #1
 800029a:	61bb      	str	r3, [r7, #24]
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	2b04      	cmp	r3, #4
 80002a0:	d9ee      	bls.n	8000280 <appDelay+0x24>
	for (uint32_t l = 0; l < timeDelay; l++) {
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	3301      	adds	r3, #1
 80002a6:	61fb      	str	r3, [r7, #28]
 80002a8:	69fa      	ldr	r2, [r7, #28]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d3e4      	bcc.n	800027a <appDelay+0x1e>
		}
	}
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	3724      	adds	r7, #36	@ 0x24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	08000ae4 	.word	0x08000ae4

080002c0 <BUT_Init>:
 */

#include <Button_Driver.h>

// Init also sets the clock in this driver
void BUT_Init(bool useInterrupts) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
	// This might be redundant
	GPIO_ClockControl(UBUT_PORT, ENABLE);
 80002ca:	2101      	movs	r1, #1
 80002cc:	480c      	ldr	r0, [pc, #48]	@ (8000300 <BUT_Init+0x40>)
 80002ce:	f000 f955 	bl	800057c <GPIO_ClockControl>
	// Use the default values for our gpio (all zeros for our board so redundant)
	// It defaults to input. we could set it explicitly to input if we wanted, but for this to be a problem DEFAULT_PIN_CONFIG would have to change.
	GPIO_PinConfig_t temp = DEFAULT_PIN_CONFIG(UBUT_PIN); // dont worry this is valid for pin zero of port a just not some other pins
 80002d2:	f107 0308 	add.w	r3, r7, #8
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	f8c3 2003 	str.w	r2, [r3, #3]
	if (useInterrupts){
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <BUT_Init+0x28>
		temp.PinInteruptMode = FALLING_OR_RISING_EDGE_INTERRUPT;
 80002e4:	2303      	movs	r3, #3
 80002e6:	73bb      	strb	r3, [r7, #14]
	}

	GPIO_Init(UBUT_PORT,temp);
 80002e8:	f107 0308 	add.w	r3, r7, #8
 80002ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80002f0:	4803      	ldr	r0, [pc, #12]	@ (8000300 <BUT_Init+0x40>)
 80002f2:	f000 f8a7 	bl	8000444 <GPIO_Init>
}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40020000 	.word	0x40020000

08000304 <BUT_Pressed>:

bool BUT_Pressed() {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
	uint32_t bpreseed = GPIO_ReadFromInputPin(UBUT_PORT, UBUT_PIN);
 800030a:	2100      	movs	r1, #0
 800030c:	4807      	ldr	r0, [pc, #28]	@ (800032c <BUT_Pressed+0x28>)
 800030e:	f000 f95d 	bl	80005cc <GPIO_ReadFromInputPin>
 8000312:	4603      	mov	r3, r0
 8000314:	607b      	str	r3, [r7, #4]
	return (bool) bpreseed;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b00      	cmp	r3, #0
 800031a:	bf14      	ite	ne
 800031c:	2301      	movne	r3, #1
 800031e:	2300      	moveq	r3, #0
 8000320:	b2db      	uxtb	r3, r3
}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40020000 	.word	0x40020000

08000330 <setFourBitReg>:
#define FOUR_BIT_REG_WIDTH 4
#define TWO_BIT_REG_WIDTH 2

// TODO make sure they start with GPIO_ or move them out
// Nevermind, asked Xavion and helper functions not in the header dont need to start with gpio
void setFourBitReg(volatile uint32_t (*reg)[2], uint8_t subPos, uint32_t bits){
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	460b      	mov	r3, r1
 800033a:	607a      	str	r2, [r7, #4]
 800033c:	72fb      	strb	r3, [r7, #11]
	uint32_t temp;
	temp = (bits << (FOUR_BIT_REG_WIDTH * subPos));
 800033e:	7afb      	ldrb	r3, [r7, #11]
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fa02 f303 	lsl.w	r3, r2, r3
 8000348:	617b      	str	r3, [r7, #20]

	// Move up by 4 bytes if we are over halfway through, thats what [(subPos > 7)] does

	// Clear the mode with two zeros in our pin related bits
	(*reg)[(subPos > 7)] &= ~(0b1111 << (FOUR_BIT_REG_WIDTH * subPos));
 800034a:	7afb      	ldrb	r3, [r7, #11]
 800034c:	2b07      	cmp	r3, #7
 800034e:	bf8c      	ite	hi
 8000350:	2301      	movhi	r3, #1
 8000352:	2300      	movls	r3, #0
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800035e:	7afa      	ldrb	r2, [r7, #11]
 8000360:	0092      	lsls	r2, r2, #2
 8000362:	210f      	movs	r1, #15
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	43d2      	mvns	r2, r2
 800036a:	4610      	mov	r0, r2
 800036c:	7afa      	ldrb	r2, [r7, #11]
 800036e:	2a07      	cmp	r2, #7
 8000370:	bf8c      	ite	hi
 8000372:	2201      	movhi	r2, #1
 8000374:	2200      	movls	r2, #0
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	4611      	mov	r1, r2
 800037a:	ea03 0200 	and.w	r2, r3, r0
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	// Set the mode from our args
	(*reg)[(subPos > 7)] |= temp;
 8000384:	7afb      	ldrb	r3, [r7, #11]
 8000386:	2b07      	cmp	r3, #7
 8000388:	bf8c      	ite	hi
 800038a:	2301      	movhi	r3, #1
 800038c:	2300      	movls	r3, #0
 800038e:	b2db      	uxtb	r3, r3
 8000390:	461a      	mov	r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000398:	7afb      	ldrb	r3, [r7, #11]
 800039a:	2b07      	cmp	r3, #7
 800039c:	bf8c      	ite	hi
 800039e:	2301      	movhi	r3, #1
 80003a0:	2300      	movls	r3, #0
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4619      	mov	r1, r3
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	431a      	orrs	r2, r3
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80003b0:	bf00      	nop
 80003b2:	371c      	adds	r7, #28
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <setTwoBitReg>:
void setTwoBitReg(volatile uint32_t * reg, uint8_t subPos, uint32_t bits){
 80003ba:	b480      	push	{r7}
 80003bc:	b087      	sub	sp, #28
 80003be:	af00      	add	r7, sp, #0
 80003c0:	60f8      	str	r0, [r7, #12]
 80003c2:	460b      	mov	r3, r1
 80003c4:	607a      	str	r2, [r7, #4]
 80003c6:	72fb      	strb	r3, [r7, #11]
	uint32_t temp;
	temp = (bits << (TWO_BIT_REG_WIDTH * subPos));
 80003c8:	7afb      	ldrb	r3, [r7, #11]
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	617b      	str	r3, [r7, #20]

	// Clear the mode with two zeros in our pin related bits
	(*reg) &= ~(0b11 << (TWO_BIT_REG_WIDTH * subPos));
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	7afa      	ldrb	r2, [r7, #11]
 80003da:	0052      	lsls	r2, r2, #1
 80003dc:	2103      	movs	r1, #3
 80003de:	fa01 f202 	lsl.w	r2, r1, r2
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	401a      	ands	r2, r3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	601a      	str	r2, [r3, #0]

	// Set the mode from our args
	(*reg) |= temp;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	431a      	orrs	r2, r3
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	601a      	str	r2, [r3, #0]
}
 80003f6:	bf00      	nop
 80003f8:	371c      	adds	r7, #28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <setOneBitReg>:
void setOneBitReg(volatile uint32_t * reg, uint8_t subPos, uint32_t bits){
 8000400:	b480      	push	{r7}
 8000402:	b087      	sub	sp, #28
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	460b      	mov	r3, r1
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	72fb      	strb	r3, [r7, #11]
	uint32_t temp;
	temp = (bits << subPos);
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	fa02 f303 	lsl.w	r3, r2, r3
 8000416:	617b      	str	r3, [r7, #20]

	// Clear the mode with two zeros in our pin related bits
	(*reg) &= ~(0b1 << subPos);
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	7afa      	ldrb	r2, [r7, #11]
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f202 	lsl.w	r2, r1, r2
 8000424:	43d2      	mvns	r2, r2
 8000426:	401a      	ands	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	601a      	str	r2, [r3, #0]

	// Set the mode from our args
	(*reg) |= temp;
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	431a      	orrs	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	bf00      	nop
 800043a:	371c      	adds	r7, #28
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
	...

08000444 <GPIO_Init>:

void GPIO_Init(GPIO_RegDef_t * port, GPIO_PinConfig_t config){
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	e883 0006 	stmia.w	r3, {r1, r2}
	static bool calledBefore;
	if (!calledBefore){
 8000452:	4b48      	ldr	r3, [pc, #288]	@ (8000574 <GPIO_Init+0x130>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	f083 0301 	eor.w	r3, r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d004      	beq.n	800046a <GPIO_Init+0x26>
		IRQ_Init();
 8000460:	f000 f982 	bl	8000768 <IRQ_Init>
		calledBefore = 1;
 8000464:	4b43      	ldr	r3, [pc, #268]	@ (8000574 <GPIO_Init+0x130>)
 8000466:	2201      	movs	r2, #1
 8000468:	701a      	strb	r2, [r3, #0]
	}

	setTwoBitReg(&(port->MODER), config.PinNumber, config.PinMode);
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	7939      	ldrb	r1, [r7, #4]
 800046e:	797a      	ldrb	r2, [r7, #5]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ffa2 	bl	80003ba <setTwoBitReg>

	if (config.PinInteruptMode != NO_INTERRUPT && config.PinNumber <=15){
 8000476:	7abb      	ldrb	r3, [r7, #10]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d056      	beq.n	800052a <GPIO_Init+0xe6>
 800047c:	793b      	ldrb	r3, [r7, #4]
 800047e:	2b0f      	cmp	r3, #15
 8000480:	d853      	bhi.n	800052a <GPIO_Init+0xe6>
		// Set triggers
		bool falling = ((FALLING_EDGE_INTERRUPT == config.PinInteruptMode) | (FALLING_OR_RISING_EDGE_INTERRUPT == config.PinInteruptMode));
 8000482:	7abb      	ldrb	r3, [r7, #10]
 8000484:	2b01      	cmp	r3, #1
 8000486:	bf0c      	ite	eq
 8000488:	2301      	moveq	r3, #1
 800048a:	2300      	movne	r3, #0
 800048c:	b2da      	uxtb	r2, r3
 800048e:	7abb      	ldrb	r3, [r7, #10]
 8000490:	2b03      	cmp	r3, #3
 8000492:	bf0c      	ite	eq
 8000494:	2301      	moveq	r3, #1
 8000496:	2300      	movne	r3, #0
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4313      	orrs	r3, r2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	75fb      	strb	r3, [r7, #23]
 80004a0:	7dfb      	ldrb	r3, [r7, #23]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	75fb      	strb	r3, [r7, #23]
		bool rising = ((RISING_EDGE_INTERRUPT == config.PinInteruptMode) | (FALLING_OR_RISING_EDGE_INTERRUPT == config.PinInteruptMode));
 80004a8:	7abb      	ldrb	r3, [r7, #10]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	bf0c      	ite	eq
 80004ae:	2301      	moveq	r3, #1
 80004b0:	2300      	movne	r3, #0
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	7abb      	ldrb	r3, [r7, #10]
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	bf0c      	ite	eq
 80004ba:	2301      	moveq	r3, #1
 80004bc:	2300      	movne	r3, #0
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	75bb      	strb	r3, [r7, #22]
 80004c6:	7dbb      	ldrb	r3, [r7, #22]
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	75bb      	strb	r3, [r7, #22]
		EXTI->RTSR |= (rising << config.PinNumber); // on if on
 80004ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000578 <GPIO_Init+0x134>)
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	7dba      	ldrb	r2, [r7, #22]
 80004d4:	7939      	ldrb	r1, [r7, #4]
 80004d6:	408a      	lsls	r2, r1
 80004d8:	4611      	mov	r1, r2
 80004da:	4a27      	ldr	r2, [pc, #156]	@ (8000578 <GPIO_Init+0x134>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6093      	str	r3, [r2, #8]
		EXTI->RTSR &= (rising << config.PinNumber); // off if off
 80004e0:	4b25      	ldr	r3, [pc, #148]	@ (8000578 <GPIO_Init+0x134>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	7dba      	ldrb	r2, [r7, #22]
 80004e6:	7939      	ldrb	r1, [r7, #4]
 80004e8:	408a      	lsls	r2, r1
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a22      	ldr	r2, [pc, #136]	@ (8000578 <GPIO_Init+0x134>)
 80004ee:	400b      	ands	r3, r1
 80004f0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (falling << config.PinNumber);
 80004f2:	4b21      	ldr	r3, [pc, #132]	@ (8000578 <GPIO_Init+0x134>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	7dfa      	ldrb	r2, [r7, #23]
 80004f8:	7939      	ldrb	r1, [r7, #4]
 80004fa:	408a      	lsls	r2, r1
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000578 <GPIO_Init+0x134>)
 8000500:	430b      	orrs	r3, r1
 8000502:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR &= (falling << config.PinNumber);
 8000504:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <GPIO_Init+0x134>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	7dfa      	ldrb	r2, [r7, #23]
 800050a:	7939      	ldrb	r1, [r7, #4]
 800050c:	408a      	lsls	r2, r1
 800050e:	4611      	mov	r1, r2
 8000510:	4a19      	ldr	r2, [pc, #100]	@ (8000578 <GPIO_Init+0x134>)
 8000512:	400b      	ands	r3, r1
 8000514:	60d3      	str	r3, [r2, #12]

		// Unmask this pin/line
		EXTI->IMR |= (1 << config.PinMode);
 8000516:	4b18      	ldr	r3, [pc, #96]	@ (8000578 <GPIO_Init+0x134>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	797a      	ldrb	r2, [r7, #5]
 800051c:	4611      	mov	r1, r2
 800051e:	2201      	movs	r2, #1
 8000520:	408a      	lsls	r2, r1
 8000522:	4611      	mov	r1, r2
 8000524:	4a14      	ldr	r2, [pc, #80]	@ (8000578 <GPIO_Init+0x134>)
 8000526:	430b      	orrs	r3, r1
 8000528:	6013      	str	r3, [r2, #0]
	}

	setTwoBitReg(&(port->OSPEEDR), config.PinNumber, config.PinSpeed);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3308      	adds	r3, #8
 800052e:	7939      	ldrb	r1, [r7, #4]
 8000530:	79fa      	ldrb	r2, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff41 	bl	80003ba <setTwoBitReg>
	setTwoBitReg(&(port->PUPDR), config.PinNumber, config.PinPuPdControl);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	330c      	adds	r3, #12
 800053c:	7939      	ldrb	r1, [r7, #4]
 800053e:	7a3a      	ldrb	r2, [r7, #8]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ff3a 	bl	80003ba <setTwoBitReg>

	setOneBitReg(&(port->OTYPER), config.PinNumber, config.OPType);
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3304      	adds	r3, #4
 800054a:	7939      	ldrb	r1, [r7, #4]
 800054c:	79ba      	ldrb	r2, [r7, #6]
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff56 	bl	8000400 <setOneBitReg>

	if (port->MODER == 0b10) {
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d106      	bne.n	800056a <GPIO_Init+0x126>
		setFourBitReg(&(port->AFRL), config.PinNumber, config.PinAltFunMode);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3320      	adds	r3, #32
 8000560:	7939      	ldrb	r1, [r7, #4]
 8000562:	7a7a      	ldrb	r2, [r7, #9]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fee3 	bl	8000330 <setFourBitReg>
	}
}
 800056a:	bf00      	nop
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000001c 	.word	0x2000001c
 8000578:	40013c00 	.word	0x40013c00

0800057c <GPIO_ClockControl>:

void GPIO_ClockControl(GPIO_RegDef_t * port, uint8_t enableDisable) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
	if (enableDisable == 1){ // Enable it
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d10e      	bne.n	80005ac <GPIO_ClockControl+0x30>
		RCC->AHB1EN |= (1 << GPIO_PortToIndex(port));
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f85c 	bl	800064c <GPIO_PortToIndex>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	2301      	movs	r3, #1
 800059a:	fa03 f202 	lsl.w	r2, r3, r2
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <GPIO_ClockControl+0x4c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a08      	ldr	r2, [pc, #32]	@ (80005c8 <GPIO_ClockControl+0x4c>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
	} else { // Disable it
		RCC->AHB1EN &= ((!1) << GPIO_PortToIndex(port));
	}
}
 80005aa:	e009      	b.n	80005c0 <GPIO_ClockControl+0x44>
		RCC->AHB1EN &= ((!1) << GPIO_PortToIndex(port));
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f84d 	bl	800064c <GPIO_PortToIndex>
 80005b2:	2200      	movs	r2, #0
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <GPIO_ClockControl+0x4c>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <GPIO_ClockControl+0x4c>)
 80005bc:	400b      	ands	r3, r1
 80005be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40023800 	.word	0x40023800

080005cc <GPIO_ReadFromInputPin>:

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t * port, uint8_t pinNumber) {
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	70fb      	strb	r3, [r7, #3]
	if ( (((port->MODER) & (0b11<<pinNumber*2)) >> pinNumber*2) == OUTPUT) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	78fa      	ldrb	r2, [r7, #3]
 80005de:	0052      	lsls	r2, r2, #1
 80005e0:	2103      	movs	r1, #3
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	401a      	ands	r2, r3
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa22 f303 	lsr.w	r3, r2, r3
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d10b      	bne.n	800060c <GPIO_ReadFromInputPin+0x40>
		return ((port->ODR) & (1<<pinNumber)) >> pinNumber;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	78fa      	ldrb	r2, [r7, #3]
 80005fa:	2101      	movs	r1, #1
 80005fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000600:	401a      	ands	r2, r3
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	fa22 f303 	lsr.w	r3, r2, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	e01a      	b.n	8000642 <GPIO_ReadFromInputPin+0x76>
	} else if ( (((port->MODER) & (0b11<<pinNumber*2)) >> pinNumber*2) == INPUT) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	78fa      	ldrb	r2, [r7, #3]
 8000612:	0052      	lsls	r2, r2, #1
 8000614:	2103      	movs	r1, #3
 8000616:	fa01 f202 	lsl.w	r2, r1, r2
 800061a:	401a      	ands	r2, r3
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	fa22 f303 	lsr.w	r3, r2, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10b      	bne.n	8000640 <GPIO_ReadFromInputPin+0x74>
		return ((port->IDR) & (1<<pinNumber)) >> pinNumber;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	78fa      	ldrb	r2, [r7, #3]
 800062e:	2101      	movs	r1, #1
 8000630:	fa01 f202 	lsl.w	r2, r1, r2
 8000634:	401a      	ands	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	fa22 f303 	lsr.w	r3, r2, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	e000      	b.n	8000642 <GPIO_ReadFromInputPin+0x76>
	} else {
		return 0;
 8000640:	2300      	movs	r3, #0
	}
}
 8000642:	4618      	mov	r0, r3
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <GPIO_PortToIndex>:

uint8_t GPIO_PortToIndex(GPIO_RegDef_t * port) {
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	uint32_t address = ((uint32_t) port);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	617b      	str	r3, [r7, #20]
	// TODO assert address not >GPIO_END_ADDR
	uint32_t offsetFromBase = address - GPIO_START_ADDR;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 800065e:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8000662:	613b      	str	r3, [r7, #16]
	uint32_t portIndex = offsetFromBase/GPIO_SEPPARATION_BYTES;
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	0a9b      	lsrs	r3, r3, #10
 8000668:	60fb      	str	r3, [r7, #12]
	return portIndex;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	b2db      	uxtb	r3, r3
}
 800066e:	4618      	mov	r0, r3
 8000670:	371c      	adds	r7, #28
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <GPIO_WriteToOutputPin>:

void GPIO_WriteToOutputPin(GPIO_RegDef_t * port, uint8_t pinNumber, uint8_t value) {
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
 8000684:	4613      	mov	r3, r2
 8000686:	70bb      	strb	r3, [r7, #2]
	uint32_t mask = (1 << pinNumber);
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	2201      	movs	r2, #1
 800068c:	fa02 f303 	lsl.w	r3, r2, r3
 8000690:	60fb      	str	r3, [r7, #12]
//	uint32_t nmask = ~mask;
	if (value == 0){
 8000692:	78bb      	ldrb	r3, [r7, #2]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d107      	bne.n	80006a8 <GPIO_WriteToOutputPin+0x30>
		(port->ODR) &= ~mask;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	43db      	mvns	r3, r3
 80006a0:	401a      	ands	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	615a      	str	r2, [r3, #20]
	} else {
		(port->ODR) |= mask;
	}
}
 80006a6:	e005      	b.n	80006b4 <GPIO_WriteToOutputPin+0x3c>
		(port->ODR) |= mask;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	431a      	orrs	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	615a      	str	r2, [r3, #20]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <GPIO_ToggleOutputPin>:

void GPIO_ToggleOutputPin(GPIO_RegDef_t * port, uint8_t pinNumber) {
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(port, pinNumber, GPIO_ReadFromInputPin(port, pinNumber) == 0);
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff7c 	bl	80005cc <GPIO_ReadFromInputPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf0c      	ite	eq
 80006da:	2301      	moveq	r3, #1
 80006dc:	2300      	movne	r3, #0
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	4619      	mov	r1, r3
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ffc6 	bl	8000678 <GPIO_WriteToOutputPin>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <IRQ_EXTI_pin_picker>:
 */

#include <InterruptControl.h>

// ExtiNumber can be found with GPIO_PortToIndex function
void IRQ_EXTI_pin_picker(uint8_t ExtiNumber, uint8_t portNumber){
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	460a      	mov	r2, r1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]
	uint32_t temp;
	temp = (portNumber << ((ExtiNumber * 4) % 16));
 8000704:	79ba      	ldrb	r2, [r7, #6]
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	f003 030c 	and.w	r3, r3, #12
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	60fb      	str	r3, [r7, #12]

	// Integer division
	SYSCFG->EXTICR[ExtiNumber/4] &= ~(0b1111 << ((ExtiNumber * 4) % 16));
 8000714:	4a13      	ldr	r2, [pc, #76]	@ (8000764 <IRQ_EXTI_pin_picker+0x70>)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	089b      	lsrs	r3, r3, #2
 800071a:	b2d8      	uxtb	r0, r3
 800071c:	4603      	mov	r3, r0
 800071e:	3302      	adds	r3, #2
 8000720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	0092      	lsls	r2, r2, #2
 8000728:	f002 020c 	and.w	r2, r2, #12
 800072c:	210f      	movs	r1, #15
 800072e:	fa01 f202 	lsl.w	r2, r1, r2
 8000732:	43d2      	mvns	r2, r2
 8000734:	490b      	ldr	r1, [pc, #44]	@ (8000764 <IRQ_EXTI_pin_picker+0x70>)
 8000736:	401a      	ands	r2, r3
 8000738:	1c83      	adds	r3, r0, #2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->EXTICR[ExtiNumber/4] |= temp;
 800073e:	4a09      	ldr	r2, [pc, #36]	@ (8000764 <IRQ_EXTI_pin_picker+0x70>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	089b      	lsrs	r3, r3, #2
 8000744:	b2d8      	uxtb	r0, r3
 8000746:	4603      	mov	r3, r0
 8000748:	3302      	adds	r3, #2
 800074a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074e:	4905      	ldr	r1, [pc, #20]	@ (8000764 <IRQ_EXTI_pin_picker+0x70>)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	431a      	orrs	r2, r3
 8000754:	1c83      	adds	r3, r0, #2
 8000756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40013800 	.word	0x40013800

08000768 <IRQ_Init>:

void IRQ_Init(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	EN_SYSCFG_CLK; // Enable Syscfg clock
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <IRQ_Init+0x24>)
 800076e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000770:	4a06      	ldr	r2, [pc, #24]	@ (800078c <IRQ_Init+0x24>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000776:	6353      	str	r3, [r2, #52]	@ 0x34
	// Dont need to enable exti through rcc

	// Specific to the button use case
	IRQ_EXTI_pin_picker(0,0); // set exti port
 8000778:	2100      	movs	r1, #0
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff ffba 	bl	80006f4 <IRQ_EXTI_pin_picker>
	IRQ_enable(EXTI0_IRQ_NUMBER);
 8000780:	2006      	movs	r0, #6
 8000782:	f000 f805 	bl	8000790 <IRQ_enable>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <IRQ_enable>:

void IRQ_enable(uint8_t irqNum){
 8000790:	b490      	push	{r4, r7}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	(* NVIC_ISER0)[irqNum/32] |= (1 << (irqNum%32));
 800079a:	4a0c      	ldr	r2, [pc, #48]	@ (80007cc <IRQ_enable+0x3c>)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	b2d8      	uxtb	r0, r3
 80007a2:	4603      	mov	r3, r0
 80007a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	f002 021f 	and.w	r2, r2, #31
 80007ae:	2101      	movs	r1, #1
 80007b0:	fa01 f202 	lsl.w	r2, r1, r2
 80007b4:	4614      	mov	r4, r2
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <IRQ_enable+0x3c>)
 80007b8:	4601      	mov	r1, r0
 80007ba:	4323      	orrs	r3, r4
 80007bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc90      	pop	{r4, r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <IRQ_disable>:
void IRQ_disable(uint8_t irqNum){
 80007d0:	b490      	push	{r4, r7}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	(* NVIC_ICER0)[irqNum/32] |= (1 << (irqNum%32));
 80007da:	4a0c      	ldr	r2, [pc, #48]	@ (800080c <IRQ_disable+0x3c>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	095b      	lsrs	r3, r3, #5
 80007e0:	b2d8      	uxtb	r0, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	f002 021f 	and.w	r2, r2, #31
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f202 	lsl.w	r2, r1, r2
 80007f4:	4614      	mov	r4, r2
 80007f6:	4a05      	ldr	r2, [pc, #20]	@ (800080c <IRQ_disable+0x3c>)
 80007f8:	4601      	mov	r1, r0
 80007fa:	4323      	orrs	r3, r4
 80007fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bc90      	pop	{r4, r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e180 	.word	0xe000e180

08000810 <IRQ_clear>:
void IRQ_set(uint8_t irqNum){
	(* NVIC_ISPR0)[irqNum/32] |= (1 << (irqNum%32));
}
void IRQ_clear(uint8_t irqNum){
 8000810:	b490      	push	{r4, r7}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	(* NVIC_ICPR0)[irqNum/32] |= (1 << (irqNum%32));
 800081a:	4a0c      	ldr	r2, [pc, #48]	@ (800084c <IRQ_clear+0x3c>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	b2d8      	uxtb	r0, r3
 8000822:	4603      	mov	r3, r0
 8000824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	f002 021f 	and.w	r2, r2, #31
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	4614      	mov	r4, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	@ (800084c <IRQ_clear+0x3c>)
 8000838:	4601      	mov	r1, r0
 800083a:	4323      	orrs	r3, r4
 800083c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bc90      	pop	{r4, r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e280 	.word	0xe000e280

08000850 <IRQ_exti_line_clear>:

void IRQ_exti_line_clear(uint8_t lineNum) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	(EXTI->PR) |= (1 << lineNum);
 800085a:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <IRQ_exti_line_clear+0x28>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	79fa      	ldrb	r2, [r7, #7]
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	4611      	mov	r1, r2
 8000868:	4a03      	ldr	r2, [pc, #12]	@ (8000878 <IRQ_exti_line_clear+0x28>)
 800086a:	430b      	orrs	r3, r1
 800086c:	6153      	str	r3, [r2, #20]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40013c00 	.word	0x40013c00

0800087c <LED_Init>:
 *      Author: user
 */

#include <LED_Driver.h>

void LED_Init(uint8_t ledNum) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	// This might be redundant
	GPIO_ClockControl(LED_PORT, ENABLE);
 8000886:	2101      	movs	r1, #1
 8000888:	4814      	ldr	r0, [pc, #80]	@ (80008dc <LED_Init+0x60>)
 800088a:	f7ff fe77 	bl	800057c <GPIO_ClockControl>

	uint8_t pinNumber;
	switch (ledNum) {
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <LED_Init+0x22>
 8000894:	2b01      	cmp	r3, #1
 8000896:	d105      	bne.n	80008a4 <LED_Init+0x28>
		case GREEN_LED:
			pinNumber = GREEN_LED_PIN;
 8000898:	230d      	movs	r3, #13
 800089a:	73fb      	strb	r3, [r7, #15]
			break;
 800089c:	e003      	b.n	80008a6 <LED_Init+0x2a>
		case RED_LED:
			pinNumber = RED_LED_PIN;
 800089e:	230e      	movs	r3, #14
 80008a0:	73fb      	strb	r3, [r7, #15]
			break;
 80008a2:	e000      	b.n	80008a6 <LED_Init+0x2a>
		default:
			break;
 80008a4:	bf00      	nop
	}

	// Use the default values for our gpio (all zeros for our board so redundant)
	GPIO_PinConfig_t temp = DEFAULT_PIN_CONFIG(pinNumber);
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	723b      	strb	r3, [r7, #8]
 80008aa:	2300      	movs	r3, #0
 80008ac:	727b      	strb	r3, [r7, #9]
 80008ae:	2300      	movs	r3, #0
 80008b0:	72bb      	strb	r3, [r7, #10]
 80008b2:	2300      	movs	r3, #0
 80008b4:	72fb      	strb	r3, [r7, #11]
 80008b6:	2300      	movs	r3, #0
 80008b8:	733b      	strb	r3, [r7, #12]
 80008ba:	2300      	movs	r3, #0
 80008bc:	737b      	strb	r3, [r7, #13]
 80008be:	2300      	movs	r3, #0
 80008c0:	73bb      	strb	r3, [r7, #14]
	temp.PinMode = OUTPUT;
 80008c2:	2301      	movs	r3, #1
 80008c4:	727b      	strb	r3, [r7, #9]

	GPIO_Init(GPIOG, temp);
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008ce:	4803      	ldr	r0, [pc, #12]	@ (80008dc <LED_Init+0x60>)
 80008d0:	f7ff fdb8 	bl	8000444 <GPIO_Init>
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021800 	.word	0x40021800

080008e0 <TurnOffLED>:

void TurnOffLED(uint8_t ledNum) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t pinNumber;
	switch (ledNum) {
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d004      	beq.n	80008fa <TurnOffLED+0x1a>
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d105      	bne.n	8000900 <TurnOffLED+0x20>
		case GREEN_LED:
			pinNumber = GREEN_LED_PIN;
 80008f4:	230d      	movs	r3, #13
 80008f6:	73fb      	strb	r3, [r7, #15]
			break;
 80008f8:	e003      	b.n	8000902 <TurnOffLED+0x22>
		case RED_LED:
			pinNumber = RED_LED_PIN;
 80008fa:	230e      	movs	r3, #14
 80008fc:	73fb      	strb	r3, [r7, #15]
			break;
 80008fe:	e000      	b.n	8000902 <TurnOffLED+0x22>
		default:
			break;
 8000900:	bf00      	nop
	}
	GPIO_WriteToOutputPin(GPIOG, pinNumber, 0);
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <TurnOffLED+0x38>)
 800090a:	f7ff feb5 	bl	8000678 <GPIO_WriteToOutputPin>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021800 	.word	0x40021800

0800091c <TurnOnLED>:
void TurnOnLED(uint8_t ledNum) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	uint8_t pinNumber;
	switch (ledNum) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d004      	beq.n	8000936 <TurnOnLED+0x1a>
 800092c:	2b01      	cmp	r3, #1
 800092e:	d105      	bne.n	800093c <TurnOnLED+0x20>
		case GREEN_LED:
			pinNumber = GREEN_LED_PIN;
 8000930:	230d      	movs	r3, #13
 8000932:	73fb      	strb	r3, [r7, #15]
			break;
 8000934:	e003      	b.n	800093e <TurnOnLED+0x22>
		case RED_LED:
			pinNumber = RED_LED_PIN;
 8000936:	230e      	movs	r3, #14
 8000938:	73fb      	strb	r3, [r7, #15]
			break;
 800093a:	e000      	b.n	800093e <TurnOnLED+0x22>
		default:
			break;
 800093c:	bf00      	nop
	}
	GPIO_WriteToOutputPin(GPIOG, pinNumber, 1);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2201      	movs	r2, #1
 8000942:	4619      	mov	r1, r3
 8000944:	4803      	ldr	r0, [pc, #12]	@ (8000954 <TurnOnLED+0x38>)
 8000946:	f7ff fe97 	bl	8000678 <GPIO_WriteToOutputPin>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021800 	.word	0x40021800

08000958 <ToggleLED>:

void ToggleLED(uint8_t ledNum) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	uint8_t pinNumber;
	switch (ledNum) {
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d004      	beq.n	8000972 <ToggleLED+0x1a>
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <ToggleLED+0x20>
		case GREEN_LED:
			pinNumber = GREEN_LED_PIN;
 800096c:	230d      	movs	r3, #13
 800096e:	73fb      	strb	r3, [r7, #15]
			break;
 8000970:	e003      	b.n	800097a <ToggleLED+0x22>
		case RED_LED:
			pinNumber = RED_LED_PIN;
 8000972:	230e      	movs	r3, #14
 8000974:	73fb      	strb	r3, [r7, #15]
			break;
 8000976:	e000      	b.n	800097a <ToggleLED+0x22>
		default:
			break;
 8000978:	bf00      	nop
	}
	GPIO_ToggleOutputPin(GPIOG, pinNumber);
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	4619      	mov	r1, r3
 800097e:	4803      	ldr	r0, [pc, #12]	@ (800098c <ToggleLED+0x34>)
 8000980:	f7ff fe9d 	bl	80006be <GPIO_ToggleOutputPin>
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021800 	.word	0x40021800

08000990 <addSchedulerEvent>:
#include <Scheduler.h>

// a number who's bits represent the scheduled events
static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	// TODO could add code to check if the event is a single bit / a valid event but it would be slow
	scheduledEvents |= event;
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <addSchedulerEvent+0x20>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4313      	orrs	r3, r2
 80009a0:	4a03      	ldr	r2, [pc, #12]	@ (80009b0 <addSchedulerEvent+0x20>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000020 	.word	0x20000020

080009b4 <getScheduledEvents>:

void removeSchedulerEvent(uint32_t event) {
	scheduledEvents &= ~event;
}

uint32_t getScheduledEvents() {
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	return scheduledEvents;
 80009b8:	4b02      	ldr	r3, [pc, #8]	@ (80009c4 <getScheduledEvents+0x10>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000020 	.word	0x20000020

080009c8 <EXTI0_IRQHandler>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//volatile uint32_t flag = 0;

void EXTI0_IRQHandler() {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	// disable further interrupts while processing
	IRQ_disable(EXTI0_IRQ_NUMBER);
 80009cc:	2006      	movs	r0, #6
 80009ce:	f7ff feff 	bl	80007d0 <IRQ_disable>
	toggleGreenLED();
 80009d2:	f7ff fc1b 	bl	800020c <toggleGreenLED>
//	flag=0xfcc0;
//	syncButton();
//	appDelay(DELAY_MAG);
//	if (EXTI->PR & (1<<0)) {
	// Clear the pending interrupt
	IRQ_exti_line_clear(UBUT_PIN);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff ff3a 	bl	8000850 <IRQ_exti_line_clear>
	IRQ_clear(EXTI0_IRQ_NUMBER);
 80009dc:	2006      	movs	r0, #6
 80009de:	f7ff ff17 	bl	8000810 <IRQ_clear>
//	}
	IRQ_enable(EXTI0_IRQ_NUMBER);
 80009e2:	2006      	movs	r0, #6
 80009e4:	f7ff fed4 	bl	8000790 <IRQ_enable>

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <main>:

int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
	applicationInit();
 80009f2:	f7ff fbfb 	bl	80001ec <applicationInit>
	uint32_t eventsToRun;
    /* Loop forever */
	for(;;) {
		eventsToRun = getScheduledEvents();
 80009f6:	f7ff ffdd 	bl	80009b4 <getScheduledEvents>
 80009fa:	6078      	str	r0, [r7, #4]
		if ((eventsToRun & LED_TOGGLE_EVENT) != 0) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <main+0x1e>
			toggleGreenLED();
 8000a06:	f7ff fc01 	bl	800020c <toggleGreenLED>
//			toggleRedLED();
		}
		if ((eventsToRun & DELAY_EVENT) != 0) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <main+0x2e>
			appDelay(DELAY_MAG);
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <main+0x40>)
 8000a16:	f7ff fc21 	bl	800025c <appDelay>
		}
		if ((eventsToRun & POLL_BTN_EVENT) != 0) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0e8      	beq.n	80009f6 <main+0xa>
			syncButton();
 8000a24:	f7ff fc07 	bl	8000236 <syncButton>
		eventsToRun = getScheduledEvents();
 8000a28:	e7e5      	b.n	80009f6 <main+0xa>
 8000a2a:	bf00      	nop
 8000a2c:	0003d090 	.word	0x0003d090

08000a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	@ (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	@ (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	@ (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f000 f811 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff ffc3 	bl	80009ec <main>

08000a66 <LoopForever>:

LoopForever:
  b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a74:	08000af4 	.word	0x08000af4
  ldr r2, =_sbss
 8000a78:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a7c:	20000024 	.word	0x20000024

08000a80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>
	...

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4d0d      	ldr	r5, [pc, #52]	@ (8000abc <__libc_init_array+0x38>)
 8000a88:	4c0d      	ldr	r4, [pc, #52]	@ (8000ac0 <__libc_init_array+0x3c>)
 8000a8a:	1b64      	subs	r4, r4, r5
 8000a8c:	10a4      	asrs	r4, r4, #2
 8000a8e:	2600      	movs	r6, #0
 8000a90:	42a6      	cmp	r6, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	4d0b      	ldr	r5, [pc, #44]	@ (8000ac4 <__libc_init_array+0x40>)
 8000a96:	4c0c      	ldr	r4, [pc, #48]	@ (8000ac8 <__libc_init_array+0x44>)
 8000a98:	f000 f818 	bl	8000acc <_init>
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	42a6      	cmp	r6, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aac:	4798      	blx	r3
 8000aae:	3601      	adds	r6, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab6:	4798      	blx	r3
 8000ab8:	3601      	adds	r6, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	08000aec 	.word	0x08000aec
 8000ac0:	08000aec 	.word	0x08000aec
 8000ac4:	08000aec 	.word	0x08000aec
 8000ac8:	08000af0 	.word	0x08000af0

08000acc <_init>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr

08000ad8 <_fini>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr
