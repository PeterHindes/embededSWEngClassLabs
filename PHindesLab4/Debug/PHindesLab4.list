
PHindesLab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c90  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e3c  08000e44  00001e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e3c  08000e3c  00001e44  2**0
                  CONTENTS
  4 .ARM          00000000  08000e3c  08000e3c  00001e44  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e3c  08000e44  00001e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e3c  08000e3c  00001e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e40  08000e40  00001e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001e44  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020d2  00000000  00000000  00001e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008de  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c0  00000000  00000000  00004820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e6  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016ed  00000000  00000000  00004cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c09  00000000  00000000  000063b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005348  00000000  00000000  00008fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000e304  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008a4  00000000  00000000  0000e348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0000ebec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000e24 	.word	0x08000e24

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000e24 	.word	0x08000e24

080001ec <applicationInit>:
}
void redLEDInit(){
	LED_Init(RED_LED);
}

void applicationInit(){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	LED_Init(GREEN_LED);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 fb25 	bl	8000840 <LED_Init>
	LED_Init(RED_LED);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 fb22 	bl	8000840 <LED_Init>
	TurnOffLED(GREEN_LED);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f000 fb51 	bl	80008a4 <TurnOffLED>
	TurnOffLED(RED_LED);
 8000202:	2000      	movs	r0, #0
 8000204:	f000 fb4e 	bl	80008a4 <TurnOffLED>

#if DAUL_TIMER_USAGE == 0
	LED_InitTimer2();
	LED_StartTimer2();
#else
	BUT_Init(RISING_EDGE_INTERRUPT);
 8000208:	2002      	movs	r0, #2
 800020a:	f000 f861 	bl	80002d0 <BUT_Init>
	LED_InitTimer5(false);
 800020e:	2000      	movs	r0, #0
 8000210:	f000 fb82 	bl	8000918 <LED_InitTimer5>
#endif
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}

08000218 <TIM5_IRQHandler>:
	IRQ_clear(TIM2_IRQ_NUMBER);
	IRQ_enable(TIM2_IRQ_NUMBER);
}
#elif DAUL_TIMER_USAGE == 1
bool valSaved = false;
void TIM5_IRQHandler(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	// disable further interrupts while processing
	IRQ_disable(TIM5_IRQ_NUMBER);
 800021c:	2032      	movs	r0, #50	@ 0x32
 800021e:	f000 fa99 	bl	8000754 <IRQ_disable>

	// do work
	if (valSaved != true)
 8000222:	4b0b      	ldr	r3, [pc, #44]	@ (8000250 <TIM5_IRQHandler+0x38>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	f083 0301 	eor.w	r3, r3, #1
 800022a:	b2db      	uxtb	r3, r3
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <TIM5_IRQHandler+0x1c>
		HANG();
 8000230:	f000 fbc8 	bl	80009c4 <HANG>
	toggleGreenLED();
 8000234:	f000 f844 	bl	80002c0 <toggleGreenLED>

	// Clear the pending interrupt from timer and nvic and then reenable this interrupt
	IRQ_tim_line_clear(5);
 8000238:	2005      	movs	r0, #5
 800023a:	f000 fae1 	bl	8000800 <IRQ_tim_line_clear>
	IRQ_clear(TIM5_IRQ_NUMBER);
 800023e:	2032      	movs	r0, #50	@ 0x32
 8000240:	f000 faa8 	bl	8000794 <IRQ_clear>
	IRQ_enable(TIM5_IRQ_NUMBER);
 8000244:	2032      	movs	r0, #50	@ 0x32
 8000246:	f000 fa65 	bl	8000714 <IRQ_enable>
}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000001c 	.word	0x2000001c

08000254 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler() {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	static bool falling = false;
	// disable further interrupts while processing
	IRQ_disable(EXTI0_IRQ_NUMBER);
 8000258:	2006      	movs	r0, #6
 800025a:	f000 fa7b 	bl	8000754 <IRQ_disable>

	// Clear the pending interrupt from exti and nvic
	IRQ_exti_line_clear(UBUT_PIN);
 800025e:	2000      	movs	r0, #0
 8000260:	f000 fab8 	bl	80007d4 <IRQ_exti_line_clear>
	IRQ_clear(EXTI0_IRQ_NUMBER);
 8000264:	2006      	movs	r0, #6
 8000266:	f000 fa95 	bl	8000794 <IRQ_clear>

	// do work
	if (!falling){
 800026a:	4b13      	ldr	r3, [pc, #76]	@ (80002b8 <EXTI0_IRQHandler+0x64>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f083 0301 	eor.w	r3, r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d00b      	beq.n	8000290 <EXTI0_IRQHandler+0x3c>
		BUT_Init(FALLING_EDGE_INTERRUPT);
 8000278:	2001      	movs	r0, #1
 800027a:	f000 f829 	bl	80002d0 <BUT_Init>
		LED_StartTimer5();
 800027e:	f000 fb6f 	bl	8000960 <LED_StartTimer5>
		falling = true;
 8000282:	4b0d      	ldr	r3, [pc, #52]	@ (80002b8 <EXTI0_IRQHandler+0x64>)
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
		IRQ_enable(EXTI0_IRQ_NUMBER);
 8000288:	2006      	movs	r0, #6
 800028a:	f000 fa43 	bl	8000714 <IRQ_enable>
		toggleGreenLED();
		valSaved = true;
	}

	// dont reenable the irq if were done
}
 800028e:	e010      	b.n	80002b2 <EXTI0_IRQHandler+0x5e>
		LED_InitTimer5(true);
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fb41 	bl	8000918 <LED_InitTimer5>
		LED_SetTimer5AutoReloadValue(LED_GetTimer5CountValue());
 8000296:	f000 fb6d 	bl	8000974 <LED_GetTimer5CountValue>
 800029a:	4603      	mov	r3, r0
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fb73 	bl	8000988 <LED_SetTimer5AutoReloadValue>
		LED_StartTimer5WithStartValue(0);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 fb7e 	bl	80009a4 <LED_StartTimer5WithStartValue>
		toggleGreenLED();
 80002a8:	f000 f80a 	bl	80002c0 <toggleGreenLED>
		valSaved = true;
 80002ac:	4b03      	ldr	r3, [pc, #12]	@ (80002bc <EXTI0_IRQHandler+0x68>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	2000001d 	.word	0x2000001d
 80002bc:	2000001c 	.word	0x2000001c

080002c0 <toggleGreenLED>:
#endif

void toggleGreenLED(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	ToggleLED(GREEN_LED);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 fb0b 	bl	80008e0 <ToggleLED>
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <BUT_Init>:
 */

#include <Button_Driver.h>

// Init also sets the clock in this driver
void BUT_Init(uint8_t TriggerType) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	// This might be redundant
	GPIO_ClockControl(UBUT_PORT, ENABLE);
 80002da:	2101      	movs	r1, #1
 80002dc:	480a      	ldr	r0, [pc, #40]	@ (8000308 <BUT_Init+0x38>)
 80002de:	f000 f941 	bl	8000564 <GPIO_ClockControl>
	// Use the default values for our gpio (all zeros for our board so redundant)
	// It defaults to input. we could set it explicitly to input if we wanted, but for this to be a problem DEFAULT_PIN_CONFIG would have to change.
	GPIO_PinConfig_t temp = DEFAULT_PIN_CONFIG(UBUT_PIN); // dont worry this is valid for pin zero of port a just not some other pins
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	f8c3 2003 	str.w	r2, [r3, #3]

	temp.PinInteruptMode = TriggerType;
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	73bb      	strb	r3, [r7, #14]


	GPIO_Init(UBUT_PORT,temp);
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80002fa:	4803      	ldr	r0, [pc, #12]	@ (8000308 <BUT_Init+0x38>)
 80002fc:	f000 f890 	bl	8000420 <GPIO_Init>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40020000 	.word	0x40020000

0800030c <setFourBitReg>:
#define FOUR_BIT_REG_WIDTH 4
#define TWO_BIT_REG_WIDTH 2

// TODO make sure they start with GPIO_ or move them out
// Nevermind, asked Xavion and helper functions not in the header dont need to start with gpio
void setFourBitReg(volatile uint32_t (*reg)[2], uint8_t subPos, uint32_t bits){
 800030c:	b480      	push	{r7}
 800030e:	b087      	sub	sp, #28
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	460b      	mov	r3, r1
 8000316:	607a      	str	r2, [r7, #4]
 8000318:	72fb      	strb	r3, [r7, #11]
	uint32_t temp;
	temp = (bits << (FOUR_BIT_REG_WIDTH * subPos));
 800031a:	7afb      	ldrb	r3, [r7, #11]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	fa02 f303 	lsl.w	r3, r2, r3
 8000324:	617b      	str	r3, [r7, #20]

	// Move up by 4 bytes if we are over halfway through, thats what [(subPos > 7)] does

	// Clear the mode with two zeros in our pin related bits
	(*reg)[(subPos > 7)] &= ~(0b1111 << (FOUR_BIT_REG_WIDTH * subPos));
 8000326:	7afb      	ldrb	r3, [r7, #11]
 8000328:	2b07      	cmp	r3, #7
 800032a:	bf8c      	ite	hi
 800032c:	2301      	movhi	r3, #1
 800032e:	2300      	movls	r3, #0
 8000330:	b2db      	uxtb	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800033a:	7afa      	ldrb	r2, [r7, #11]
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	210f      	movs	r1, #15
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	43d2      	mvns	r2, r2
 8000346:	4610      	mov	r0, r2
 8000348:	7afa      	ldrb	r2, [r7, #11]
 800034a:	2a07      	cmp	r2, #7
 800034c:	bf8c      	ite	hi
 800034e:	2201      	movhi	r2, #1
 8000350:	2200      	movls	r2, #0
 8000352:	b2d2      	uxtb	r2, r2
 8000354:	4611      	mov	r1, r2
 8000356:	ea03 0200 	and.w	r2, r3, r0
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	// Set the mode from our args
	(*reg)[(subPos > 7)] |= temp;
 8000360:	7afb      	ldrb	r3, [r7, #11]
 8000362:	2b07      	cmp	r3, #7
 8000364:	bf8c      	ite	hi
 8000366:	2301      	movhi	r3, #1
 8000368:	2300      	movls	r3, #0
 800036a:	b2db      	uxtb	r3, r3
 800036c:	461a      	mov	r2, r3
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000374:	7afb      	ldrb	r3, [r7, #11]
 8000376:	2b07      	cmp	r3, #7
 8000378:	bf8c      	ite	hi
 800037a:	2301      	movhi	r3, #1
 800037c:	2300      	movls	r3, #0
 800037e:	b2db      	uxtb	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	431a      	orrs	r2, r3
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800038c:	bf00      	nop
 800038e:	371c      	adds	r7, #28
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr

08000396 <setTwoBitReg>:
void setTwoBitReg(volatile uint32_t * reg, uint8_t subPos, uint32_t bits){
 8000396:	b480      	push	{r7}
 8000398:	b087      	sub	sp, #28
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	460b      	mov	r3, r1
 80003a0:	607a      	str	r2, [r7, #4]
 80003a2:	72fb      	strb	r3, [r7, #11]
	uint32_t temp;
	temp = (bits << (TWO_BIT_REG_WIDTH * subPos));
 80003a4:	7afb      	ldrb	r3, [r7, #11]
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	617b      	str	r3, [r7, #20]

	// Clear the mode with two zeros in our pin related bits
	(*reg) &= ~(0b11 << (TWO_BIT_REG_WIDTH * subPos));
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	7afa      	ldrb	r2, [r7, #11]
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	2103      	movs	r1, #3
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	43d2      	mvns	r2, r2
 80003c0:	401a      	ands	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	601a      	str	r2, [r3, #0]

	// Set the mode from our args
	(*reg) |= temp;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	431a      	orrs	r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
}
 80003d2:	bf00      	nop
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <setOneBitReg>:
void setOneBitReg(volatile uint32_t * reg, uint8_t subPos, uint32_t bits){
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	460b      	mov	r3, r1
 80003e6:	607a      	str	r2, [r7, #4]
 80003e8:	72fb      	strb	r3, [r7, #11]
	uint32_t temp;
	temp = (bits << subPos);
 80003ea:	7afb      	ldrb	r3, [r7, #11]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	617b      	str	r3, [r7, #20]

	// Clear the mode with two zeros in our pin related bits
	(*reg) &= ~(0b1 << subPos);
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	7afa      	ldrb	r2, [r7, #11]
 80003fa:	2101      	movs	r1, #1
 80003fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000400:	43d2      	mvns	r2, r2
 8000402:	401a      	ands	r2, r3
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	601a      	str	r2, [r3, #0]

	// Set the mode from our args
	(*reg) |= temp;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	431a      	orrs	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	601a      	str	r2, [r3, #0]
}
 8000414:	bf00      	nop
 8000416:	371c      	adds	r7, #28
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
	...

08000420 <GPIO_Init>:

void GPIO_Init(GPIO_RegDef_t * port, GPIO_PinConfig_t config){
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	e883 0006 	stmia.w	r3, {r1, r2}
	static bool calledBefore;
	if (!calledBefore){
 800042e:	4b4b      	ldr	r3, [pc, #300]	@ (800055c <GPIO_Init+0x13c>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	f083 0301 	eor.w	r3, r3, #1
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b00      	cmp	r3, #0
 800043a:	d004      	beq.n	8000446 <GPIO_Init+0x26>
		IRQ_Init();
 800043c:	f000 f95c 	bl	80006f8 <IRQ_Init>
		calledBefore = true;
 8000440:	4b46      	ldr	r3, [pc, #280]	@ (800055c <GPIO_Init+0x13c>)
 8000442:	2201      	movs	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
	}

	setTwoBitReg(&(port->MODER), config.PinNumber, config.PinMode);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	7939      	ldrb	r1, [r7, #4]
 800044a:	797a      	ldrb	r2, [r7, #5]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ffa2 	bl	8000396 <setTwoBitReg>

	if (config.PinInteruptMode != NO_INTERRUPT && config.PinNumber <=15){
 8000452:	7abb      	ldrb	r3, [r7, #10]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d05d      	beq.n	8000514 <GPIO_Init+0xf4>
 8000458:	793b      	ldrb	r3, [r7, #4]
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d85a      	bhi.n	8000514 <GPIO_Init+0xf4>
		// Enable the IRQ
		IRQ_EXTI_pin_picker(0,0); // set exti port
 800045e:	2100      	movs	r1, #0
 8000460:	2000      	movs	r0, #0
 8000462:	f000 f90f 	bl	8000684 <IRQ_EXTI_pin_picker>
		IRQ_enable(EXTI0_IRQ_NUMBER);
 8000466:	2006      	movs	r0, #6
 8000468:	f000 f954 	bl	8000714 <IRQ_enable>

		// Set triggers
		bool falling = ((FALLING_EDGE_INTERRUPT == config.PinInteruptMode) | (FALLING_OR_RISING_EDGE_INTERRUPT == config.PinInteruptMode));
 800046c:	7abb      	ldrb	r3, [r7, #10]
 800046e:	2b01      	cmp	r3, #1
 8000470:	bf0c      	ite	eq
 8000472:	2301      	moveq	r3, #1
 8000474:	2300      	movne	r3, #0
 8000476:	b2da      	uxtb	r2, r3
 8000478:	7abb      	ldrb	r3, [r7, #10]
 800047a:	2b03      	cmp	r3, #3
 800047c:	bf0c      	ite	eq
 800047e:	2301      	moveq	r3, #1
 8000480:	2300      	movne	r3, #0
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4313      	orrs	r3, r2
 8000486:	b2db      	uxtb	r3, r3
 8000488:	75fb      	strb	r3, [r7, #23]
 800048a:	7dfb      	ldrb	r3, [r7, #23]
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	75fb      	strb	r3, [r7, #23]
		bool rising = ((RISING_EDGE_INTERRUPT == config.PinInteruptMode) | (FALLING_OR_RISING_EDGE_INTERRUPT == config.PinInteruptMode));
 8000492:	7abb      	ldrb	r3, [r7, #10]
 8000494:	2b02      	cmp	r3, #2
 8000496:	bf0c      	ite	eq
 8000498:	2301      	moveq	r3, #1
 800049a:	2300      	movne	r3, #0
 800049c:	b2da      	uxtb	r2, r3
 800049e:	7abb      	ldrb	r3, [r7, #10]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	bf0c      	ite	eq
 80004a4:	2301      	moveq	r3, #1
 80004a6:	2300      	movne	r3, #0
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4313      	orrs	r3, r2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	75bb      	strb	r3, [r7, #22]
 80004b0:	7dbb      	ldrb	r3, [r7, #22]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	75bb      	strb	r3, [r7, #22]
		EXTI->RTSR |= (rising << config.PinNumber); // on if on
 80004b8:	4b29      	ldr	r3, [pc, #164]	@ (8000560 <GPIO_Init+0x140>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	7dba      	ldrb	r2, [r7, #22]
 80004be:	7939      	ldrb	r1, [r7, #4]
 80004c0:	408a      	lsls	r2, r1
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a26      	ldr	r2, [pc, #152]	@ (8000560 <GPIO_Init+0x140>)
 80004c6:	430b      	orrs	r3, r1
 80004c8:	6093      	str	r3, [r2, #8]
		EXTI->RTSR &= (rising << config.PinNumber); // off if off
 80004ca:	4b25      	ldr	r3, [pc, #148]	@ (8000560 <GPIO_Init+0x140>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	7dba      	ldrb	r2, [r7, #22]
 80004d0:	7939      	ldrb	r1, [r7, #4]
 80004d2:	408a      	lsls	r2, r1
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a22      	ldr	r2, [pc, #136]	@ (8000560 <GPIO_Init+0x140>)
 80004d8:	400b      	ands	r3, r1
 80004da:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (falling << config.PinNumber);
 80004dc:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <GPIO_Init+0x140>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	7dfa      	ldrb	r2, [r7, #23]
 80004e2:	7939      	ldrb	r1, [r7, #4]
 80004e4:	408a      	lsls	r2, r1
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000560 <GPIO_Init+0x140>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR &= (falling << config.PinNumber);
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <GPIO_Init+0x140>)
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	7dfa      	ldrb	r2, [r7, #23]
 80004f4:	7939      	ldrb	r1, [r7, #4]
 80004f6:	408a      	lsls	r2, r1
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a19      	ldr	r2, [pc, #100]	@ (8000560 <GPIO_Init+0x140>)
 80004fc:	400b      	ands	r3, r1
 80004fe:	60d3      	str	r3, [r2, #12]

		// Unmask this pin/line
		EXTI->IMR |= (1 << config.PinMode);
 8000500:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <GPIO_Init+0x140>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	797a      	ldrb	r2, [r7, #5]
 8000506:	4611      	mov	r1, r2
 8000508:	2201      	movs	r2, #1
 800050a:	408a      	lsls	r2, r1
 800050c:	4611      	mov	r1, r2
 800050e:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <GPIO_Init+0x140>)
 8000510:	430b      	orrs	r3, r1
 8000512:	6013      	str	r3, [r2, #0]
	}

	setTwoBitReg(&(port->OSPEEDR), config.PinNumber, config.PinSpeed);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3308      	adds	r3, #8
 8000518:	7939      	ldrb	r1, [r7, #4]
 800051a:	79fa      	ldrb	r2, [r7, #7]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff3a 	bl	8000396 <setTwoBitReg>
	setTwoBitReg(&(port->PUPDR), config.PinNumber, config.PinPuPdControl);
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	330c      	adds	r3, #12
 8000526:	7939      	ldrb	r1, [r7, #4]
 8000528:	7a3a      	ldrb	r2, [r7, #8]
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff33 	bl	8000396 <setTwoBitReg>

	setOneBitReg(&(port->OTYPER), config.PinNumber, config.OPType);
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3304      	adds	r3, #4
 8000534:	7939      	ldrb	r1, [r7, #4]
 8000536:	79ba      	ldrb	r2, [r7, #6]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff4f 	bl	80003dc <setOneBitReg>

	if (port->MODER == 0b10) {
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d106      	bne.n	8000554 <GPIO_Init+0x134>
		setFourBitReg(&(port->AFRL), config.PinNumber, config.PinAltFunMode);
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3320      	adds	r3, #32
 800054a:	7939      	ldrb	r1, [r7, #4]
 800054c:	7a7a      	ldrb	r2, [r7, #9]
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fedc 	bl	800030c <setFourBitReg>
	}
}
 8000554:	bf00      	nop
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000001e 	.word	0x2000001e
 8000560:	40013c00 	.word	0x40013c00

08000564 <GPIO_ClockControl>:

void GPIO_ClockControl(GPIO_RegDef_t * port, uint8_t enableDisable) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]
	if (enableDisable == 1){ // Enable it
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d10e      	bne.n	8000594 <GPIO_ClockControl+0x30>
		RCC->AHB1EN |= (1 << GPIO_PortToIndex(port));
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f830 	bl	80005dc <GPIO_PortToIndex>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	2301      	movs	r3, #1
 8000582:	fa03 f202 	lsl.w	r2, r3, r2
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <GPIO_ClockControl+0x4c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4611      	mov	r1, r2
 800058c:	4a08      	ldr	r2, [pc, #32]	@ (80005b0 <GPIO_ClockControl+0x4c>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
	} else { // Disable it
		RCC->AHB1EN &= ((!1) << GPIO_PortToIndex(port));
	}
}
 8000592:	e009      	b.n	80005a8 <GPIO_ClockControl+0x44>
		RCC->AHB1EN &= ((!1) << GPIO_PortToIndex(port));
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f821 	bl	80005dc <GPIO_PortToIndex>
 800059a:	2200      	movs	r2, #0
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <GPIO_ClockControl+0x4c>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a03      	ldr	r2, [pc, #12]	@ (80005b0 <GPIO_ClockControl+0x4c>)
 80005a4:	400b      	ands	r3, r1
 80005a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40023800 	.word	0x40023800

080005b4 <GPIO_ReadFromInputPin>:

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t * port, uint8_t pinNumber) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	70fb      	strb	r3, [r7, #3]
	return ((port->IDR) >> pinNumber)&0b1;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	78fb      	ldrb	r3, [r7, #3]
 80005c6:	fa22 f303 	lsr.w	r3, r2, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	b2db      	uxtb	r3, r3
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <GPIO_PortToIndex>:

uint8_t GPIO_PortToIndex(GPIO_RegDef_t * port) {
 80005dc:	b480      	push	{r7}
 80005de:	b087      	sub	sp, #28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	uint32_t address = ((uint32_t) port);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	617b      	str	r3, [r7, #20]
	// TODO assert address not >GPIO_END_ADDR
	uint32_t offsetFromBase = address - GPIO_START_ADDR;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 80005ee:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 80005f2:	613b      	str	r3, [r7, #16]
	uint32_t portIndex = offsetFromBase/GPIO_SEPPARATION_BYTES;
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	0a9b      	lsrs	r3, r3, #10
 80005f8:	60fb      	str	r3, [r7, #12]
	return portIndex;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	b2db      	uxtb	r3, r3
}
 80005fe:	4618      	mov	r0, r3
 8000600:	371c      	adds	r7, #28
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <GPIO_WriteToOutputPin>:

void GPIO_WriteToOutputPin(GPIO_RegDef_t * port, uint8_t pinNumber, uint8_t value) {
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
 8000614:	4613      	mov	r3, r2
 8000616:	70bb      	strb	r3, [r7, #2]
	uint32_t mask = (1 << pinNumber);
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	2201      	movs	r2, #1
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	60fb      	str	r3, [r7, #12]
//	uint32_t nmask = ~mask;
	if (value == 0){
 8000622:	78bb      	ldrb	r3, [r7, #2]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d107      	bne.n	8000638 <GPIO_WriteToOutputPin+0x30>
		(port->ODR) &= ~mask;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	43db      	mvns	r3, r3
 8000630:	401a      	ands	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	615a      	str	r2, [r3, #20]
	} else {
		(port->ODR) |= mask;
	}
}
 8000636:	e005      	b.n	8000644 <GPIO_WriteToOutputPin+0x3c>
		(port->ODR) |= mask;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	431a      	orrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	615a      	str	r2, [r3, #20]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <GPIO_ToggleOutputPin>:

void GPIO_ToggleOutputPin(GPIO_RegDef_t * port, uint8_t pinNumber) {
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(port, pinNumber, GPIO_ReadFromInputPin(port, pinNumber) == 0);
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	4619      	mov	r1, r3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffa8 	bl	80005b4 <GPIO_ReadFromInputPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	bf0c      	ite	eq
 800066a:	2301      	moveq	r3, #1
 800066c:	2300      	movne	r3, #0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	4619      	mov	r1, r3
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ffc6 	bl	8000608 <GPIO_WriteToOutputPin>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <IRQ_EXTI_pin_picker>:
 */

#include <InterruptControl.h>

// ExtiNumber can be found with GPIO_PortToIndex function
void IRQ_EXTI_pin_picker(uint8_t ExtiNumber, uint8_t portNumber){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	uint32_t temp;
	temp = (portNumber << ((ExtiNumber * 4) % 16));
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	f003 030c 	and.w	r3, r3, #12
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	60fb      	str	r3, [r7, #12]

	// Integer division
	SYSCFG->EXTICR[ExtiNumber/4] &= ~(0b1111 << ((ExtiNumber * 4) % 16));
 80006a4:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <IRQ_EXTI_pin_picker+0x70>)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	b2d8      	uxtb	r0, r3
 80006ac:	4603      	mov	r3, r0
 80006ae:	3302      	adds	r3, #2
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	79fa      	ldrb	r2, [r7, #7]
 80006b6:	0092      	lsls	r2, r2, #2
 80006b8:	f002 020c 	and.w	r2, r2, #12
 80006bc:	210f      	movs	r1, #15
 80006be:	fa01 f202 	lsl.w	r2, r1, r2
 80006c2:	43d2      	mvns	r2, r2
 80006c4:	490b      	ldr	r1, [pc, #44]	@ (80006f4 <IRQ_EXTI_pin_picker+0x70>)
 80006c6:	401a      	ands	r2, r3
 80006c8:	1c83      	adds	r3, r0, #2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->EXTICR[ExtiNumber/4] |= temp;
 80006ce:	4a09      	ldr	r2, [pc, #36]	@ (80006f4 <IRQ_EXTI_pin_picker+0x70>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	b2d8      	uxtb	r0, r3
 80006d6:	4603      	mov	r3, r0
 80006d8:	3302      	adds	r3, #2
 80006da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006de:	4905      	ldr	r1, [pc, #20]	@ (80006f4 <IRQ_EXTI_pin_picker+0x70>)
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	431a      	orrs	r2, r3
 80006e4:	1c83      	adds	r3, r0, #2
 80006e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40013800 	.word	0x40013800

080006f8 <IRQ_Init>:

void IRQ_Init(){
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	EN_SYSCFG_CLK; // Enable Syscfg clock
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <IRQ_Init+0x18>)
 80006fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000700:	4a03      	ldr	r2, [pc, #12]	@ (8000710 <IRQ_Init+0x18>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	6353      	str	r3, [r2, #52]	@ 0x34
	// Dont need to enable exti through rcc
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40023800 	.word	0x40023800

08000714 <IRQ_enable>:

void IRQ_enable(uint8_t irqNum){
 8000714:	b490      	push	{r4, r7}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	(* NVIC_ISER0)[irqNum/32] |= (1 << (irqNum%32));
 800071e:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <IRQ_enable+0x3c>)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	b2d8      	uxtb	r0, r3
 8000726:	4603      	mov	r3, r0
 8000728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072c:	79fa      	ldrb	r2, [r7, #7]
 800072e:	f002 021f 	and.w	r2, r2, #31
 8000732:	2101      	movs	r1, #1
 8000734:	fa01 f202 	lsl.w	r2, r1, r2
 8000738:	4614      	mov	r4, r2
 800073a:	4a05      	ldr	r2, [pc, #20]	@ (8000750 <IRQ_enable+0x3c>)
 800073c:	4601      	mov	r1, r0
 800073e:	4323      	orrs	r3, r4
 8000740:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bc90      	pop	{r4, r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e100 	.word	0xe000e100

08000754 <IRQ_disable>:
void IRQ_disable(uint8_t irqNum){
 8000754:	b490      	push	{r4, r7}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	(* NVIC_ICER0)[irqNum/32] |= (1 << (irqNum%32));
 800075e:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <IRQ_disable+0x3c>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	b2d8      	uxtb	r0, r3
 8000766:	4603      	mov	r3, r0
 8000768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	f002 021f 	and.w	r2, r2, #31
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f202 	lsl.w	r2, r1, r2
 8000778:	4614      	mov	r4, r2
 800077a:	4a05      	ldr	r2, [pc, #20]	@ (8000790 <IRQ_disable+0x3c>)
 800077c:	4601      	mov	r1, r0
 800077e:	4323      	orrs	r3, r4
 8000780:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bc90      	pop	{r4, r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000e180 	.word	0xe000e180

08000794 <IRQ_clear>:
void IRQ_set(uint8_t irqNum){
	(* NVIC_ISPR0)[irqNum/32] |= (1 << (irqNum%32));
}
void IRQ_clear(uint8_t irqNum){
 8000794:	b490      	push	{r4, r7}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
	(* NVIC_ICPR0)[irqNum/32] |= (1 << (irqNum%32));
 800079e:	4a0c      	ldr	r2, [pc, #48]	@ (80007d0 <IRQ_clear+0x3c>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	095b      	lsrs	r3, r3, #5
 80007a4:	b2d8      	uxtb	r0, r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ac:	79fa      	ldrb	r2, [r7, #7]
 80007ae:	f002 021f 	and.w	r2, r2, #31
 80007b2:	2101      	movs	r1, #1
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	4614      	mov	r4, r2
 80007ba:	4a05      	ldr	r2, [pc, #20]	@ (80007d0 <IRQ_clear+0x3c>)
 80007bc:	4601      	mov	r1, r0
 80007be:	4323      	orrs	r3, r4
 80007c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc90      	pop	{r4, r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000e280 	.word	0xe000e280

080007d4 <IRQ_exti_line_clear>:

void IRQ_exti_line_clear(uint8_t lineNum) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	(EXTI->PR) |= (1 << lineNum);
 80007de:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <IRQ_exti_line_clear+0x28>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	79fa      	ldrb	r2, [r7, #7]
 80007e4:	2101      	movs	r1, #1
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a03      	ldr	r2, [pc, #12]	@ (80007fc <IRQ_exti_line_clear+0x28>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6153      	str	r3, [r2, #20]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40013c00 	.word	0x40013c00

08000800 <IRQ_tim_line_clear>:
void IRQ_tim_line_clear(uint8_t timNum){
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	if (timNum==2)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d107      	bne.n	8000820 <IRQ_tim_line_clear+0x20>
		TIM2->SR &= ~1;
 8000810:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800081a:	f023 0301 	bic.w	r3, r3, #1
 800081e:	6113      	str	r3, [r2, #16]
	if (timNum==5)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b05      	cmp	r3, #5
 8000824:	d105      	bne.n	8000832 <IRQ_tim_line_clear+0x32>
		TIM5->SR &= ~1;
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <IRQ_tim_line_clear+0x3c>)
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	4a04      	ldr	r2, [pc, #16]	@ (800083c <IRQ_tim_line_clear+0x3c>)
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	6113      	str	r3, [r2, #16]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40000c00 	.word	0x40000c00

08000840 <LED_Init>:

// Specific to lab 4
#define BLINK_TIME_SEC 5

// Generic
void LED_Init(uint8_t ledNum) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	// This might be redundant
	GPIO_ClockControl(LED_PORT, ENABLE);
 800084a:	2101      	movs	r1, #1
 800084c:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <LED_Init+0x60>)
 800084e:	f7ff fe89 	bl	8000564 <GPIO_ClockControl>

	uint8_t pinNumber;
	switch (ledNum) {
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d004      	beq.n	8000862 <LED_Init+0x22>
 8000858:	2b01      	cmp	r3, #1
 800085a:	d105      	bne.n	8000868 <LED_Init+0x28>
		case GREEN_LED:
			pinNumber = GREEN_LED_PIN;
 800085c:	230d      	movs	r3, #13
 800085e:	73fb      	strb	r3, [r7, #15]
			break;
 8000860:	e003      	b.n	800086a <LED_Init+0x2a>
		case RED_LED:
			pinNumber = RED_LED_PIN;
 8000862:	230e      	movs	r3, #14
 8000864:	73fb      	strb	r3, [r7, #15]
			break;
 8000866:	e000      	b.n	800086a <LED_Init+0x2a>
		default:
			break;
 8000868:	bf00      	nop
	}

	// Use the default values for our gpio (all zeros for our board so redundant)
	GPIO_PinConfig_t temp = DEFAULT_PIN_CONFIG(pinNumber);
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	723b      	strb	r3, [r7, #8]
 800086e:	2300      	movs	r3, #0
 8000870:	727b      	strb	r3, [r7, #9]
 8000872:	2300      	movs	r3, #0
 8000874:	72bb      	strb	r3, [r7, #10]
 8000876:	2300      	movs	r3, #0
 8000878:	72fb      	strb	r3, [r7, #11]
 800087a:	2300      	movs	r3, #0
 800087c:	733b      	strb	r3, [r7, #12]
 800087e:	2300      	movs	r3, #0
 8000880:	737b      	strb	r3, [r7, #13]
 8000882:	2300      	movs	r3, #0
 8000884:	73bb      	strb	r3, [r7, #14]
	temp.PinMode = OUTPUT;
 8000886:	2301      	movs	r3, #1
 8000888:	727b      	strb	r3, [r7, #9]

	GPIO_Init(GPIOG, temp);
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000892:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <LED_Init+0x60>)
 8000894:	f7ff fdc4 	bl	8000420 <GPIO_Init>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021800 	.word	0x40021800

080008a4 <TurnOffLED>:

void TurnOffLED(uint8_t ledNum) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	uint8_t pinNumber;
	switch (ledNum) {
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d004      	beq.n	80008be <TurnOffLED+0x1a>
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d105      	bne.n	80008c4 <TurnOffLED+0x20>
		case GREEN_LED:
			pinNumber = GREEN_LED_PIN;
 80008b8:	230d      	movs	r3, #13
 80008ba:	73fb      	strb	r3, [r7, #15]
			break;
 80008bc:	e003      	b.n	80008c6 <TurnOffLED+0x22>
		case RED_LED:
			pinNumber = RED_LED_PIN;
 80008be:	230e      	movs	r3, #14
 80008c0:	73fb      	strb	r3, [r7, #15]
			break;
 80008c2:	e000      	b.n	80008c6 <TurnOffLED+0x22>
		default:
			break;
 80008c4:	bf00      	nop
	}
	GPIO_WriteToOutputPin(GPIOG, pinNumber, 0);
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	2200      	movs	r2, #0
 80008ca:	4619      	mov	r1, r3
 80008cc:	4803      	ldr	r0, [pc, #12]	@ (80008dc <TurnOffLED+0x38>)
 80008ce:	f7ff fe9b 	bl	8000608 <GPIO_WriteToOutputPin>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021800 	.word	0x40021800

080008e0 <ToggleLED>:
			break;
	}
	GPIO_WriteToOutputPin(GPIOG, pinNumber, 1);
}

void ToggleLED(uint8_t ledNum) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t pinNumber;
	switch (ledNum) {
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d004      	beq.n	80008fa <ToggleLED+0x1a>
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d105      	bne.n	8000900 <ToggleLED+0x20>
		case GREEN_LED:
			pinNumber = GREEN_LED_PIN;
 80008f4:	230d      	movs	r3, #13
 80008f6:	73fb      	strb	r3, [r7, #15]
			break;
 80008f8:	e003      	b.n	8000902 <ToggleLED+0x22>
		case RED_LED:
			pinNumber = RED_LED_PIN;
 80008fa:	230e      	movs	r3, #14
 80008fc:	73fb      	strb	r3, [r7, #15]
			break;
 80008fe:	e000      	b.n	8000902 <ToggleLED+0x22>
		default:
			break;
 8000900:	bf00      	nop
	}
	GPIO_ToggleOutputPin(GPIOG, pinNumber);
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	4619      	mov	r1, r3
 8000906:	4803      	ldr	r0, [pc, #12]	@ (8000914 <ToggleLED+0x34>)
 8000908:	f7ff fea1 	bl	800064e <GPIO_ToggleOutputPin>
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021800 	.word	0x40021800

08000918 <LED_InitTimer5>:
	config.Auto_Reload_Value = CLOCK_BASE_FREQ * BLINK_TIME_SEC;
	config.Interrupt_update_enablement = true;

	TimerInit(TIM2,config);
}
void LED_InitTimer5(bool callback) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af02      	add	r7, sp, #8
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	TimerEnableDisable(TIM5, true);
 8000922:	2101      	movs	r1, #1
 8000924:	480d      	ldr	r0, [pc, #52]	@ (800095c <LED_InitTimer5+0x44>)
 8000926:	f000 f9c3 	bl	8000cb0 <TimerEnableDisable>

	GPTimer_Config_t config = DEFAULT_TIM_CONFIG();
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	60bb      	str	r3, [r7, #8]
	config.Interrupt_update_enablement = callback;
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	74bb      	strb	r3, [r7, #18]

	TimerInit(TIM5, config);
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800094c:	4803      	ldr	r0, [pc, #12]	@ (800095c <LED_InitTimer5+0x44>)
 800094e:	f000 f83d 	bl	80009cc <TimerInit>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40000c00 	.word	0x40000c00

08000960 <LED_StartTimer5>:
}
void LED_ResetTimer2(){
	TimerReset(TIM2);
}

void LED_StartTimer5(){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	TimerStart(TIM5);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <LED_StartTimer5+0x10>)
 8000966:	f000 f9d5 	bl	8000d14 <TimerStart>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40000c00 	.word	0x40000c00

08000974 <LED_GetTimer5CountValue>:
	TimerReset(TIM5);
}
uint32_t LED_GetTimer5AutoReloadValue(){
	return TimerReadARR(TIM5);
}
uint32_t LED_GetTimer5CountValue(){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	return TimerReadCurent(TIM5);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <LED_GetTimer5CountValue+0x10>)
 800097a:	f000 f9da 	bl	8000d32 <TimerReadCurent>
 800097e:	4603      	mov	r3, r0
}
 8000980:	4618      	mov	r0, r3
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40000c00 	.word	0x40000c00

08000988 <LED_SetTimer5AutoReloadValue>:
void LED_SetTimer5AutoReloadValue(uint32_t new_value){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	TimerWriteARR(TIM5,new_value);
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	4803      	ldr	r0, [pc, #12]	@ (80009a0 <LED_SetTimer5AutoReloadValue+0x18>)
 8000994:	f000 f9e5 	bl	8000d62 <TimerWriteARR>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40000c00 	.word	0x40000c00

080009a4 <LED_StartTimer5WithStartValue>:
void LED_StartTimer5WithStartValue(uint32_t start_value){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	TimerWriteCurrent(TIM5,start_value);
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <LED_StartTimer5WithStartValue+0x1c>)
 80009b0:	f000 f9ca 	bl	8000d48 <TimerWriteCurrent>
	LED_StartTimer5();
 80009b4:	f7ff ffd4 	bl	8000960 <LED_StartTimer5>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40000c00 	.word	0x40000c00

080009c4 <HANG>:
 *      Author: user
 */

#include <STM32F429i.h>

uint32_t HANG() {
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	while(1);
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <HANG+0x4>

080009cc <TimerInit>:
 *      Author: user
 */

#include <Timer_Driver.h>

void TimerInit(GPTIMR_RegDef_t * tim, GPTimer_Config_t config){
 80009cc:	b084      	sub	sp, #16
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	f107 0014 	add.w	r0, r7, #20
 80009da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	if (!calledBefore){
//		TimerEnableDisable(tim,true);
//		calledBefore = true;
//	}

	setBit(tim->CR[0], config.Clock_Division_Selection, CKD_BIT_OFFSET)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	7e7a      	ldrb	r2, [r7, #25]
 80009e4:	0212      	lsls	r2, r2, #8
 80009e6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80009ea:	43d2      	mvns	r2, r2
 80009ec:	401a      	ands	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	7e7b      	ldrb	r3, [r7, #25]
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	601a      	str	r2, [r3, #0]
	setBit(tim->CR[0], (config.Clock_Division_Selection>>1), (CKD_BIT_OFFSET+1))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	7e7a      	ldrb	r2, [r7, #25]
 8000a0a:	0852      	lsrs	r2, r2, #1
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	0252      	lsls	r2, r2, #9
 8000a10:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000a14:	43d2      	mvns	r2, r2
 8000a16:	401a      	ands	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	7e7b      	ldrb	r3, [r7, #25]
 8000a22:	085b      	lsrs	r3, r3, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	025b      	lsls	r3, r3, #9
 8000a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]

	switch (config.Counting_Mode) {
 8000a32:	7f3b      	ldrb	r3, [r7, #28]
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	f200 8086 	bhi.w	8000b46 <TimerInit+0x17a>
 8000a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a40 <TimerInit+0x74>)
 8000a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a40:	08000a55 	.word	0x08000a55
 8000a44:	08000a87 	.word	0x08000a87
 8000a48:	08000ac1 	.word	0x08000ac1
 8000a4c:	08000aeb 	.word	0x08000aeb
 8000a50:	08000b15 	.word	0x08000b15
		case TIM_CMODE_UPCOUNT:
			setBit(tim->CR[0], 0, DIR_BIT_OFFSET)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	601a      	str	r2, [r3, #0]
			setBit(tim->CR[0], 0, CMS_BIT_OFFSET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	601a      	str	r2, [r3, #0]
			setBit(tim->CR[0], 0, (CMS_BIT_OFFSET+1))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	601a      	str	r2, [r3, #0]
			break;
 8000a84:	e05f      	b.n	8000b46 <TimerInit+0x17a>
		case TIM_CMODE_DOWNCOUNT:
			setBit(tim->CR[0], 1, DIR_BIT_OFFSET)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f023 0210 	bic.w	r2, r3, #16
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f043 0210 	orr.w	r2, r3, #16
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]
			setBit(tim->CR[0], 0, CMS_BIT_OFFSET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	601a      	str	r2, [r3, #0]
			setBit(tim->CR[0], 0, (CMS_BIT_OFFSET+1))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]
			break;
 8000abe:	e042      	b.n	8000b46 <TimerInit+0x17a>
		case TIM_CMODE_CENTERALDOWN:
			setBit(tim->CR[0], 0, (CMS_BIT_OFFSET+1))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	601a      	str	r2, [r3, #0]
			setBit(tim->CR[0], 1, CMS_BIT_OFFSET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 0220 	bic.w	r2, r3, #32
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f043 0220 	orr.w	r2, r3, #32
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]
			break;
 8000ae8:	e02d      	b.n	8000b46 <TimerInit+0x17a>
		case TIM_CMODE_CENTERALUP:
			setBit(tim->CR[0], 1, (CMS_BIT_OFFSET+1))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
			setBit(tim->CR[0], 0, CMS_BIT_OFFSET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
			break;
 8000b12:	e018      	b.n	8000b46 <TimerInit+0x17a>
		case TIM_CMODE_CENTERALBOTH:
			setBit(tim->CR[0], 1, (CMS_BIT_OFFSET+1))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	601a      	str	r2, [r3, #0]
			setBit(tim->CR[0], 1, CMS_BIT_OFFSET)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 0220 	bic.w	r2, r3, #32
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f043 0220 	orr.w	r2, r3, #32
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]
			break;
 8000b44:	bf00      	nop
	}

	setBit(tim->CR[0], config.Auto_reload_buffer_enablement, ARPE_BIT_OFFSET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	7f7a      	ldrb	r2, [r7, #29]
 8000b4c:	01d2      	lsls	r2, r2, #7
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	43d2      	mvns	r2, r2
 8000b52:	401a      	ands	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	7f7b      	ldrb	r3, [r7, #29]
 8000b5e:	01db      	lsls	r3, r3, #7
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	601a      	str	r2, [r3, #0]

	setBit(tim->CR[0], config.One_pulse_mode_enablement, OPM_BIT_OFFSET)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b70:	00d2      	lsls	r2, r2, #3
 8000b72:	f002 0208 	and.w	r2, r2, #8
 8000b76:	43d2      	mvns	r2, r2
 8000b78:	401a      	ands	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]

	setBit(tim->CR[0], config.Disable_update_event, UDIS_BIT_OFFSET)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	7ffa      	ldrb	r2, [r7, #31]
 8000b98:	0052      	lsls	r2, r2, #1
 8000b9a:	f002 0202 	and.w	r2, r2, #2
 8000b9e:	43d2      	mvns	r2, r2
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	7ffb      	ldrb	r3, [r7, #31]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	601a      	str	r2, [r3, #0]

	// next cr2

	setBit(tim->CR[1], (config.Master_Mode_Selection >> 0), (MMS_BIT_OFFSET + 0))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	7e3a      	ldrb	r2, [r7, #24]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	f002 0210 	and.w	r2, r2, #16
 8000bc4:	43d2      	mvns	r2, r2
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	7e3b      	ldrb	r3, [r7, #24]
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	605a      	str	r2, [r3, #4]
	setBit(tim->CR[1], (config.Master_Mode_Selection >> 1), (MMS_BIT_OFFSET + 1))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	7e3a      	ldrb	r2, [r7, #24]
 8000be4:	0852      	lsrs	r2, r2, #1
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	0152      	lsls	r2, r2, #5
 8000bea:	f002 0220 	and.w	r2, r2, #32
 8000bee:	43d2      	mvns	r2, r2
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	7e3b      	ldrb	r3, [r7, #24]
 8000bfc:	085b      	lsrs	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	015b      	lsls	r3, r3, #5
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	605a      	str	r2, [r3, #4]
	setBit(tim->CR[1], (config.Master_Mode_Selection >> 2), (MMS_BIT_OFFSET + 2))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	7e3a      	ldrb	r2, [r7, #24]
 8000c12:	0892      	lsrs	r2, r2, #2
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	0192      	lsls	r2, r2, #6
 8000c18:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000c1c:	43d2      	mvns	r2, r2
 8000c1e:	401a      	ands	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	7e3b      	ldrb	r3, [r7, #24]
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	019b      	lsls	r3, r3, #6
 8000c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	605a      	str	r2, [r3, #4]

	tim->PSC = config.Prescaler_Value;
 8000c3a:	8b7b      	ldrh	r3, [r7, #26]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28

	tim->ARR = config.Auto_Reload_Value; // might only work on tim2&5
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	62da      	str	r2, [r3, #44]	@ 0x2c

	TimerInterruptEnableDisable(tim,config.Interrupt_update_enablement);
 8000c48:	7fbb      	ldrb	r3, [r7, #30]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f813 	bl	8000c78 <TimerInterruptEnableDisable>
	tim->DIER |= config.Interrupt_update_enablement;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	7fba      	ldrb	r2, [r7, #30]
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60da      	str	r2, [r3, #12]
	tim->DIER &= config.Interrupt_update_enablement;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	7fba      	ldrb	r2, [r7, #30]
 8000c64:	401a      	ands	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60da      	str	r2, [r3, #12]
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <TimerInterruptEnableDisable>:

void TimerInterruptEnableDisable(GPTIMR_RegDef_t * tim, bool enable){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	if (tim==TIM2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c8a:	d103      	bne.n	8000c94 <TimerInterruptEnableDisable+0x1c>
		IRQ_enable(TIM2_IRQ_NUMBER);
 8000c8c:	201c      	movs	r0, #28
 8000c8e:	f7ff fd41 	bl	8000714 <IRQ_enable>
	else if (tim==TIM5)
		IRQ_enable(TIM5_IRQ_NUMBER);
}
 8000c92:	e006      	b.n	8000ca2 <TimerInterruptEnableDisable+0x2a>
	else if (tim==TIM5)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <TimerInterruptEnableDisable+0x34>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d102      	bne.n	8000ca2 <TimerInterruptEnableDisable+0x2a>
		IRQ_enable(TIM5_IRQ_NUMBER);
 8000c9c:	2032      	movs	r0, #50	@ 0x32
 8000c9e:	f7ff fd39 	bl	8000714 <IRQ_enable>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40000c00 	.word	0x40000c00

08000cb0 <TimerEnableDisable>:

void TimerEnableDisable(GPTIMR_RegDef_t * tim, bool enable){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
	uint8_t timNum;
	if (tim == TIM2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cc2:	d102      	bne.n	8000cca <TimerEnableDisable+0x1a>
		timNum=2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e008      	b.n	8000cdc <TimerEnableDisable+0x2c>
	else if (tim == TIM5)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d0c <TimerEnableDisable+0x5c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d102      	bne.n	8000cd8 <TimerEnableDisable+0x28>
		timNum=5;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e001      	b.n	8000cdc <TimerEnableDisable+0x2c>
	else
		HANG();
 8000cd8:	f7ff fe74 	bl	80009c4 <HANG>

	if (enable){ // Enable it
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00b      	beq.n	8000cfa <TimerEnableDisable+0x4a>
		RCC->APB1EN |= (1 << (timNum-2));
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <TimerEnableDisable+0x60>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	3a02      	subs	r2, #2
 8000cea:	2101      	movs	r1, #1
 8000cec:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <TimerEnableDisable+0x60>)
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6413      	str	r3, [r2, #64]	@ 0x40
	} else { // Disable it
		RCC->APB1EN &= ((!1) << (timNum-2));
	}
}
 8000cf8:	e004      	b.n	8000d04 <TimerEnableDisable+0x54>
		RCC->APB1EN &= ((!1) << (timNum-2));
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <TimerEnableDisable+0x60>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <TimerEnableDisable+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40000c00 	.word	0x40000c00
 8000d10:	40023800 	.word	0x40023800

08000d14 <TimerStart>:

void TimerStart(GPTIMR_RegDef_t * tim){
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	tim->CR[0] |= 1;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f043 0201 	orr.w	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <TimerReadCurent>:

void TimerReset(GPTIMR_RegDef_t * tim){
	tim->CNT = 0;
}

uint32_t TimerReadCurent(GPTIMR_RegDef_t * tim){
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	return tim->CNT;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <TimerWriteCurrent>:

uint32_t TimerReadARR(GPTIMR_RegDef_t * tim){
	return tim->ARR; // might not be set yet or somehow over written elsewhere
}

void TimerWriteCurrent(GPTIMR_RegDef_t * tim, uint32_t val){
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
	tim->CNT = val;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <TimerWriteARR>:

void TimerWriteARR(GPTIMR_RegDef_t * tim, uint32_t val){
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	tim->ARR = val;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	applicationInit();
 8000d80:	f7ff fa34 	bl	80001ec <applicationInit>
//	uint32_t eventsToRun;
    /* Loop forever */
	for(;;) {
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <main+0x8>

08000d88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000db6:	f000 f811 	bl	8000ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dba:	f7ff ffdf 	bl	8000d7c <main>

08000dbe <LoopForever>:

LoopForever:
  b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   r0, =_estack
 8000dc0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000dcc:	08000e44 	.word	0x08000e44
  ldr r2, =_sbss
 8000dd0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000dd4:	20000020 	.word	0x20000020

08000dd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <__libc_init_array>:
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	4d0d      	ldr	r5, [pc, #52]	@ (8000e14 <__libc_init_array+0x38>)
 8000de0:	4c0d      	ldr	r4, [pc, #52]	@ (8000e18 <__libc_init_array+0x3c>)
 8000de2:	1b64      	subs	r4, r4, r5
 8000de4:	10a4      	asrs	r4, r4, #2
 8000de6:	2600      	movs	r6, #0
 8000de8:	42a6      	cmp	r6, r4
 8000dea:	d109      	bne.n	8000e00 <__libc_init_array+0x24>
 8000dec:	4d0b      	ldr	r5, [pc, #44]	@ (8000e1c <__libc_init_array+0x40>)
 8000dee:	4c0c      	ldr	r4, [pc, #48]	@ (8000e20 <__libc_init_array+0x44>)
 8000df0:	f000 f818 	bl	8000e24 <_init>
 8000df4:	1b64      	subs	r4, r4, r5
 8000df6:	10a4      	asrs	r4, r4, #2
 8000df8:	2600      	movs	r6, #0
 8000dfa:	42a6      	cmp	r6, r4
 8000dfc:	d105      	bne.n	8000e0a <__libc_init_array+0x2e>
 8000dfe:	bd70      	pop	{r4, r5, r6, pc}
 8000e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e04:	4798      	blx	r3
 8000e06:	3601      	adds	r6, #1
 8000e08:	e7ee      	b.n	8000de8 <__libc_init_array+0xc>
 8000e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e0e:	4798      	blx	r3
 8000e10:	3601      	adds	r6, #1
 8000e12:	e7f2      	b.n	8000dfa <__libc_init_array+0x1e>
 8000e14:	08000e3c 	.word	0x08000e3c
 8000e18:	08000e3c 	.word	0x08000e3c
 8000e1c:	08000e3c 	.word	0x08000e3c
 8000e20:	08000e40 	.word	0x08000e40

08000e24 <_init>:
 8000e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e26:	bf00      	nop
 8000e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e2a:	bc08      	pop	{r3}
 8000e2c:	469e      	mov	lr, r3
 8000e2e:	4770      	bx	lr

08000e30 <_fini>:
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	bf00      	nop
 8000e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e36:	bc08      	pop	{r3}
 8000e38:	469e      	mov	lr, r3
 8000e3a:	4770      	bx	lr
