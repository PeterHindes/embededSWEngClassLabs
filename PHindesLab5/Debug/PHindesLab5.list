
PHindesLab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c14  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003dc4  08003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e34  08003e34  00005074  2**0
                  CONTENTS
  4 .ARM          00000008  08003e34  08003e34  00004e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e3c  08003e3c  00005074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e3c  08003e3c  00004e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e40  08003e40  00004e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08003e44  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005074  2**0
                  CONTENTS
 10 .bss          00000278  20000074  20000074  00005074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  00005074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f3a  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001454  00000000  00000000  0000afde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  0000c438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004cf  00000000  00000000  0000cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000036e5  00000000  00000000  0000cf97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007eb1  00000000  00000000  0001067c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1eb2  00000000  00000000  0001852d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ea3df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023e0  00000000  00000000  000ea424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000ec804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003dac 	.word	0x08003dac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08003dac 	.word	0x08003dac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <applicationInit>:
}
void redLEDInit(){
	// TODO
}

void applicationInit(){
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	// TODO
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <getScheduledEvents>:

void removeSchedulerEvent(uint32_t event) {
	scheduledEvents &= ~event;
}

uint32_t getScheduledEvents() {
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	return scheduledEvents;
 80005a4:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <getScheduledEvents+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000090 	.word	0x20000090

080005b8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t TX_BUFFER [] = {0b0001111, 0b00000000};
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	printf("INT");
 80005c2:	4816      	ldr	r0, [pc, #88]	@ (800061c <HAL_GPIO_EXTI_Callback+0x64>)
 80005c4:	f002 fd84 	bl	80030d0 <iprintf>
	if(GPIO_Pin == GPIO_PIN_0) {
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d120      	bne.n	8000610 <HAL_GPIO_EXTI_Callback+0x58>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d4:	4812      	ldr	r0, [pc, #72]	@ (8000620 <HAL_GPIO_EXTI_Callback+0x68>)
 80005d6:	f000 ffbb 	bl	8001550 <HAL_GPIO_WritePin>


		printf("Transmiting");
 80005da:	4812      	ldr	r0, [pc, #72]	@ (8000624 <HAL_GPIO_EXTI_Callback+0x6c>)
 80005dc:	f002 fd78 	bl	80030d0 <iprintf>
		uint8_t RX_BUFFER [1];
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2102      	movs	r1, #2
 80005e4:	4810      	ldr	r0, [pc, #64]	@ (8000628 <HAL_GPIO_EXTI_Callback+0x70>)
 80005e6:	f000 ffb3 	bl	8001550 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi5, TX_BUFFER, 2, 1000);
 80005ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ee:	2202      	movs	r2, #2
 80005f0:	490e      	ldr	r1, [pc, #56]	@ (800062c <HAL_GPIO_EXTI_Callback+0x74>)
 80005f2:	480f      	ldr	r0, [pc, #60]	@ (8000630 <HAL_GPIO_EXTI_Callback+0x78>)
 80005f4:	f001 fccb 	bl	8001f8e <HAL_SPI_Transmit>
		HAL_Delay(100);
 80005f8:	2064      	movs	r0, #100	@ 0x64
 80005fa:	f000 fcc7 	bl	8000f8c <HAL_Delay>
		HAL_SPI_Receive(&hspi5, RX_BUFFER, 1, 1000);
 80005fe:	f107 010c 	add.w	r1, r7, #12
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	2201      	movs	r2, #1
 8000608:	4809      	ldr	r0, [pc, #36]	@ (8000630 <HAL_GPIO_EXTI_Callback+0x78>)
 800060a:	f001 fe04 	bl	8002216 <HAL_SPI_Receive>
//
//		printf("%x", * RX_BUFFER);
	} else {
	  __NOP();
	}
}
 800060e:	e000      	b.n	8000612 <HAL_GPIO_EXTI_Callback+0x5a>
	  __NOP();
 8000610:	bf00      	nop
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	08003dc4 	.word	0x08003dc4
 8000620:	40021800 	.word	0x40021800
 8000624:	08003dc8 	.word	0x08003dc8
 8000628:	40020800 	.word	0x40020800
 800062c:	20000000 	.word	0x20000000
 8000630:	20000094 	.word	0x20000094

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 800063a:	f002 fc09 	bl	8002e50 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fc33 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f80b 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000646:	f000 f8a1 	bl	800078c <MX_GPIO_Init>
	MX_SPI5_Init();
 800064a:	f000 f869 	bl	8000720 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
	applicationInit();
 800064e:	f7ff ff9f 	bl	8000590 <applicationInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		eventsToRun = getScheduledEvents();
 8000652:	f7ff ffa5 	bl	80005a0 <getScheduledEvents>
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	e7fb      	b.n	8000652 <main+0x1e>
	...

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fd85 	bl	800317a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <SystemClock_Config+0xbc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a23      	ldr	r2, [pc, #140]	@ (8000718 <SystemClock_Config+0xbc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <SystemClock_Config+0xbc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <SystemClock_Config+0xc0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a8:	4a1c      	ldr	r2, [pc, #112]	@ (800071c <SystemClock_Config+0xc0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <SystemClock_Config+0xc0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 ff6f 	bl	80015b4 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006dc:	f000 fac6 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006ec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f9d0 	bl	8001aa4 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800070a:	f000 faaf 	bl	8000c6c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_SPI5_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	@ (8000788 <MX_SPI5_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_SPI5_Init+0x64>)
 800072c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_SPI5_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_SPI5_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_SPI5_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_SPI5_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_SPI5_Init+0x64>)
 800074c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000750:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_SPI5_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_SPI5_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_SPI5_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_SPI5_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_SPI5_Init+0x64>)
 800076c:	220a      	movs	r2, #10
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_SPI5_Init+0x64>)
 8000772:	f001 fb83 	bl	8001e7c <HAL_SPI_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 fa76 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000094 	.word	0x20000094
 8000788:	40015000 	.word	0x40015000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08e      	sub	sp, #56	@ 0x38
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
 80007a6:	4bb2      	ldr	r3, [pc, #712]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4ab1      	ldr	r2, [pc, #708]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4baf      	ldr	r3, [pc, #700]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	623b      	str	r3, [r7, #32]
 80007bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	4bab      	ldr	r3, [pc, #684]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4aaa      	ldr	r2, [pc, #680]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007c8:	f043 0320 	orr.w	r3, r3, #32
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4ba8      	ldr	r3, [pc, #672]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0320 	and.w	r3, r3, #32
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4ba4      	ldr	r3, [pc, #656]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4aa3      	ldr	r2, [pc, #652]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4ba1      	ldr	r3, [pc, #644]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b9d      	ldr	r3, [pc, #628]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a9c      	ldr	r2, [pc, #624]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b9a      	ldr	r3, [pc, #616]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b96      	ldr	r3, [pc, #600]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a95      	ldr	r2, [pc, #596]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b93      	ldr	r3, [pc, #588]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b8f      	ldr	r3, [pc, #572]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a8e      	ldr	r2, [pc, #568]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b8c      	ldr	r3, [pc, #560]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b88      	ldr	r3, [pc, #544]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a87      	ldr	r2, [pc, #540]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b85      	ldr	r3, [pc, #532]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b81      	ldr	r3, [pc, #516]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a80      	ldr	r2, [pc, #512]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b7e      	ldr	r3, [pc, #504]	@ (8000a70 <MX_GPIO_Init+0x2e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2116      	movs	r1, #22
 8000886:	487b      	ldr	r0, [pc, #492]	@ (8000a74 <MX_GPIO_Init+0x2e8>)
 8000888:	f000 fe62 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2180      	movs	r1, #128	@ 0x80
 8000890:	4879      	ldr	r0, [pc, #484]	@ (8000a78 <MX_GPIO_Init+0x2ec>)
 8000892:	f000 fe5d 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800089c:	4877      	ldr	r0, [pc, #476]	@ (8000a7c <MX_GPIO_Init+0x2f0>)
 800089e:	f000 fe57 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80008a8:	4875      	ldr	r0, [pc, #468]	@ (8000a80 <MX_GPIO_Init+0x2f4>)
 80008aa:	f000 fe51 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008ae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008c0:	230c      	movs	r3, #12
 80008c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	486e      	ldr	r0, [pc, #440]	@ (8000a84 <MX_GPIO_Init+0x2f8>)
 80008cc:	f000 fc94 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80008d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008e2:	230e      	movs	r3, #14
 80008e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4865      	ldr	r0, [pc, #404]	@ (8000a84 <MX_GPIO_Init+0x2f8>)
 80008ee:	f000 fc83 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80008f2:	2301      	movs	r3, #1
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000902:	230c      	movs	r3, #12
 8000904:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	4859      	ldr	r0, [pc, #356]	@ (8000a74 <MX_GPIO_Init+0x2e8>)
 800090e:	f000 fc73 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000912:	2316      	movs	r3, #22
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	4852      	ldr	r0, [pc, #328]	@ (8000a74 <MX_GPIO_Init+0x2e8>)
 800092a:	f000 fc65 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092e:	2301      	movs	r3, #1
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000932:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	484d      	ldr	r0, [pc, #308]	@ (8000a78 <MX_GPIO_Init+0x2ec>)
 8000944:	f000 fc58 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000948:	f248 0306 	movw	r3, #32774	@ 0x8006
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4846      	ldr	r0, [pc, #280]	@ (8000a78 <MX_GPIO_Init+0x2ec>)
 8000960:	f000 fc4a 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000964:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000976:	230e      	movs	r3, #14
 8000978:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	483d      	ldr	r0, [pc, #244]	@ (8000a78 <MX_GPIO_Init+0x2ec>)
 8000982:	f000 fc39 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000986:	2380      	movs	r3, #128	@ 0x80
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4836      	ldr	r0, [pc, #216]	@ (8000a78 <MX_GPIO_Init+0x2ec>)
 800099e:	f000 fc2b 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009a2:	2320      	movs	r3, #32
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	482f      	ldr	r0, [pc, #188]	@ (8000a74 <MX_GPIO_Init+0x2e8>)
 80009b8:	f000 fc1e 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009bc:	2303      	movs	r3, #3
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009cc:	2309      	movs	r3, #9
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	482c      	ldr	r0, [pc, #176]	@ (8000a88 <MX_GPIO_Init+0x2fc>)
 80009d8:	f000 fc0e 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009dc:	2304      	movs	r3, #4
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4826      	ldr	r0, [pc, #152]	@ (8000a88 <MX_GPIO_Init+0x2fc>)
 80009f0:	f000 fc02 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009f4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a06:	230c      	movs	r3, #12
 8000a08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481b      	ldr	r0, [pc, #108]	@ (8000a80 <MX_GPIO_Init+0x2f4>)
 8000a12:	f000 fbf1 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a16:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4816      	ldr	r0, [pc, #88]	@ (8000a8c <MX_GPIO_Init+0x300>)
 8000a34:	f000 fbe0 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a38:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a4a:	230e      	movs	r3, #14
 8000a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <MX_GPIO_Init+0x2fc>)
 8000a56:	f000 fbcf 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a5a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a6c:	e010      	b.n	8000a90 <MX_GPIO_Init+0x304>
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	40021800 	.word	0x40021800
 8000a84:	40021400 	.word	0x40021400
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a90:	230c      	movs	r3, #12
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	486f      	ldr	r0, [pc, #444]	@ (8000c58 <MX_GPIO_Init+0x4cc>)
 8000a9c:	f000 fbac 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4868      	ldr	r0, [pc, #416]	@ (8000c58 <MX_GPIO_Init+0x4cc>)
 8000ab6:	f000 fb9f 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000aba:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000acc:	230c      	movs	r3, #12
 8000ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4861      	ldr	r0, [pc, #388]	@ (8000c5c <MX_GPIO_Init+0x4d0>)
 8000ad8:	f000 fb8e 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000adc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	485a      	ldr	r0, [pc, #360]	@ (8000c5c <MX_GPIO_Init+0x4d0>)
 8000af2:	f000 fb81 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000af6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4853      	ldr	r0, [pc, #332]	@ (8000c5c <MX_GPIO_Init+0x4d0>)
 8000b10:	f000 fb72 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b14:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b26:	230e      	movs	r3, #14
 8000b28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	484b      	ldr	r0, [pc, #300]	@ (8000c60 <MX_GPIO_Init+0x4d4>)
 8000b32:	f000 fb61 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b36:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b48:	230e      	movs	r3, #14
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	4844      	ldr	r0, [pc, #272]	@ (8000c64 <MX_GPIO_Init+0x4d8>)
 8000b54:	f000 fb50 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5e:	2312      	movs	r3, #18
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	483b      	ldr	r0, [pc, #236]	@ (8000c64 <MX_GPIO_Init+0x4d8>)
 8000b76:	f000 fb3f 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b80:	2312      	movs	r3, #18
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4834      	ldr	r0, [pc, #208]	@ (8000c68 <MX_GPIO_Init+0x4dc>)
 8000b98:	f000 fb2e 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	482b      	ldr	r0, [pc, #172]	@ (8000c68 <MX_GPIO_Init+0x4dc>)
 8000bba:	f000 fb1d 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bbe:	2348      	movs	r3, #72	@ 0x48
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bce:	230e      	movs	r3, #14
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4820      	ldr	r0, [pc, #128]	@ (8000c5c <MX_GPIO_Init+0x4d0>)
 8000bda:	f000 fb0d 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000bde:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bf0:	2309      	movs	r3, #9
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4819      	ldr	r0, [pc, #100]	@ (8000c60 <MX_GPIO_Init+0x4d4>)
 8000bfc:	f000 fafc 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c00:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4811      	ldr	r0, [pc, #68]	@ (8000c60 <MX_GPIO_Init+0x4d4>)
 8000c1a:	f000 faed 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c1e:	2360      	movs	r3, #96	@ 0x60
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <MX_GPIO_Init+0x4cc>)
 8000c3a:	f000 fadd 	bl	80011f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2006      	movs	r0, #6
 8000c44:	f000 faa1 	bl	800118a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c48:	2006      	movs	r0, #6
 8000c4a:	f000 faba 	bl	80011c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4e:	bf00      	nop
 8000c50:	3738      	adds	r7, #56	@ 0x38
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	40021800 	.word	0x40021800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020000 	.word	0x40020000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <Error_Handler+0x8>

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f000 fa5c 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <HAL_SPI_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12c      	bne.n	8000d44 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <HAL_SPI_MspInit+0x88>)
 8000cf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <HAL_SPI_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <HAL_SPI_MspInit+0x88>)
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_SPI_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000d22:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d34:	2305      	movs	r3, #5
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <HAL_SPI_MspInit+0x8c>)
 8000d40:	f000 fa5a 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	@ 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40015000 	.word	0x40015000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40021400 	.word	0x40021400

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f8cd 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fbe2 	bl	8001584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f002 fa10 	bl	8003218 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20030000 	.word	0x20030000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200000ec 	.word	0x200000ec
 8000e2c:	200002f0 	.word	0x200002f0

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f002 f9cf 	bl	8003224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fbd5 	bl	8000634 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e8c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e98:	08003e44 	.word	0x08003e44
  ldr r2, =_sbss
 8000e9c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ea0:	200002ec 	.word	0x200002ec

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f94f 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fecc 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f967 	bl	80011de <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f92f 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000004 	.word	0x20000004
 8000f44:	2000000c 	.word	0x2000000c
 8000f48:	20000008 	.word	0x20000008

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	200000f0 	.word	0x200000f0

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200000f0 	.word	0x200000f0

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000000c 	.word	0x2000000c

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	@ (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff3e 	bl	800101c <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff31 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e177      	b.n	8001504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8166 	bne.w	80014fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	2b02      	cmp	r3, #2
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80c0 	beq.w	80014fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b66      	ldr	r3, [pc, #408]	@ (800151c <HAL_GPIO_Init+0x324>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	4a65      	ldr	r2, [pc, #404]	@ (800151c <HAL_GPIO_Init+0x324>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138c:	6453      	str	r3, [r2, #68]	@ 0x44
 800138e:	4b63      	ldr	r3, [pc, #396]	@ (800151c <HAL_GPIO_Init+0x324>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a61      	ldr	r2, [pc, #388]	@ (8001520 <HAL_GPIO_Init+0x328>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a58      	ldr	r2, [pc, #352]	@ (8001524 <HAL_GPIO_Init+0x32c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d037      	beq.n	8001436 <HAL_GPIO_Init+0x23e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a57      	ldr	r2, [pc, #348]	@ (8001528 <HAL_GPIO_Init+0x330>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d031      	beq.n	8001432 <HAL_GPIO_Init+0x23a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a56      	ldr	r2, [pc, #344]	@ (800152c <HAL_GPIO_Init+0x334>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02b      	beq.n	800142e <HAL_GPIO_Init+0x236>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a55      	ldr	r2, [pc, #340]	@ (8001530 <HAL_GPIO_Init+0x338>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d025      	beq.n	800142a <HAL_GPIO_Init+0x232>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a54      	ldr	r2, [pc, #336]	@ (8001534 <HAL_GPIO_Init+0x33c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01f      	beq.n	8001426 <HAL_GPIO_Init+0x22e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a53      	ldr	r2, [pc, #332]	@ (8001538 <HAL_GPIO_Init+0x340>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0x22a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	@ (800153c <HAL_GPIO_Init+0x344>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x226>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	@ (8001540 <HAL_GPIO_Init+0x348>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x222>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	@ (8001544 <HAL_GPIO_Init+0x34c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x21e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	@ (8001548 <HAL_GPIO_Init+0x350>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x21a>
 800140e:	2309      	movs	r3, #9
 8001410:	e012      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001412:	230a      	movs	r3, #10
 8001414:	e010      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001416:	2308      	movs	r3, #8
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141a:	2307      	movs	r3, #7
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	@ (8001520 <HAL_GPIO_Init+0x328>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <HAL_GPIO_Init+0x354>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a34      	ldr	r2, [pc, #208]	@ (800154c <HAL_GPIO_Init+0x354>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <HAL_GPIO_Init+0x354>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a29      	ldr	r2, [pc, #164]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ce:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f ae84 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40021400 	.word	0x40021400
 800153c:	40021800 	.word	0x40021800
 8001540:	40021c00 	.word	0x40021c00
 8001544:	40022000 	.word	0x40022000
 8001548:	40022400 	.word	0x40022400
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f808 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40013c00 	.word	0x40013c00

080015b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e267      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d075      	beq.n	80016be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015d2:	4b88      	ldr	r3, [pc, #544]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d00c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4b85      	ldr	r3, [pc, #532]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d112      	bne.n	8001610 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4b82      	ldr	r3, [pc, #520]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015f6:	d10b      	bne.n	8001610 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	4b7e      	ldr	r3, [pc, #504]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05b      	beq.n	80016bc <HAL_RCC_OscConfig+0x108>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d157      	bne.n	80016bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e242      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x74>
 800161a:	4b76      	ldr	r3, [pc, #472]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a75      	ldr	r2, [pc, #468]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xb0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x98>
 8001632:	4b70      	ldr	r3, [pc, #448]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6f      	ldr	r2, [pc, #444]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b6d      	ldr	r3, [pc, #436]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6c      	ldr	r2, [pc, #432]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xb0>
 800164c:	4b69      	ldr	r3, [pc, #420]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a68      	ldr	r2, [pc, #416]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b66      	ldr	r3, [pc, #408]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a65      	ldr	r2, [pc, #404]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fc82 	bl	8000f74 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fc7e 	bl	8000f74 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	@ 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e207      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b5b      	ldr	r3, [pc, #364]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xc0>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fc6e 	bl	8000f74 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fc6a 	bl	8000f74 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	@ 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1f3      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b51      	ldr	r3, [pc, #324]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0xe8>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d063      	beq.n	8001792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016ca:	4b4a      	ldr	r3, [pc, #296]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d11c      	bne.n	800171c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e2:	4b44      	ldr	r3, [pc, #272]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	4b41      	ldr	r3, [pc, #260]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_RCC_OscConfig+0x152>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e1c7      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001706:	4b3b      	ldr	r3, [pc, #236]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4937      	ldr	r1, [pc, #220]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	e03a      	b.n	8001792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <HAL_RCC_OscConfig+0x244>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fc23 	bl	8000f74 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fc1f 	bl	8000f74 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e1a8      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4925      	ldr	r1, [pc, #148]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
 8001764:	e015      	b.n	8001792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001766:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_RCC_OscConfig+0x244>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fc02 	bl	8000f74 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff fbfe 	bl	8000f74 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e187      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d036      	beq.n	800180c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d016      	beq.n	80017d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_RCC_OscConfig+0x248>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fbe2 	bl	8000f74 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fbde 	bl	8000f74 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e167      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80017c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x200>
 80017d2:	e01b      	b.n	800180c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_RCC_OscConfig+0x248>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff fbcb 	bl	8000f74 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	e00e      	b.n	8001800 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e2:	f7ff fbc7 	bl	8000f74 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d907      	bls.n	8001800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e150      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
 80017f4:	40023800 	.word	0x40023800
 80017f8:	42470000 	.word	0x42470000
 80017fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	4b88      	ldr	r3, [pc, #544]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ea      	bne.n	80017e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 8097 	beq.w	8001948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181e:	4b81      	ldr	r3, [pc, #516]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	4a7c      	ldr	r2, [pc, #496]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	@ 0x40
 800183a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184a:	4b77      	ldr	r3, [pc, #476]	@ (8001a28 <HAL_RCC_OscConfig+0x474>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001856:	4b74      	ldr	r3, [pc, #464]	@ (8001a28 <HAL_RCC_OscConfig+0x474>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a73      	ldr	r2, [pc, #460]	@ (8001a28 <HAL_RCC_OscConfig+0x474>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7ff fb87 	bl	8000f74 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff fb83 	bl	8000f74 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e10c      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a28 <HAL_RCC_OscConfig+0x474>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x2ea>
 8001890:	4b64      	ldr	r3, [pc, #400]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001894:	4a63      	ldr	r2, [pc, #396]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6713      	str	r3, [r2, #112]	@ 0x70
 800189c:	e01c      	b.n	80018d8 <HAL_RCC_OscConfig+0x324>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x30c>
 80018a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0x324>
 80018c0:	4b58      	ldr	r3, [pc, #352]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c4:	4a57      	ldr	r2, [pc, #348]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80018cc:	4b55      	ldr	r3, [pc, #340]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d0:	4a54      	ldr	r2, [pc, #336]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018d2:	f023 0304 	bic.w	r3, r3, #4
 80018d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d015      	beq.n	800190c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff fb48 	bl	8000f74 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff fb44 	bl	8000f74 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e0cb      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fe:	4b49      	ldr	r3, [pc, #292]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0ee      	beq.n	80018e8 <HAL_RCC_OscConfig+0x334>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fb32 	bl	8000f74 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001912:	e00a      	b.n	800192a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff fb2e 	bl	8000f74 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0b5      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ee      	bne.n	8001914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193c:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	4a38      	ldr	r2, [pc, #224]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80a1 	beq.w	8001a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001952:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b08      	cmp	r3, #8
 800195c:	d05c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d141      	bne.n	80019ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001966:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <HAL_RCC_OscConfig+0x478>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fb02 	bl	8000f74 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff fafe 	bl	8000f74 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e087      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	019b      	lsls	r3, r3, #6
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	491b      	ldr	r1, [pc, #108]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_RCC_OscConfig+0x478>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fad7 	bl	8000f74 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff fad3 	bl	8000f74 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e05c      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x416>
 80019e8:	e054      	b.n	8001a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_RCC_OscConfig+0x478>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fac0 	bl	8000f74 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff fabc 	bl	8000f74 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e045      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x444>
 8001a16:	e03d      	b.n	8001a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e038      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_RCC_OscConfig+0x4ec>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d028      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d121      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d11a      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a60:	4013      	ands	r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d111      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	085b      	lsrs	r3, r3, #1
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0cc      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b68      	ldr	r3, [pc, #416]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b65      	ldr	r3, [pc, #404]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a52      	ldr	r2, [pc, #328]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d044      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d119      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b3f      	ldr	r3, [pc, #252]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e067      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b37      	ldr	r3, [pc, #220]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4934      	ldr	r1, [pc, #208]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff f9ee 	bl	8000f74 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7ff f9ea 	bl	8000f74 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e04f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d20c      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f821 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490a      	ldr	r1, [pc, #40]	@ (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f94e 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	08003dd4 	.word	0x08003dd4
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	20000008 	.word	0x20000008

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c74:	b094      	sub	sp, #80	@ 0x50
 8001c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c88:	4b79      	ldr	r3, [pc, #484]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d00d      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	f200 80e1 	bhi.w	8001e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca2:	e0db      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b73      	ldr	r3, [pc, #460]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ca8:	e0db      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001caa:	4b73      	ldr	r3, [pc, #460]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cae:	e0d8      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cba:	4b6d      	ldr	r3, [pc, #436]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	2200      	movs	r2, #0
 8001cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	462b      	mov	r3, r5
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	0159      	lsls	r1, r3, #5
 8001cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf4:	0150      	lsls	r0, r2, #5
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	1a51      	subs	r1, r2, r1
 8001cfe:	6139      	str	r1, [r7, #16]
 8001d00:	4629      	mov	r1, r5
 8001d02:	eb63 0301 	sbc.w	r3, r3, r1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d14:	4659      	mov	r1, fp
 8001d16:	018b      	lsls	r3, r1, #6
 8001d18:	4651      	mov	r1, sl
 8001d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d1e:	4651      	mov	r1, sl
 8001d20:	018a      	lsls	r2, r1, #6
 8001d22:	4651      	mov	r1, sl
 8001d24:	ebb2 0801 	subs.w	r8, r2, r1
 8001d28:	4659      	mov	r1, fp
 8001d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d42:	4690      	mov	r8, r2
 8001d44:	4699      	mov	r9, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	eb18 0303 	adds.w	r3, r8, r3
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	462b      	mov	r3, r5
 8001d50:	eb49 0303 	adc.w	r3, r9, r3
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d62:	4629      	mov	r1, r5
 8001d64:	024b      	lsls	r3, r1, #9
 8001d66:	4621      	mov	r1, r4
 8001d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	024a      	lsls	r2, r1, #9
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d76:	2200      	movs	r2, #0
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d80:	f7fe fa8e 	bl	80002a0 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d8c:	e058      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8e:	4b38      	ldr	r3, [pc, #224]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	2200      	movs	r2, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	4611      	mov	r1, r2
 8001d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da8:	4642      	mov	r2, r8
 8001daa:	464b      	mov	r3, r9
 8001dac:	f04f 0000 	mov.w	r0, #0
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	0159      	lsls	r1, r3, #5
 8001db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dba:	0150      	lsls	r0, r2, #5
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001de0:	ebb2 040a 	subs.w	r4, r2, sl
 8001de4:	eb63 050b 	sbc.w	r5, r3, fp
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	00eb      	lsls	r3, r5, #3
 8001df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df6:	00e2      	lsls	r2, r4, #3
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	4643      	mov	r3, r8
 8001dfe:	18e3      	adds	r3, r4, r3
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	464b      	mov	r3, r9
 8001e04:	eb45 0303 	adc.w	r3, r5, r3
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e16:	4629      	mov	r1, r5
 8001e18:	028b      	lsls	r3, r1, #10
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e20:	4621      	mov	r1, r4
 8001e22:	028a      	lsls	r2, r1, #10
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	61fa      	str	r2, [r7, #28]
 8001e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e34:	f7fe fa34 	bl	80002a0 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3750      	adds	r7, #80	@ 0x50
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07b      	b.n	8001f86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d108      	bne.n	8001ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e9e:	d009      	beq.n	8001eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
 8001ea6:	e005      	b.n	8001eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fefa 	bl	8000cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f38:	ea42 0103 	orr.w	r1, r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	f003 0104 	and.w	r1, r3, #4
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	f003 0210 	and.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b088      	sub	sp, #32
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f9e:	f7fe ffe9 	bl	8000f74 <HAL_GetTick>
 8001fa2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d001      	beq.n	8001fb8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e12a      	b.n	800220e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <HAL_SPI_Transmit+0x36>
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e122      	b.n	800220e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_SPI_Transmit+0x48>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e11b      	b.n	800220e <HAL_SPI_Transmit+0x280>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	88fa      	ldrh	r2, [r7, #6]
 8001ffc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002024:	d10f      	bne.n	8002046 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002034:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002044:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002050:	2b40      	cmp	r3, #64	@ 0x40
 8002052:	d007      	beq.n	8002064 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002062:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800206c:	d152      	bne.n	8002114 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_SPI_Transmit+0xee>
 8002076:	8b7b      	ldrh	r3, [r7, #26]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d145      	bne.n	8002108 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	1c9a      	adds	r2, r3, #2
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020a0:	e032      	b.n	8002108 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d112      	bne.n	80020d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b4:	881a      	ldrh	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	1c9a      	adds	r2, r3, #2
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020d4:	e018      	b.n	8002108 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020d6:	f7fe ff4d 	bl	8000f74 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d803      	bhi.n	80020ee <HAL_SPI_Transmit+0x160>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d102      	bne.n	80020f4 <HAL_SPI_Transmit+0x166>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e082      	b.n	800220e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1c7      	bne.n	80020a2 <HAL_SPI_Transmit+0x114>
 8002112:	e053      	b.n	80021bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_SPI_Transmit+0x194>
 800211c:	8b7b      	ldrh	r3, [r7, #26]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d147      	bne.n	80021b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	330c      	adds	r3, #12
 800212c:	7812      	ldrb	r2, [r2, #0]
 800212e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002148:	e033      	b.n	80021b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b02      	cmp	r3, #2
 8002156:	d113      	bne.n	8002180 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	330c      	adds	r3, #12
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800217e:	e018      	b.n	80021b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002180:	f7fe fef8 	bl	8000f74 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d803      	bhi.n	8002198 <HAL_SPI_Transmit+0x20a>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d102      	bne.n	800219e <HAL_SPI_Transmit+0x210>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e02d      	b.n	800220e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1c6      	bne.n	800214a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	6839      	ldr	r1, [r7, #0]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fbd9 	bl	8002978 <SPI_EndRxTxTransaction>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800220c:	2300      	movs	r3, #0
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b088      	sub	sp, #32
 800221a:	af02      	add	r7, sp, #8
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d001      	beq.n	8002236 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002232:	2302      	movs	r3, #2
 8002234:	e104      	b.n	8002440 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800223e:	d112      	bne.n	8002266 <HAL_SPI_Receive+0x50>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10e      	bne.n	8002266 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2204      	movs	r2, #4
 800224c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f8f3 	bl	8002448 <HAL_SPI_TransmitReceive>
 8002262:	4603      	mov	r3, r0
 8002264:	e0ec      	b.n	8002440 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002266:	f7fe fe85 	bl	8000f74 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_SPI_Receive+0x62>
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0e1      	b.n	8002440 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_SPI_Receive+0x74>
 8002286:	2302      	movs	r3, #2
 8002288:	e0da      	b.n	8002440 <HAL_SPI_Receive+0x22a>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2204      	movs	r2, #4
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022d8:	d10f      	bne.n	80022fa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002304:	2b40      	cmp	r3, #64	@ 0x40
 8002306:	d007      	beq.n	8002318 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d170      	bne.n	8002402 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002320:	e035      	b.n	800238e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	d115      	bne.n	800235c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f103 020c 	add.w	r2, r3, #12
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800235a:	e018      	b.n	800238e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800235c:	f7fe fe0a 	bl	8000f74 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d803      	bhi.n	8002374 <HAL_SPI_Receive+0x15e>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002372:	d102      	bne.n	800237a <HAL_SPI_Receive+0x164>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e058      	b.n	8002440 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1c4      	bne.n	8002322 <HAL_SPI_Receive+0x10c>
 8002398:	e038      	b.n	800240c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d113      	bne.n	80023d0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	b292      	uxth	r2, r2
 80023b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ba:	1c9a      	adds	r2, r3, #2
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023ce:	e018      	b.n	8002402 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023d0:	f7fe fdd0 	bl	8000f74 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d803      	bhi.n	80023e8 <HAL_SPI_Receive+0x1d2>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d102      	bne.n	80023ee <HAL_SPI_Receive+0x1d8>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e01e      	b.n	8002440 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1c6      	bne.n	800239a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	6839      	ldr	r1, [r7, #0]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fa4b 	bl	80028ac <SPI_EndRxTransaction>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800243e:	2300      	movs	r3, #0
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002456:	2301      	movs	r3, #1
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800245a:	f7fe fd8b 	bl	8000f74 <HAL_GetTick>
 800245e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002466:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002472:	7ffb      	ldrb	r3, [r7, #31]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d00c      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x4a>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800247e:	d106      	bne.n	800248e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <HAL_SPI_TransmitReceive+0x46>
 8002488:	7ffb      	ldrb	r3, [r7, #31]
 800248a:	2b04      	cmp	r3, #4
 800248c:	d001      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
 8002490:	e17f      	b.n	8002792 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_SPI_TransmitReceive+0x5c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_SPI_TransmitReceive+0x5c>
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e174      	b.n	8002792 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x6e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e16d      	b.n	8002792 <HAL_SPI_TransmitReceive+0x34a>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d003      	beq.n	80024d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2205      	movs	r2, #5
 80024ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	887a      	ldrh	r2, [r7, #2]
 80024fa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002512:	2b40      	cmp	r3, #64	@ 0x40
 8002514:	d007      	beq.n	8002526 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800252e:	d17e      	bne.n	800262e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_SPI_TransmitReceive+0xf6>
 8002538:	8afb      	ldrh	r3, [r7, #22]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d16c      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	1c9a      	adds	r2, r3, #2
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002562:	e059      	b.n	8002618 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d11b      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x162>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d016      	beq.n	80025aa <HAL_SPI_TransmitReceive+0x162>
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	2b01      	cmp	r3, #1
 8002580:	d113      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	1c9a      	adds	r2, r3, #2
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d119      	bne.n	80025ec <HAL_SPI_TransmitReceive+0x1a4>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d014      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025cc:	b292      	uxth	r2, r2
 80025ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d4:	1c9a      	adds	r2, r3, #2
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025e8:	2301      	movs	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025ec:	f7fe fcc2 	bl	8000f74 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d80d      	bhi.n	8002618 <HAL_SPI_TransmitReceive+0x1d0>
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d009      	beq.n	8002618 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0bc      	b.n	8002792 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1a0      	bne.n	8002564 <HAL_SPI_TransmitReceive+0x11c>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d19b      	bne.n	8002564 <HAL_SPI_TransmitReceive+0x11c>
 800262c:	e082      	b.n	8002734 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_SPI_TransmitReceive+0x1f4>
 8002636:	8afb      	ldrh	r3, [r7, #22]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d171      	bne.n	8002720 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002662:	e05d      	b.n	8002720 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d11c      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x264>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d017      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x264>
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	2b01      	cmp	r3, #1
 8002680:	d114      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	7812      	ldrb	r2, [r2, #0]
 800268e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d119      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x2a6>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d014      	beq.n	80026ee <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026ea:	2301      	movs	r3, #1
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026ee:	f7fe fc41 	bl	8000f74 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d803      	bhi.n	8002706 <HAL_SPI_TransmitReceive+0x2be>
 80026fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d102      	bne.n	800270c <HAL_SPI_TransmitReceive+0x2c4>
 8002706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e038      	b.n	8002792 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d19c      	bne.n	8002664 <HAL_SPI_TransmitReceive+0x21c>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d197      	bne.n	8002664 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f91d 	bl	8002978 <SPI_EndRxTxTransaction>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e01d      	b.n	8002792 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002790:	2300      	movs	r3, #0
  }
}
 8002792:	4618      	mov	r0, r3
 8002794:	3728      	adds	r7, #40	@ 0x28
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027ac:	f7fe fbe2 	bl	8000f74 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027bc:	f7fe fbda 	bl	8000f74 <HAL_GetTick>
 80027c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027c2:	4b39      	ldr	r3, [pc, #228]	@ (80028a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	015b      	lsls	r3, r3, #5
 80027c8:	0d1b      	lsrs	r3, r3, #20
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	fb02 f303 	mul.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027d2:	e054      	b.n	800287e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d050      	beq.n	800287e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027dc:	f7fe fbca 	bl	8000f74 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d902      	bls.n	80027f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d13d      	bne.n	800286e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800280a:	d111      	bne.n	8002830 <SPI_WaitFlagStateUntilTimeout+0x94>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002814:	d004      	beq.n	8002820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800281e:	d107      	bne.n	8002830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800282e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002838:	d10f      	bne.n	800285a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e017      	b.n	800289e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3b01      	subs	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	429a      	cmp	r2, r3
 800288c:	bf0c      	ite	eq
 800288e:	2301      	moveq	r3, #1
 8002890:	2300      	movne	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	429a      	cmp	r2, r3
 800289a:	d19b      	bne.n	80027d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000004 	.word	0x20000004

080028ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028c0:	d111      	bne.n	80028e6 <SPI_EndRxTransaction+0x3a>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ca:	d004      	beq.n	80028d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d4:	d107      	bne.n	80028e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028ee:	d12a      	bne.n	8002946 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f8:	d012      	beq.n	8002920 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2200      	movs	r2, #0
 8002902:	2180      	movs	r1, #128	@ 0x80
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f7ff ff49 	bl	800279c <SPI_WaitFlagStateUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d02d      	beq.n	800296c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e026      	b.n	800296e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	2101      	movs	r1, #1
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff ff36 	bl	800279c <SPI_WaitFlagStateUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01a      	beq.n	800296c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e013      	b.n	800296e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	2101      	movs	r1, #1
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff ff23 	bl	800279c <SPI_WaitFlagStateUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e000      	b.n	800296e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2201      	movs	r2, #1
 800298c:	2102      	movs	r1, #2
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff ff04 	bl	800279c <SPI_WaitFlagStateUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299e:	f043 0220 	orr.w	r2, r3, #32
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e032      	b.n	8002a10 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <SPI_EndRxTxTransaction+0xa0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1b      	ldr	r2, [pc, #108]	@ (8002a1c <SPI_EndRxTxTransaction+0xa4>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	0d5b      	lsrs	r3, r3, #21
 80029b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029c8:	d112      	bne.n	80029f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2180      	movs	r1, #128	@ 0x80
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7ff fee1 	bl	800279c <SPI_WaitFlagStateUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d016      	beq.n	8002a0e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e00f      	b.n	8002a10 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b80      	cmp	r3, #128	@ 0x80
 8002a08:	d0f2      	beq.n	80029f0 <SPI_EndRxTxTransaction+0x78>
 8002a0a:	e000      	b.n	8002a0e <SPI_EndRxTxTransaction+0x96>
        break;
 8002a0c:	bf00      	nop
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000004 	.word	0x20000004
 8002a1c:	165e9f81 	.word	0x165e9f81

08002a20 <findslot>:
 8002a20:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <findslot+0x2c>)
 8002a22:	b510      	push	{r4, lr}
 8002a24:	4604      	mov	r4, r0
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	b118      	cbz	r0, 8002a32 <findslot+0x12>
 8002a2a:	6a03      	ldr	r3, [r0, #32]
 8002a2c:	b90b      	cbnz	r3, 8002a32 <findslot+0x12>
 8002a2e:	f000 fb19 	bl	8003064 <__sinit>
 8002a32:	2c13      	cmp	r4, #19
 8002a34:	d807      	bhi.n	8002a46 <findslot+0x26>
 8002a36:	4806      	ldr	r0, [pc, #24]	@ (8002a50 <findslot+0x30>)
 8002a38:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002a3c:	3201      	adds	r2, #1
 8002a3e:	d002      	beq.n	8002a46 <findslot+0x26>
 8002a40:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002a44:	bd10      	pop	{r4, pc}
 8002a46:	2000      	movs	r0, #0
 8002a48:	e7fc      	b.n	8002a44 <findslot+0x24>
 8002a4a:	bf00      	nop
 8002a4c:	20000024 	.word	0x20000024
 8002a50:	20000100 	.word	0x20000100

08002a54 <error>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	4604      	mov	r4, r0
 8002a58:	f000 fbde 	bl	8003218 <__errno>
 8002a5c:	2613      	movs	r6, #19
 8002a5e:	4605      	mov	r5, r0
 8002a60:	2700      	movs	r7, #0
 8002a62:	4630      	mov	r0, r6
 8002a64:	4639      	mov	r1, r7
 8002a66:	beab      	bkpt	0x00ab
 8002a68:	4606      	mov	r6, r0
 8002a6a:	602e      	str	r6, [r5, #0]
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a70 <checkerror>:
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d101      	bne.n	8002a78 <checkerror+0x8>
 8002a74:	f7ff bfee 	b.w	8002a54 <error>
 8002a78:	4770      	bx	lr

08002a7a <_swiread>:
 8002a7a:	b530      	push	{r4, r5, lr}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002a82:	9203      	str	r2, [sp, #12]
 8002a84:	2406      	movs	r4, #6
 8002a86:	ad01      	add	r5, sp, #4
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	beab      	bkpt	0x00ab
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff ffed 	bl	8002a70 <checkerror>
 8002a96:	b005      	add	sp, #20
 8002a98:	bd30      	pop	{r4, r5, pc}

08002a9a <_read>:
 8002a9a:	b570      	push	{r4, r5, r6, lr}
 8002a9c:	460e      	mov	r6, r1
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	f7ff ffbe 	bl	8002a20 <findslot>
 8002aa4:	4605      	mov	r5, r0
 8002aa6:	b930      	cbnz	r0, 8002ab6 <_read+0x1c>
 8002aa8:	f000 fbb6 	bl	8003218 <__errno>
 8002aac:	2309      	movs	r3, #9
 8002aae:	6003      	str	r3, [r0, #0]
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	bd70      	pop	{r4, r5, r6, pc}
 8002ab6:	6800      	ldr	r0, [r0, #0]
 8002ab8:	4622      	mov	r2, r4
 8002aba:	4631      	mov	r1, r6
 8002abc:	f7ff ffdd 	bl	8002a7a <_swiread>
 8002ac0:	1c43      	adds	r3, r0, #1
 8002ac2:	d0f5      	beq.n	8002ab0 <_read+0x16>
 8002ac4:	686b      	ldr	r3, [r5, #4]
 8002ac6:	1a20      	subs	r0, r4, r0
 8002ac8:	4403      	add	r3, r0
 8002aca:	606b      	str	r3, [r5, #4]
 8002acc:	e7f2      	b.n	8002ab4 <_read+0x1a>

08002ace <_swilseek>:
 8002ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	4616      	mov	r6, r2
 8002ad4:	f7ff ffa4 	bl	8002a20 <findslot>
 8002ad8:	4605      	mov	r5, r0
 8002ada:	b940      	cbnz	r0, 8002aee <_swilseek+0x20>
 8002adc:	f000 fb9c 	bl	8003218 <__errno>
 8002ae0:	2309      	movs	r3, #9
 8002ae2:	6003      	str	r3, [r0, #0]
 8002ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ae8:	4620      	mov	r0, r4
 8002aea:	b003      	add	sp, #12
 8002aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aee:	2e02      	cmp	r6, #2
 8002af0:	d903      	bls.n	8002afa <_swilseek+0x2c>
 8002af2:	f000 fb91 	bl	8003218 <__errno>
 8002af6:	2316      	movs	r3, #22
 8002af8:	e7f3      	b.n	8002ae2 <_swilseek+0x14>
 8002afa:	2e01      	cmp	r6, #1
 8002afc:	d112      	bne.n	8002b24 <_swilseek+0x56>
 8002afe:	6843      	ldr	r3, [r0, #4]
 8002b00:	18e4      	adds	r4, r4, r3
 8002b02:	d4f6      	bmi.n	8002af2 <_swilseek+0x24>
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	260a      	movs	r6, #10
 8002b08:	e9cd 3400 	strd	r3, r4, [sp]
 8002b0c:	466f      	mov	r7, sp
 8002b0e:	4630      	mov	r0, r6
 8002b10:	4639      	mov	r1, r7
 8002b12:	beab      	bkpt	0x00ab
 8002b14:	4606      	mov	r6, r0
 8002b16:	4630      	mov	r0, r6
 8002b18:	f7ff ffaa 	bl	8002a70 <checkerror>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	dbe1      	blt.n	8002ae4 <_swilseek+0x16>
 8002b20:	606c      	str	r4, [r5, #4]
 8002b22:	e7e1      	b.n	8002ae8 <_swilseek+0x1a>
 8002b24:	2e02      	cmp	r6, #2
 8002b26:	6803      	ldr	r3, [r0, #0]
 8002b28:	d1ec      	bne.n	8002b04 <_swilseek+0x36>
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	260c      	movs	r6, #12
 8002b2e:	466f      	mov	r7, sp
 8002b30:	4630      	mov	r0, r6
 8002b32:	4639      	mov	r1, r7
 8002b34:	beab      	bkpt	0x00ab
 8002b36:	4606      	mov	r6, r0
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f7ff ff99 	bl	8002a70 <checkerror>
 8002b3e:	1c43      	adds	r3, r0, #1
 8002b40:	d0d0      	beq.n	8002ae4 <_swilseek+0x16>
 8002b42:	4404      	add	r4, r0
 8002b44:	e7de      	b.n	8002b04 <_swilseek+0x36>

08002b46 <_lseek>:
 8002b46:	f7ff bfc2 	b.w	8002ace <_swilseek>

08002b4a <_swiwrite>:
 8002b4a:	b530      	push	{r4, r5, lr}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002b52:	9203      	str	r2, [sp, #12]
 8002b54:	2405      	movs	r4, #5
 8002b56:	ad01      	add	r5, sp, #4
 8002b58:	4620      	mov	r0, r4
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	beab      	bkpt	0x00ab
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff ff85 	bl	8002a70 <checkerror>
 8002b66:	b005      	add	sp, #20
 8002b68:	bd30      	pop	{r4, r5, pc}

08002b6a <_write>:
 8002b6a:	b570      	push	{r4, r5, r6, lr}
 8002b6c:	460e      	mov	r6, r1
 8002b6e:	4615      	mov	r5, r2
 8002b70:	f7ff ff56 	bl	8002a20 <findslot>
 8002b74:	4604      	mov	r4, r0
 8002b76:	b930      	cbnz	r0, 8002b86 <_write+0x1c>
 8002b78:	f000 fb4e 	bl	8003218 <__errno>
 8002b7c:	2309      	movs	r3, #9
 8002b7e:	6003      	str	r3, [r0, #0]
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	6800      	ldr	r0, [r0, #0]
 8002b88:	462a      	mov	r2, r5
 8002b8a:	4631      	mov	r1, r6
 8002b8c:	f7ff ffdd 	bl	8002b4a <_swiwrite>
 8002b90:	1e03      	subs	r3, r0, #0
 8002b92:	dbf5      	blt.n	8002b80 <_write+0x16>
 8002b94:	6862      	ldr	r2, [r4, #4]
 8002b96:	1ae8      	subs	r0, r5, r3
 8002b98:	4402      	add	r2, r0
 8002b9a:	42ab      	cmp	r3, r5
 8002b9c:	6062      	str	r2, [r4, #4]
 8002b9e:	d1f1      	bne.n	8002b84 <_write+0x1a>
 8002ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7ff bf55 	b.w	8002a54 <error>

08002baa <_swiclose>:
 8002baa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bac:	2402      	movs	r4, #2
 8002bae:	9001      	str	r0, [sp, #4]
 8002bb0:	ad01      	add	r5, sp, #4
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	beab      	bkpt	0x00ab
 8002bb8:	4604      	mov	r4, r0
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7ff ff58 	bl	8002a70 <checkerror>
 8002bc0:	b003      	add	sp, #12
 8002bc2:	bd30      	pop	{r4, r5, pc}

08002bc4 <_close>:
 8002bc4:	b538      	push	{r3, r4, r5, lr}
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	f7ff ff2a 	bl	8002a20 <findslot>
 8002bcc:	4604      	mov	r4, r0
 8002bce:	b930      	cbnz	r0, 8002bde <_close+0x1a>
 8002bd0:	f000 fb22 	bl	8003218 <__errno>
 8002bd4:	2309      	movs	r3, #9
 8002bd6:	6003      	str	r3, [r0, #0]
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	bd38      	pop	{r3, r4, r5, pc}
 8002bde:	3d01      	subs	r5, #1
 8002be0:	2d01      	cmp	r5, #1
 8002be2:	d809      	bhi.n	8002bf8 <_close+0x34>
 8002be4:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <_close+0x40>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d104      	bne.n	8002bf8 <_close+0x34>
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	6023      	str	r3, [r4, #0]
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	e7f1      	b.n	8002bdc <_close+0x18>
 8002bf8:	6820      	ldr	r0, [r4, #0]
 8002bfa:	f7ff ffd6 	bl	8002baa <_swiclose>
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d0f5      	beq.n	8002bee <_close+0x2a>
 8002c02:	e7eb      	b.n	8002bdc <_close+0x18>
 8002c04:	20000100 	.word	0x20000100

08002c08 <_swistat>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	f7ff ff08 	bl	8002a20 <findslot>
 8002c10:	4605      	mov	r5, r0
 8002c12:	b930      	cbnz	r0, 8002c22 <_swistat+0x1a>
 8002c14:	f000 fb00 	bl	8003218 <__errno>
 8002c18:	2309      	movs	r3, #9
 8002c1a:	6003      	str	r3, [r0, #0]
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
 8002c22:	6863      	ldr	r3, [r4, #4]
 8002c24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c28:	6063      	str	r3, [r4, #4]
 8002c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c2e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002c30:	260c      	movs	r6, #12
 8002c32:	4630      	mov	r0, r6
 8002c34:	4629      	mov	r1, r5
 8002c36:	beab      	bkpt	0x00ab
 8002c38:	4605      	mov	r5, r0
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f7ff ff18 	bl	8002a70 <checkerror>
 8002c40:	1c43      	adds	r3, r0, #1
 8002c42:	d0eb      	beq.n	8002c1c <_swistat+0x14>
 8002c44:	6120      	str	r0, [r4, #16]
 8002c46:	2000      	movs	r0, #0
 8002c48:	e7ea      	b.n	8002c20 <_swistat+0x18>

08002c4a <_fstat>:
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	b510      	push	{r4, lr}
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4604      	mov	r4, r0
 8002c52:	2258      	movs	r2, #88	@ 0x58
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fa90 	bl	800317a <memset>
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c62:	f7ff bfd1 	b.w	8002c08 <_swistat>

08002c66 <_stat>:
 8002c66:	b538      	push	{r3, r4, r5, lr}
 8002c68:	460d      	mov	r5, r1
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	2258      	movs	r2, #88	@ 0x58
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4628      	mov	r0, r5
 8002c72:	f000 fa82 	bl	800317a <memset>
 8002c76:	4620      	mov	r0, r4
 8002c78:	2100      	movs	r1, #0
 8002c7a:	f000 f811 	bl	8002ca0 <_swiopen>
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	4604      	mov	r4, r0
 8002c82:	d00b      	beq.n	8002c9c <_stat+0x36>
 8002c84:	686b      	ldr	r3, [r5, #4]
 8002c86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002c8a:	606b      	str	r3, [r5, #4]
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7ff ffbb 	bl	8002c08 <_swistat>
 8002c92:	4605      	mov	r5, r0
 8002c94:	4620      	mov	r0, r4
 8002c96:	f7ff ff95 	bl	8002bc4 <_close>
 8002c9a:	462c      	mov	r4, r5
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}

08002ca0 <_swiopen>:
 8002ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca4:	4f29      	ldr	r7, [pc, #164]	@ (8002d4c <_swiopen+0xac>)
 8002ca6:	b096      	sub	sp, #88	@ 0x58
 8002ca8:	4682      	mov	sl, r0
 8002caa:	460e      	mov	r6, r1
 8002cac:	2400      	movs	r4, #0
 8002cae:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002cb8:	d00c      	beq.n	8002cd4 <_swiopen+0x34>
 8002cba:	3401      	adds	r4, #1
 8002cbc:	2c14      	cmp	r4, #20
 8002cbe:	d1f6      	bne.n	8002cae <_swiopen+0xe>
 8002cc0:	f000 faaa 	bl	8003218 <__errno>
 8002cc4:	2318      	movs	r3, #24
 8002cc6:	6003      	str	r3, [r0, #0]
 8002cc8:	f04f 34ff 	mov.w	r4, #4294967295
 8002ccc:	4620      	mov	r0, r4
 8002cce:	b016      	add	sp, #88	@ 0x58
 8002cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cd4:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002cd8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002cdc:	46e9      	mov	r9, sp
 8002cde:	d109      	bne.n	8002cf4 <_swiopen+0x54>
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	4650      	mov	r0, sl
 8002ce4:	f7ff ffbf 	bl	8002c66 <_stat>
 8002ce8:	3001      	adds	r0, #1
 8002cea:	d003      	beq.n	8002cf4 <_swiopen+0x54>
 8002cec:	f000 fa94 	bl	8003218 <__errno>
 8002cf0:	2311      	movs	r3, #17
 8002cf2:	e7e8      	b.n	8002cc6 <_swiopen+0x26>
 8002cf4:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002cf8:	f240 6301 	movw	r3, #1537	@ 0x601
 8002cfc:	07b2      	lsls	r2, r6, #30
 8002cfe:	bf48      	it	mi
 8002d00:	f045 0502 	orrmi.w	r5, r5, #2
 8002d04:	421e      	tst	r6, r3
 8002d06:	bf18      	it	ne
 8002d08:	f045 0504 	orrne.w	r5, r5, #4
 8002d0c:	0733      	lsls	r3, r6, #28
 8002d0e:	bf48      	it	mi
 8002d10:	f025 0504 	bicmi.w	r5, r5, #4
 8002d14:	4650      	mov	r0, sl
 8002d16:	bf48      	it	mi
 8002d18:	f045 0508 	orrmi.w	r5, r5, #8
 8002d1c:	f8cd a000 	str.w	sl, [sp]
 8002d20:	f7fd fa66 	bl	80001f0 <strlen>
 8002d24:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002d28:	2501      	movs	r5, #1
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	beab      	bkpt	0x00ab
 8002d30:	4605      	mov	r5, r0
 8002d32:	2d00      	cmp	r5, #0
 8002d34:	db05      	blt.n	8002d42 <_swiopen+0xa2>
 8002d36:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002d3a:	4447      	add	r7, r8
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	e7c4      	b.n	8002ccc <_swiopen+0x2c>
 8002d42:	4628      	mov	r0, r5
 8002d44:	f7ff fe86 	bl	8002a54 <error>
 8002d48:	4604      	mov	r4, r0
 8002d4a:	e7bf      	b.n	8002ccc <_swiopen+0x2c>
 8002d4c:	20000100 	.word	0x20000100

08002d50 <_get_semihosting_exts>:
 8002d50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d54:	4606      	mov	r6, r0
 8002d56:	460f      	mov	r7, r1
 8002d58:	4829      	ldr	r0, [pc, #164]	@ (8002e00 <_get_semihosting_exts+0xb0>)
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4615      	mov	r5, r2
 8002d5e:	f7ff ff9f 	bl	8002ca0 <_swiopen>
 8002d62:	462a      	mov	r2, r5
 8002d64:	4604      	mov	r4, r0
 8002d66:	2100      	movs	r1, #0
 8002d68:	4630      	mov	r0, r6
 8002d6a:	f000 fa06 	bl	800317a <memset>
 8002d6e:	1c63      	adds	r3, r4, #1
 8002d70:	d014      	beq.n	8002d9c <_get_semihosting_exts+0x4c>
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7ff fe54 	bl	8002a20 <findslot>
 8002d78:	f04f 080c 	mov.w	r8, #12
 8002d7c:	4681      	mov	r9, r0
 8002d7e:	4640      	mov	r0, r8
 8002d80:	4649      	mov	r1, r9
 8002d82:	beab      	bkpt	0x00ab
 8002d84:	4680      	mov	r8, r0
 8002d86:	4640      	mov	r0, r8
 8002d88:	f7ff fe72 	bl	8002a70 <checkerror>
 8002d8c:	2803      	cmp	r0, #3
 8002d8e:	dd02      	ble.n	8002d96 <_get_semihosting_exts+0x46>
 8002d90:	1ec3      	subs	r3, r0, #3
 8002d92:	42ab      	cmp	r3, r5
 8002d94:	dc07      	bgt.n	8002da6 <_get_semihosting_exts+0x56>
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7ff ff14 	bl	8002bc4 <_close>
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	b003      	add	sp, #12
 8002da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002da6:	2204      	movs	r2, #4
 8002da8:	eb0d 0102 	add.w	r1, sp, r2
 8002dac:	4620      	mov	r0, r4
 8002dae:	f7ff fe74 	bl	8002a9a <_read>
 8002db2:	2803      	cmp	r0, #3
 8002db4:	ddef      	ble.n	8002d96 <_get_semihosting_exts+0x46>
 8002db6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002dba:	2b53      	cmp	r3, #83	@ 0x53
 8002dbc:	d1eb      	bne.n	8002d96 <_get_semihosting_exts+0x46>
 8002dbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002dc2:	2b48      	cmp	r3, #72	@ 0x48
 8002dc4:	d1e7      	bne.n	8002d96 <_get_semihosting_exts+0x46>
 8002dc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002dca:	2b46      	cmp	r3, #70	@ 0x46
 8002dcc:	d1e3      	bne.n	8002d96 <_get_semihosting_exts+0x46>
 8002dce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002dd2:	2b42      	cmp	r3, #66	@ 0x42
 8002dd4:	d1df      	bne.n	8002d96 <_get_semihosting_exts+0x46>
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4639      	mov	r1, r7
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff fe77 	bl	8002ace <_swilseek>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	dbd8      	blt.n	8002d96 <_get_semihosting_exts+0x46>
 8002de4:	462a      	mov	r2, r5
 8002de6:	4631      	mov	r1, r6
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff fe56 	bl	8002a9a <_read>
 8002dee:	4605      	mov	r5, r0
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7ff fee7 	bl	8002bc4 <_close>
 8002df6:	4628      	mov	r0, r5
 8002df8:	f7ff fe3a 	bl	8002a70 <checkerror>
 8002dfc:	e7d0      	b.n	8002da0 <_get_semihosting_exts+0x50>
 8002dfe:	bf00      	nop
 8002e00:	08003de4 	.word	0x08003de4

08002e04 <initialise_semihosting_exts>:
 8002e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e06:	4d0a      	ldr	r5, [pc, #40]	@ (8002e30 <initialise_semihosting_exts+0x2c>)
 8002e08:	4c0a      	ldr	r4, [pc, #40]	@ (8002e34 <initialise_semihosting_exts+0x30>)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	a801      	add	r0, sp, #4
 8002e10:	6029      	str	r1, [r5, #0]
 8002e12:	6022      	str	r2, [r4, #0]
 8002e14:	f7ff ff9c 	bl	8002d50 <_get_semihosting_exts>
 8002e18:	2800      	cmp	r0, #0
 8002e1a:	dd07      	ble.n	8002e2c <initialise_semihosting_exts+0x28>
 8002e1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e20:	f003 0201 	and.w	r2, r3, #1
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	602a      	str	r2, [r5, #0]
 8002e2a:	6023      	str	r3, [r4, #0]
 8002e2c:	b003      	add	sp, #12
 8002e2e:	bd30      	pop	{r4, r5, pc}
 8002e30:	20000014 	.word	0x20000014
 8002e34:	20000010 	.word	0x20000010

08002e38 <_has_ext_stdout_stderr>:
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	4c04      	ldr	r4, [pc, #16]	@ (8002e4c <_has_ext_stdout_stderr+0x14>)
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da01      	bge.n	8002e46 <_has_ext_stdout_stderr+0xe>
 8002e42:	f7ff ffdf 	bl	8002e04 <initialise_semihosting_exts>
 8002e46:	6820      	ldr	r0, [r4, #0]
 8002e48:	bd10      	pop	{r4, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000010 	.word	0x20000010

08002e50 <initialise_monitor_handles>:
 8002e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e54:	b085      	sub	sp, #20
 8002e56:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8002f08 <initialise_monitor_handles+0xb8>
 8002e5a:	f8cd 9004 	str.w	r9, [sp, #4]
 8002e5e:	2303      	movs	r3, #3
 8002e60:	2400      	movs	r4, #0
 8002e62:	9303      	str	r3, [sp, #12]
 8002e64:	af01      	add	r7, sp, #4
 8002e66:	9402      	str	r4, [sp, #8]
 8002e68:	2501      	movs	r5, #1
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	4639      	mov	r1, r7
 8002e6e:	beab      	bkpt	0x00ab
 8002e70:	4605      	mov	r5, r0
 8002e72:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002f0c <initialise_monitor_handles+0xbc>
 8002e76:	4623      	mov	r3, r4
 8002e78:	4c20      	ldr	r4, [pc, #128]	@ (8002efc <initialise_monitor_handles+0xac>)
 8002e7a:	f8c8 5000 	str.w	r5, [r8]
 8002e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e82:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002e86:	3301      	adds	r3, #1
 8002e88:	2b14      	cmp	r3, #20
 8002e8a:	d1fa      	bne.n	8002e82 <initialise_monitor_handles+0x32>
 8002e8c:	f7ff ffd4 	bl	8002e38 <_has_ext_stdout_stderr>
 8002e90:	4d1b      	ldr	r5, [pc, #108]	@ (8002f00 <initialise_monitor_handles+0xb0>)
 8002e92:	b1d0      	cbz	r0, 8002eca <initialise_monitor_handles+0x7a>
 8002e94:	f04f 0a03 	mov.w	sl, #3
 8002e98:	2304      	movs	r3, #4
 8002e9a:	f8cd 9004 	str.w	r9, [sp, #4]
 8002e9e:	2601      	movs	r6, #1
 8002ea0:	f8cd a00c 	str.w	sl, [sp, #12]
 8002ea4:	9302      	str	r3, [sp, #8]
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	4639      	mov	r1, r7
 8002eaa:	beab      	bkpt	0x00ab
 8002eac:	4683      	mov	fp, r0
 8002eae:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <initialise_monitor_handles+0xb4>)
 8002eb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8002eb4:	f8c3 b000 	str.w	fp, [r3]
 8002eb8:	2308      	movs	r3, #8
 8002eba:	f8cd a00c 	str.w	sl, [sp, #12]
 8002ebe:	9302      	str	r3, [sp, #8]
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	4639      	mov	r1, r7
 8002ec4:	beab      	bkpt	0x00ab
 8002ec6:	4606      	mov	r6, r0
 8002ec8:	602e      	str	r6, [r5, #0]
 8002eca:	682b      	ldr	r3, [r5, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	bf02      	ittt	eq
 8002ed0:	4b0c      	ldreq	r3, [pc, #48]	@ (8002f04 <initialise_monitor_handles+0xb4>)
 8002ed2:	681b      	ldreq	r3, [r3, #0]
 8002ed4:	602b      	streq	r3, [r5, #0]
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	6066      	str	r6, [r4, #4]
 8002ee0:	f7ff ffaa 	bl	8002e38 <_has_ext_stdout_stderr>
 8002ee4:	b130      	cbz	r0, 8002ef4 <initialise_monitor_handles+0xa4>
 8002ee6:	4b07      	ldr	r3, [pc, #28]	@ (8002f04 <initialise_monitor_handles+0xb4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002eee:	682b      	ldr	r3, [r5, #0]
 8002ef0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002ef4:	b005      	add	sp, #20
 8002ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002efa:	bf00      	nop
 8002efc:	20000100 	.word	0x20000100
 8002f00:	200000f4 	.word	0x200000f4
 8002f04:	200000f8 	.word	0x200000f8
 8002f08:	08003dfa 	.word	0x08003dfa
 8002f0c:	200000fc 	.word	0x200000fc

08002f10 <_isatty>:
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	f7ff fd85 	bl	8002a20 <findslot>
 8002f16:	2409      	movs	r4, #9
 8002f18:	4605      	mov	r5, r0
 8002f1a:	b920      	cbnz	r0, 8002f26 <_isatty+0x16>
 8002f1c:	f000 f97c 	bl	8003218 <__errno>
 8002f20:	6004      	str	r4, [r0, #0]
 8002f22:	2000      	movs	r0, #0
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	4620      	mov	r0, r4
 8002f28:	4629      	mov	r1, r5
 8002f2a:	beab      	bkpt	0x00ab
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	2c01      	cmp	r4, #1
 8002f30:	4620      	mov	r0, r4
 8002f32:	d0f7      	beq.n	8002f24 <_isatty+0x14>
 8002f34:	f000 f970 	bl	8003218 <__errno>
 8002f38:	2513      	movs	r5, #19
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	4628      	mov	r0, r5
 8002f40:	4631      	mov	r1, r6
 8002f42:	beab      	bkpt	0x00ab
 8002f44:	4605      	mov	r5, r0
 8002f46:	6025      	str	r5, [r4, #0]
 8002f48:	e7eb      	b.n	8002f22 <_isatty+0x12>
	...

08002f4c <std>:
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	b510      	push	{r4, lr}
 8002f50:	4604      	mov	r4, r0
 8002f52:	e9c0 3300 	strd	r3, r3, [r0]
 8002f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f5a:	6083      	str	r3, [r0, #8]
 8002f5c:	8181      	strh	r1, [r0, #12]
 8002f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f60:	81c2      	strh	r2, [r0, #14]
 8002f62:	6183      	str	r3, [r0, #24]
 8002f64:	4619      	mov	r1, r3
 8002f66:	2208      	movs	r2, #8
 8002f68:	305c      	adds	r0, #92	@ 0x5c
 8002f6a:	f000 f906 	bl	800317a <memset>
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa4 <std+0x58>)
 8002f70:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f72:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <std+0x5c>)
 8002f74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <std+0x60>)
 8002f78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb0 <std+0x64>)
 8002f7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <std+0x68>)
 8002f80:	6224      	str	r4, [r4, #32]
 8002f82:	429c      	cmp	r4, r3
 8002f84:	d006      	beq.n	8002f94 <std+0x48>
 8002f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f8a:	4294      	cmp	r4, r2
 8002f8c:	d002      	beq.n	8002f94 <std+0x48>
 8002f8e:	33d0      	adds	r3, #208	@ 0xd0
 8002f90:	429c      	cmp	r4, r3
 8002f92:	d105      	bne.n	8002fa0 <std+0x54>
 8002f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f9c:	f000 b966 	b.w	800326c <__retarget_lock_init_recursive>
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	bf00      	nop
 8002fa4:	080030f5 	.word	0x080030f5
 8002fa8:	08003117 	.word	0x08003117
 8002fac:	0800314f 	.word	0x0800314f
 8002fb0:	08003173 	.word	0x08003173
 8002fb4:	200001a0 	.word	0x200001a0

08002fb8 <stdio_exit_handler>:
 8002fb8:	4a02      	ldr	r2, [pc, #8]	@ (8002fc4 <stdio_exit_handler+0xc>)
 8002fba:	4903      	ldr	r1, [pc, #12]	@ (8002fc8 <stdio_exit_handler+0x10>)
 8002fbc:	4803      	ldr	r0, [pc, #12]	@ (8002fcc <stdio_exit_handler+0x14>)
 8002fbe:	f000 b869 	b.w	8003094 <_fwalk_sglue>
 8002fc2:	bf00      	nop
 8002fc4:	20000018 	.word	0x20000018
 8002fc8:	08003b0d 	.word	0x08003b0d
 8002fcc:	20000028 	.word	0x20000028

08002fd0 <cleanup_stdio>:
 8002fd0:	6841      	ldr	r1, [r0, #4]
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <cleanup_stdio+0x34>)
 8002fd4:	4299      	cmp	r1, r3
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	4604      	mov	r4, r0
 8002fda:	d001      	beq.n	8002fe0 <cleanup_stdio+0x10>
 8002fdc:	f000 fd96 	bl	8003b0c <_fflush_r>
 8002fe0:	68a1      	ldr	r1, [r4, #8]
 8002fe2:	4b09      	ldr	r3, [pc, #36]	@ (8003008 <cleanup_stdio+0x38>)
 8002fe4:	4299      	cmp	r1, r3
 8002fe6:	d002      	beq.n	8002fee <cleanup_stdio+0x1e>
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 fd8f 	bl	8003b0c <_fflush_r>
 8002fee:	68e1      	ldr	r1, [r4, #12]
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <cleanup_stdio+0x3c>)
 8002ff2:	4299      	cmp	r1, r3
 8002ff4:	d004      	beq.n	8003000 <cleanup_stdio+0x30>
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ffc:	f000 bd86 	b.w	8003b0c <_fflush_r>
 8003000:	bd10      	pop	{r4, pc}
 8003002:	bf00      	nop
 8003004:	200001a0 	.word	0x200001a0
 8003008:	20000208 	.word	0x20000208
 800300c:	20000270 	.word	0x20000270

08003010 <global_stdio_init.part.0>:
 8003010:	b510      	push	{r4, lr}
 8003012:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <global_stdio_init.part.0+0x30>)
 8003014:	4c0b      	ldr	r4, [pc, #44]	@ (8003044 <global_stdio_init.part.0+0x34>)
 8003016:	4a0c      	ldr	r2, [pc, #48]	@ (8003048 <global_stdio_init.part.0+0x38>)
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	4620      	mov	r0, r4
 800301c:	2200      	movs	r2, #0
 800301e:	2104      	movs	r1, #4
 8003020:	f7ff ff94 	bl	8002f4c <std>
 8003024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003028:	2201      	movs	r2, #1
 800302a:	2109      	movs	r1, #9
 800302c:	f7ff ff8e 	bl	8002f4c <std>
 8003030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003034:	2202      	movs	r2, #2
 8003036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800303a:	2112      	movs	r1, #18
 800303c:	f7ff bf86 	b.w	8002f4c <std>
 8003040:	200002d8 	.word	0x200002d8
 8003044:	200001a0 	.word	0x200001a0
 8003048:	08002fb9 	.word	0x08002fb9

0800304c <__sfp_lock_acquire>:
 800304c:	4801      	ldr	r0, [pc, #4]	@ (8003054 <__sfp_lock_acquire+0x8>)
 800304e:	f000 b90e 	b.w	800326e <__retarget_lock_acquire_recursive>
 8003052:	bf00      	nop
 8003054:	200002e1 	.word	0x200002e1

08003058 <__sfp_lock_release>:
 8003058:	4801      	ldr	r0, [pc, #4]	@ (8003060 <__sfp_lock_release+0x8>)
 800305a:	f000 b909 	b.w	8003270 <__retarget_lock_release_recursive>
 800305e:	bf00      	nop
 8003060:	200002e1 	.word	0x200002e1

08003064 <__sinit>:
 8003064:	b510      	push	{r4, lr}
 8003066:	4604      	mov	r4, r0
 8003068:	f7ff fff0 	bl	800304c <__sfp_lock_acquire>
 800306c:	6a23      	ldr	r3, [r4, #32]
 800306e:	b11b      	cbz	r3, 8003078 <__sinit+0x14>
 8003070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003074:	f7ff bff0 	b.w	8003058 <__sfp_lock_release>
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <__sinit+0x28>)
 800307a:	6223      	str	r3, [r4, #32]
 800307c:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <__sinit+0x2c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f5      	bne.n	8003070 <__sinit+0xc>
 8003084:	f7ff ffc4 	bl	8003010 <global_stdio_init.part.0>
 8003088:	e7f2      	b.n	8003070 <__sinit+0xc>
 800308a:	bf00      	nop
 800308c:	08002fd1 	.word	0x08002fd1
 8003090:	200002d8 	.word	0x200002d8

08003094 <_fwalk_sglue>:
 8003094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003098:	4607      	mov	r7, r0
 800309a:	4688      	mov	r8, r1
 800309c:	4614      	mov	r4, r2
 800309e:	2600      	movs	r6, #0
 80030a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030a4:	f1b9 0901 	subs.w	r9, r9, #1
 80030a8:	d505      	bpl.n	80030b6 <_fwalk_sglue+0x22>
 80030aa:	6824      	ldr	r4, [r4, #0]
 80030ac:	2c00      	cmp	r4, #0
 80030ae:	d1f7      	bne.n	80030a0 <_fwalk_sglue+0xc>
 80030b0:	4630      	mov	r0, r6
 80030b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030b6:	89ab      	ldrh	r3, [r5, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d907      	bls.n	80030cc <_fwalk_sglue+0x38>
 80030bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030c0:	3301      	adds	r3, #1
 80030c2:	d003      	beq.n	80030cc <_fwalk_sglue+0x38>
 80030c4:	4629      	mov	r1, r5
 80030c6:	4638      	mov	r0, r7
 80030c8:	47c0      	blx	r8
 80030ca:	4306      	orrs	r6, r0
 80030cc:	3568      	adds	r5, #104	@ 0x68
 80030ce:	e7e9      	b.n	80030a4 <_fwalk_sglue+0x10>

080030d0 <iprintf>:
 80030d0:	b40f      	push	{r0, r1, r2, r3}
 80030d2:	b507      	push	{r0, r1, r2, lr}
 80030d4:	4906      	ldr	r1, [pc, #24]	@ (80030f0 <iprintf+0x20>)
 80030d6:	ab04      	add	r3, sp, #16
 80030d8:	6808      	ldr	r0, [r1, #0]
 80030da:	f853 2b04 	ldr.w	r2, [r3], #4
 80030de:	6881      	ldr	r1, [r0, #8]
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	f000 f9e9 	bl	80034b8 <_vfiprintf_r>
 80030e6:	b003      	add	sp, #12
 80030e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80030ec:	b004      	add	sp, #16
 80030ee:	4770      	bx	lr
 80030f0:	20000024 	.word	0x20000024

080030f4 <__sread>:
 80030f4:	b510      	push	{r4, lr}
 80030f6:	460c      	mov	r4, r1
 80030f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030fc:	f000 f868 	bl	80031d0 <_read_r>
 8003100:	2800      	cmp	r0, #0
 8003102:	bfab      	itete	ge
 8003104:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003106:	89a3      	ldrhlt	r3, [r4, #12]
 8003108:	181b      	addge	r3, r3, r0
 800310a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800310e:	bfac      	ite	ge
 8003110:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003112:	81a3      	strhlt	r3, [r4, #12]
 8003114:	bd10      	pop	{r4, pc}

08003116 <__swrite>:
 8003116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800311a:	461f      	mov	r7, r3
 800311c:	898b      	ldrh	r3, [r1, #12]
 800311e:	05db      	lsls	r3, r3, #23
 8003120:	4605      	mov	r5, r0
 8003122:	460c      	mov	r4, r1
 8003124:	4616      	mov	r6, r2
 8003126:	d505      	bpl.n	8003134 <__swrite+0x1e>
 8003128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800312c:	2302      	movs	r3, #2
 800312e:	2200      	movs	r2, #0
 8003130:	f000 f83c 	bl	80031ac <_lseek_r>
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800313a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800313e:	81a3      	strh	r3, [r4, #12]
 8003140:	4632      	mov	r2, r6
 8003142:	463b      	mov	r3, r7
 8003144:	4628      	mov	r0, r5
 8003146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800314a:	f000 b853 	b.w	80031f4 <_write_r>

0800314e <__sseek>:
 800314e:	b510      	push	{r4, lr}
 8003150:	460c      	mov	r4, r1
 8003152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003156:	f000 f829 	bl	80031ac <_lseek_r>
 800315a:	1c43      	adds	r3, r0, #1
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	bf15      	itete	ne
 8003160:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003162:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003166:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800316a:	81a3      	strheq	r3, [r4, #12]
 800316c:	bf18      	it	ne
 800316e:	81a3      	strhne	r3, [r4, #12]
 8003170:	bd10      	pop	{r4, pc}

08003172 <__sclose>:
 8003172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003176:	f000 b809 	b.w	800318c <_close_r>

0800317a <memset>:
 800317a:	4402      	add	r2, r0
 800317c:	4603      	mov	r3, r0
 800317e:	4293      	cmp	r3, r2
 8003180:	d100      	bne.n	8003184 <memset+0xa>
 8003182:	4770      	bx	lr
 8003184:	f803 1b01 	strb.w	r1, [r3], #1
 8003188:	e7f9      	b.n	800317e <memset+0x4>
	...

0800318c <_close_r>:
 800318c:	b538      	push	{r3, r4, r5, lr}
 800318e:	4d06      	ldr	r5, [pc, #24]	@ (80031a8 <_close_r+0x1c>)
 8003190:	2300      	movs	r3, #0
 8003192:	4604      	mov	r4, r0
 8003194:	4608      	mov	r0, r1
 8003196:	602b      	str	r3, [r5, #0]
 8003198:	f7ff fd14 	bl	8002bc4 <_close>
 800319c:	1c43      	adds	r3, r0, #1
 800319e:	d102      	bne.n	80031a6 <_close_r+0x1a>
 80031a0:	682b      	ldr	r3, [r5, #0]
 80031a2:	b103      	cbz	r3, 80031a6 <_close_r+0x1a>
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
 80031a8:	200002dc 	.word	0x200002dc

080031ac <_lseek_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	4d07      	ldr	r5, [pc, #28]	@ (80031cc <_lseek_r+0x20>)
 80031b0:	4604      	mov	r4, r0
 80031b2:	4608      	mov	r0, r1
 80031b4:	4611      	mov	r1, r2
 80031b6:	2200      	movs	r2, #0
 80031b8:	602a      	str	r2, [r5, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f7ff fcc3 	bl	8002b46 <_lseek>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d102      	bne.n	80031ca <_lseek_r+0x1e>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	b103      	cbz	r3, 80031ca <_lseek_r+0x1e>
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	200002dc 	.word	0x200002dc

080031d0 <_read_r>:
 80031d0:	b538      	push	{r3, r4, r5, lr}
 80031d2:	4d07      	ldr	r5, [pc, #28]	@ (80031f0 <_read_r+0x20>)
 80031d4:	4604      	mov	r4, r0
 80031d6:	4608      	mov	r0, r1
 80031d8:	4611      	mov	r1, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	602a      	str	r2, [r5, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	f7ff fc5b 	bl	8002a9a <_read>
 80031e4:	1c43      	adds	r3, r0, #1
 80031e6:	d102      	bne.n	80031ee <_read_r+0x1e>
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	b103      	cbz	r3, 80031ee <_read_r+0x1e>
 80031ec:	6023      	str	r3, [r4, #0]
 80031ee:	bd38      	pop	{r3, r4, r5, pc}
 80031f0:	200002dc 	.word	0x200002dc

080031f4 <_write_r>:
 80031f4:	b538      	push	{r3, r4, r5, lr}
 80031f6:	4d07      	ldr	r5, [pc, #28]	@ (8003214 <_write_r+0x20>)
 80031f8:	4604      	mov	r4, r0
 80031fa:	4608      	mov	r0, r1
 80031fc:	4611      	mov	r1, r2
 80031fe:	2200      	movs	r2, #0
 8003200:	602a      	str	r2, [r5, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	f7ff fcb1 	bl	8002b6a <_write>
 8003208:	1c43      	adds	r3, r0, #1
 800320a:	d102      	bne.n	8003212 <_write_r+0x1e>
 800320c:	682b      	ldr	r3, [r5, #0]
 800320e:	b103      	cbz	r3, 8003212 <_write_r+0x1e>
 8003210:	6023      	str	r3, [r4, #0]
 8003212:	bd38      	pop	{r3, r4, r5, pc}
 8003214:	200002dc 	.word	0x200002dc

08003218 <__errno>:
 8003218:	4b01      	ldr	r3, [pc, #4]	@ (8003220 <__errno+0x8>)
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000024 	.word	0x20000024

08003224 <__libc_init_array>:
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	4d0d      	ldr	r5, [pc, #52]	@ (800325c <__libc_init_array+0x38>)
 8003228:	4c0d      	ldr	r4, [pc, #52]	@ (8003260 <__libc_init_array+0x3c>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	2600      	movs	r6, #0
 8003230:	42a6      	cmp	r6, r4
 8003232:	d109      	bne.n	8003248 <__libc_init_array+0x24>
 8003234:	4d0b      	ldr	r5, [pc, #44]	@ (8003264 <__libc_init_array+0x40>)
 8003236:	4c0c      	ldr	r4, [pc, #48]	@ (8003268 <__libc_init_array+0x44>)
 8003238:	f000 fdb8 	bl	8003dac <_init>
 800323c:	1b64      	subs	r4, r4, r5
 800323e:	10a4      	asrs	r4, r4, #2
 8003240:	2600      	movs	r6, #0
 8003242:	42a6      	cmp	r6, r4
 8003244:	d105      	bne.n	8003252 <__libc_init_array+0x2e>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	f855 3b04 	ldr.w	r3, [r5], #4
 800324c:	4798      	blx	r3
 800324e:	3601      	adds	r6, #1
 8003250:	e7ee      	b.n	8003230 <__libc_init_array+0xc>
 8003252:	f855 3b04 	ldr.w	r3, [r5], #4
 8003256:	4798      	blx	r3
 8003258:	3601      	adds	r6, #1
 800325a:	e7f2      	b.n	8003242 <__libc_init_array+0x1e>
 800325c:	08003e3c 	.word	0x08003e3c
 8003260:	08003e3c 	.word	0x08003e3c
 8003264:	08003e3c 	.word	0x08003e3c
 8003268:	08003e40 	.word	0x08003e40

0800326c <__retarget_lock_init_recursive>:
 800326c:	4770      	bx	lr

0800326e <__retarget_lock_acquire_recursive>:
 800326e:	4770      	bx	lr

08003270 <__retarget_lock_release_recursive>:
 8003270:	4770      	bx	lr
	...

08003274 <_free_r>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	4605      	mov	r5, r0
 8003278:	2900      	cmp	r1, #0
 800327a:	d041      	beq.n	8003300 <_free_r+0x8c>
 800327c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003280:	1f0c      	subs	r4, r1, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	bfb8      	it	lt
 8003286:	18e4      	addlt	r4, r4, r3
 8003288:	f000 f8e0 	bl	800344c <__malloc_lock>
 800328c:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <_free_r+0x90>)
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	b933      	cbnz	r3, 80032a0 <_free_r+0x2c>
 8003292:	6063      	str	r3, [r4, #4]
 8003294:	6014      	str	r4, [r2, #0]
 8003296:	4628      	mov	r0, r5
 8003298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800329c:	f000 b8dc 	b.w	8003458 <__malloc_unlock>
 80032a0:	42a3      	cmp	r3, r4
 80032a2:	d908      	bls.n	80032b6 <_free_r+0x42>
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	1821      	adds	r1, r4, r0
 80032a8:	428b      	cmp	r3, r1
 80032aa:	bf01      	itttt	eq
 80032ac:	6819      	ldreq	r1, [r3, #0]
 80032ae:	685b      	ldreq	r3, [r3, #4]
 80032b0:	1809      	addeq	r1, r1, r0
 80032b2:	6021      	streq	r1, [r4, #0]
 80032b4:	e7ed      	b.n	8003292 <_free_r+0x1e>
 80032b6:	461a      	mov	r2, r3
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	b10b      	cbz	r3, 80032c0 <_free_r+0x4c>
 80032bc:	42a3      	cmp	r3, r4
 80032be:	d9fa      	bls.n	80032b6 <_free_r+0x42>
 80032c0:	6811      	ldr	r1, [r2, #0]
 80032c2:	1850      	adds	r0, r2, r1
 80032c4:	42a0      	cmp	r0, r4
 80032c6:	d10b      	bne.n	80032e0 <_free_r+0x6c>
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	4401      	add	r1, r0
 80032cc:	1850      	adds	r0, r2, r1
 80032ce:	4283      	cmp	r3, r0
 80032d0:	6011      	str	r1, [r2, #0]
 80032d2:	d1e0      	bne.n	8003296 <_free_r+0x22>
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	6053      	str	r3, [r2, #4]
 80032da:	4408      	add	r0, r1
 80032dc:	6010      	str	r0, [r2, #0]
 80032de:	e7da      	b.n	8003296 <_free_r+0x22>
 80032e0:	d902      	bls.n	80032e8 <_free_r+0x74>
 80032e2:	230c      	movs	r3, #12
 80032e4:	602b      	str	r3, [r5, #0]
 80032e6:	e7d6      	b.n	8003296 <_free_r+0x22>
 80032e8:	6820      	ldr	r0, [r4, #0]
 80032ea:	1821      	adds	r1, r4, r0
 80032ec:	428b      	cmp	r3, r1
 80032ee:	bf04      	itt	eq
 80032f0:	6819      	ldreq	r1, [r3, #0]
 80032f2:	685b      	ldreq	r3, [r3, #4]
 80032f4:	6063      	str	r3, [r4, #4]
 80032f6:	bf04      	itt	eq
 80032f8:	1809      	addeq	r1, r1, r0
 80032fa:	6021      	streq	r1, [r4, #0]
 80032fc:	6054      	str	r4, [r2, #4]
 80032fe:	e7ca      	b.n	8003296 <_free_r+0x22>
 8003300:	bd38      	pop	{r3, r4, r5, pc}
 8003302:	bf00      	nop
 8003304:	200002e8 	.word	0x200002e8

08003308 <sbrk_aligned>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	4e0f      	ldr	r6, [pc, #60]	@ (8003348 <sbrk_aligned+0x40>)
 800330c:	460c      	mov	r4, r1
 800330e:	6831      	ldr	r1, [r6, #0]
 8003310:	4605      	mov	r5, r0
 8003312:	b911      	cbnz	r1, 800331a <sbrk_aligned+0x12>
 8003314:	f000 fcb6 	bl	8003c84 <_sbrk_r>
 8003318:	6030      	str	r0, [r6, #0]
 800331a:	4621      	mov	r1, r4
 800331c:	4628      	mov	r0, r5
 800331e:	f000 fcb1 	bl	8003c84 <_sbrk_r>
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	d103      	bne.n	800332e <sbrk_aligned+0x26>
 8003326:	f04f 34ff 	mov.w	r4, #4294967295
 800332a:	4620      	mov	r0, r4
 800332c:	bd70      	pop	{r4, r5, r6, pc}
 800332e:	1cc4      	adds	r4, r0, #3
 8003330:	f024 0403 	bic.w	r4, r4, #3
 8003334:	42a0      	cmp	r0, r4
 8003336:	d0f8      	beq.n	800332a <sbrk_aligned+0x22>
 8003338:	1a21      	subs	r1, r4, r0
 800333a:	4628      	mov	r0, r5
 800333c:	f000 fca2 	bl	8003c84 <_sbrk_r>
 8003340:	3001      	adds	r0, #1
 8003342:	d1f2      	bne.n	800332a <sbrk_aligned+0x22>
 8003344:	e7ef      	b.n	8003326 <sbrk_aligned+0x1e>
 8003346:	bf00      	nop
 8003348:	200002e4 	.word	0x200002e4

0800334c <_malloc_r>:
 800334c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003350:	1ccd      	adds	r5, r1, #3
 8003352:	f025 0503 	bic.w	r5, r5, #3
 8003356:	3508      	adds	r5, #8
 8003358:	2d0c      	cmp	r5, #12
 800335a:	bf38      	it	cc
 800335c:	250c      	movcc	r5, #12
 800335e:	2d00      	cmp	r5, #0
 8003360:	4606      	mov	r6, r0
 8003362:	db01      	blt.n	8003368 <_malloc_r+0x1c>
 8003364:	42a9      	cmp	r1, r5
 8003366:	d904      	bls.n	8003372 <_malloc_r+0x26>
 8003368:	230c      	movs	r3, #12
 800336a:	6033      	str	r3, [r6, #0]
 800336c:	2000      	movs	r0, #0
 800336e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003372:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003448 <_malloc_r+0xfc>
 8003376:	f000 f869 	bl	800344c <__malloc_lock>
 800337a:	f8d8 3000 	ldr.w	r3, [r8]
 800337e:	461c      	mov	r4, r3
 8003380:	bb44      	cbnz	r4, 80033d4 <_malloc_r+0x88>
 8003382:	4629      	mov	r1, r5
 8003384:	4630      	mov	r0, r6
 8003386:	f7ff ffbf 	bl	8003308 <sbrk_aligned>
 800338a:	1c43      	adds	r3, r0, #1
 800338c:	4604      	mov	r4, r0
 800338e:	d158      	bne.n	8003442 <_malloc_r+0xf6>
 8003390:	f8d8 4000 	ldr.w	r4, [r8]
 8003394:	4627      	mov	r7, r4
 8003396:	2f00      	cmp	r7, #0
 8003398:	d143      	bne.n	8003422 <_malloc_r+0xd6>
 800339a:	2c00      	cmp	r4, #0
 800339c:	d04b      	beq.n	8003436 <_malloc_r+0xea>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	4639      	mov	r1, r7
 80033a2:	4630      	mov	r0, r6
 80033a4:	eb04 0903 	add.w	r9, r4, r3
 80033a8:	f000 fc6c 	bl	8003c84 <_sbrk_r>
 80033ac:	4581      	cmp	r9, r0
 80033ae:	d142      	bne.n	8003436 <_malloc_r+0xea>
 80033b0:	6821      	ldr	r1, [r4, #0]
 80033b2:	1a6d      	subs	r5, r5, r1
 80033b4:	4629      	mov	r1, r5
 80033b6:	4630      	mov	r0, r6
 80033b8:	f7ff ffa6 	bl	8003308 <sbrk_aligned>
 80033bc:	3001      	adds	r0, #1
 80033be:	d03a      	beq.n	8003436 <_malloc_r+0xea>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	442b      	add	r3, r5
 80033c4:	6023      	str	r3, [r4, #0]
 80033c6:	f8d8 3000 	ldr.w	r3, [r8]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	bb62      	cbnz	r2, 8003428 <_malloc_r+0xdc>
 80033ce:	f8c8 7000 	str.w	r7, [r8]
 80033d2:	e00f      	b.n	80033f4 <_malloc_r+0xa8>
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	1b52      	subs	r2, r2, r5
 80033d8:	d420      	bmi.n	800341c <_malloc_r+0xd0>
 80033da:	2a0b      	cmp	r2, #11
 80033dc:	d917      	bls.n	800340e <_malloc_r+0xc2>
 80033de:	1961      	adds	r1, r4, r5
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	6025      	str	r5, [r4, #0]
 80033e4:	bf18      	it	ne
 80033e6:	6059      	strne	r1, [r3, #4]
 80033e8:	6863      	ldr	r3, [r4, #4]
 80033ea:	bf08      	it	eq
 80033ec:	f8c8 1000 	streq.w	r1, [r8]
 80033f0:	5162      	str	r2, [r4, r5]
 80033f2:	604b      	str	r3, [r1, #4]
 80033f4:	4630      	mov	r0, r6
 80033f6:	f000 f82f 	bl	8003458 <__malloc_unlock>
 80033fa:	f104 000b 	add.w	r0, r4, #11
 80033fe:	1d23      	adds	r3, r4, #4
 8003400:	f020 0007 	bic.w	r0, r0, #7
 8003404:	1ac2      	subs	r2, r0, r3
 8003406:	bf1c      	itt	ne
 8003408:	1a1b      	subne	r3, r3, r0
 800340a:	50a3      	strne	r3, [r4, r2]
 800340c:	e7af      	b.n	800336e <_malloc_r+0x22>
 800340e:	6862      	ldr	r2, [r4, #4]
 8003410:	42a3      	cmp	r3, r4
 8003412:	bf0c      	ite	eq
 8003414:	f8c8 2000 	streq.w	r2, [r8]
 8003418:	605a      	strne	r2, [r3, #4]
 800341a:	e7eb      	b.n	80033f4 <_malloc_r+0xa8>
 800341c:	4623      	mov	r3, r4
 800341e:	6864      	ldr	r4, [r4, #4]
 8003420:	e7ae      	b.n	8003380 <_malloc_r+0x34>
 8003422:	463c      	mov	r4, r7
 8003424:	687f      	ldr	r7, [r7, #4]
 8003426:	e7b6      	b.n	8003396 <_malloc_r+0x4a>
 8003428:	461a      	mov	r2, r3
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	42a3      	cmp	r3, r4
 800342e:	d1fb      	bne.n	8003428 <_malloc_r+0xdc>
 8003430:	2300      	movs	r3, #0
 8003432:	6053      	str	r3, [r2, #4]
 8003434:	e7de      	b.n	80033f4 <_malloc_r+0xa8>
 8003436:	230c      	movs	r3, #12
 8003438:	6033      	str	r3, [r6, #0]
 800343a:	4630      	mov	r0, r6
 800343c:	f000 f80c 	bl	8003458 <__malloc_unlock>
 8003440:	e794      	b.n	800336c <_malloc_r+0x20>
 8003442:	6005      	str	r5, [r0, #0]
 8003444:	e7d6      	b.n	80033f4 <_malloc_r+0xa8>
 8003446:	bf00      	nop
 8003448:	200002e8 	.word	0x200002e8

0800344c <__malloc_lock>:
 800344c:	4801      	ldr	r0, [pc, #4]	@ (8003454 <__malloc_lock+0x8>)
 800344e:	f7ff bf0e 	b.w	800326e <__retarget_lock_acquire_recursive>
 8003452:	bf00      	nop
 8003454:	200002e0 	.word	0x200002e0

08003458 <__malloc_unlock>:
 8003458:	4801      	ldr	r0, [pc, #4]	@ (8003460 <__malloc_unlock+0x8>)
 800345a:	f7ff bf09 	b.w	8003270 <__retarget_lock_release_recursive>
 800345e:	bf00      	nop
 8003460:	200002e0 	.word	0x200002e0

08003464 <__sfputc_r>:
 8003464:	6893      	ldr	r3, [r2, #8]
 8003466:	3b01      	subs	r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	b410      	push	{r4}
 800346c:	6093      	str	r3, [r2, #8]
 800346e:	da08      	bge.n	8003482 <__sfputc_r+0x1e>
 8003470:	6994      	ldr	r4, [r2, #24]
 8003472:	42a3      	cmp	r3, r4
 8003474:	db01      	blt.n	800347a <__sfputc_r+0x16>
 8003476:	290a      	cmp	r1, #10
 8003478:	d103      	bne.n	8003482 <__sfputc_r+0x1e>
 800347a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800347e:	f000 bb6d 	b.w	8003b5c <__swbuf_r>
 8003482:	6813      	ldr	r3, [r2, #0]
 8003484:	1c58      	adds	r0, r3, #1
 8003486:	6010      	str	r0, [r2, #0]
 8003488:	7019      	strb	r1, [r3, #0]
 800348a:	4608      	mov	r0, r1
 800348c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003490:	4770      	bx	lr

08003492 <__sfputs_r>:
 8003492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003494:	4606      	mov	r6, r0
 8003496:	460f      	mov	r7, r1
 8003498:	4614      	mov	r4, r2
 800349a:	18d5      	adds	r5, r2, r3
 800349c:	42ac      	cmp	r4, r5
 800349e:	d101      	bne.n	80034a4 <__sfputs_r+0x12>
 80034a0:	2000      	movs	r0, #0
 80034a2:	e007      	b.n	80034b4 <__sfputs_r+0x22>
 80034a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a8:	463a      	mov	r2, r7
 80034aa:	4630      	mov	r0, r6
 80034ac:	f7ff ffda 	bl	8003464 <__sfputc_r>
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d1f3      	bne.n	800349c <__sfputs_r+0xa>
 80034b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034b8 <_vfiprintf_r>:
 80034b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034bc:	460d      	mov	r5, r1
 80034be:	b09d      	sub	sp, #116	@ 0x74
 80034c0:	4614      	mov	r4, r2
 80034c2:	4698      	mov	r8, r3
 80034c4:	4606      	mov	r6, r0
 80034c6:	b118      	cbz	r0, 80034d0 <_vfiprintf_r+0x18>
 80034c8:	6a03      	ldr	r3, [r0, #32]
 80034ca:	b90b      	cbnz	r3, 80034d0 <_vfiprintf_r+0x18>
 80034cc:	f7ff fdca 	bl	8003064 <__sinit>
 80034d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034d2:	07d9      	lsls	r1, r3, #31
 80034d4:	d405      	bmi.n	80034e2 <_vfiprintf_r+0x2a>
 80034d6:	89ab      	ldrh	r3, [r5, #12]
 80034d8:	059a      	lsls	r2, r3, #22
 80034da:	d402      	bmi.n	80034e2 <_vfiprintf_r+0x2a>
 80034dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034de:	f7ff fec6 	bl	800326e <__retarget_lock_acquire_recursive>
 80034e2:	89ab      	ldrh	r3, [r5, #12]
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	d501      	bpl.n	80034ec <_vfiprintf_r+0x34>
 80034e8:	692b      	ldr	r3, [r5, #16]
 80034ea:	b99b      	cbnz	r3, 8003514 <_vfiprintf_r+0x5c>
 80034ec:	4629      	mov	r1, r5
 80034ee:	4630      	mov	r0, r6
 80034f0:	f000 fb72 	bl	8003bd8 <__swsetup_r>
 80034f4:	b170      	cbz	r0, 8003514 <_vfiprintf_r+0x5c>
 80034f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034f8:	07dc      	lsls	r4, r3, #31
 80034fa:	d504      	bpl.n	8003506 <_vfiprintf_r+0x4e>
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	b01d      	add	sp, #116	@ 0x74
 8003502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003506:	89ab      	ldrh	r3, [r5, #12]
 8003508:	0598      	lsls	r0, r3, #22
 800350a:	d4f7      	bmi.n	80034fc <_vfiprintf_r+0x44>
 800350c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800350e:	f7ff feaf 	bl	8003270 <__retarget_lock_release_recursive>
 8003512:	e7f3      	b.n	80034fc <_vfiprintf_r+0x44>
 8003514:	2300      	movs	r3, #0
 8003516:	9309      	str	r3, [sp, #36]	@ 0x24
 8003518:	2320      	movs	r3, #32
 800351a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800351e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003522:	2330      	movs	r3, #48	@ 0x30
 8003524:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80036d4 <_vfiprintf_r+0x21c>
 8003528:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800352c:	f04f 0901 	mov.w	r9, #1
 8003530:	4623      	mov	r3, r4
 8003532:	469a      	mov	sl, r3
 8003534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003538:	b10a      	cbz	r2, 800353e <_vfiprintf_r+0x86>
 800353a:	2a25      	cmp	r2, #37	@ 0x25
 800353c:	d1f9      	bne.n	8003532 <_vfiprintf_r+0x7a>
 800353e:	ebba 0b04 	subs.w	fp, sl, r4
 8003542:	d00b      	beq.n	800355c <_vfiprintf_r+0xa4>
 8003544:	465b      	mov	r3, fp
 8003546:	4622      	mov	r2, r4
 8003548:	4629      	mov	r1, r5
 800354a:	4630      	mov	r0, r6
 800354c:	f7ff ffa1 	bl	8003492 <__sfputs_r>
 8003550:	3001      	adds	r0, #1
 8003552:	f000 80a7 	beq.w	80036a4 <_vfiprintf_r+0x1ec>
 8003556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003558:	445a      	add	r2, fp
 800355a:	9209      	str	r2, [sp, #36]	@ 0x24
 800355c:	f89a 3000 	ldrb.w	r3, [sl]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 809f 	beq.w	80036a4 <_vfiprintf_r+0x1ec>
 8003566:	2300      	movs	r3, #0
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003570:	f10a 0a01 	add.w	sl, sl, #1
 8003574:	9304      	str	r3, [sp, #16]
 8003576:	9307      	str	r3, [sp, #28]
 8003578:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800357c:	931a      	str	r3, [sp, #104]	@ 0x68
 800357e:	4654      	mov	r4, sl
 8003580:	2205      	movs	r2, #5
 8003582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003586:	4853      	ldr	r0, [pc, #332]	@ (80036d4 <_vfiprintf_r+0x21c>)
 8003588:	f7fc fe3a 	bl	8000200 <memchr>
 800358c:	9a04      	ldr	r2, [sp, #16]
 800358e:	b9d8      	cbnz	r0, 80035c8 <_vfiprintf_r+0x110>
 8003590:	06d1      	lsls	r1, r2, #27
 8003592:	bf44      	itt	mi
 8003594:	2320      	movmi	r3, #32
 8003596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800359a:	0713      	lsls	r3, r2, #28
 800359c:	bf44      	itt	mi
 800359e:	232b      	movmi	r3, #43	@ 0x2b
 80035a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035a4:	f89a 3000 	ldrb.w	r3, [sl]
 80035a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80035aa:	d015      	beq.n	80035d8 <_vfiprintf_r+0x120>
 80035ac:	9a07      	ldr	r2, [sp, #28]
 80035ae:	4654      	mov	r4, sl
 80035b0:	2000      	movs	r0, #0
 80035b2:	f04f 0c0a 	mov.w	ip, #10
 80035b6:	4621      	mov	r1, r4
 80035b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035bc:	3b30      	subs	r3, #48	@ 0x30
 80035be:	2b09      	cmp	r3, #9
 80035c0:	d94b      	bls.n	800365a <_vfiprintf_r+0x1a2>
 80035c2:	b1b0      	cbz	r0, 80035f2 <_vfiprintf_r+0x13a>
 80035c4:	9207      	str	r2, [sp, #28]
 80035c6:	e014      	b.n	80035f2 <_vfiprintf_r+0x13a>
 80035c8:	eba0 0308 	sub.w	r3, r0, r8
 80035cc:	fa09 f303 	lsl.w	r3, r9, r3
 80035d0:	4313      	orrs	r3, r2
 80035d2:	9304      	str	r3, [sp, #16]
 80035d4:	46a2      	mov	sl, r4
 80035d6:	e7d2      	b.n	800357e <_vfiprintf_r+0xc6>
 80035d8:	9b03      	ldr	r3, [sp, #12]
 80035da:	1d19      	adds	r1, r3, #4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	9103      	str	r1, [sp, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bfbb      	ittet	lt
 80035e4:	425b      	neglt	r3, r3
 80035e6:	f042 0202 	orrlt.w	r2, r2, #2
 80035ea:	9307      	strge	r3, [sp, #28]
 80035ec:	9307      	strlt	r3, [sp, #28]
 80035ee:	bfb8      	it	lt
 80035f0:	9204      	strlt	r2, [sp, #16]
 80035f2:	7823      	ldrb	r3, [r4, #0]
 80035f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80035f6:	d10a      	bne.n	800360e <_vfiprintf_r+0x156>
 80035f8:	7863      	ldrb	r3, [r4, #1]
 80035fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80035fc:	d132      	bne.n	8003664 <_vfiprintf_r+0x1ac>
 80035fe:	9b03      	ldr	r3, [sp, #12]
 8003600:	1d1a      	adds	r2, r3, #4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	9203      	str	r2, [sp, #12]
 8003606:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800360a:	3402      	adds	r4, #2
 800360c:	9305      	str	r3, [sp, #20]
 800360e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80036e4 <_vfiprintf_r+0x22c>
 8003612:	7821      	ldrb	r1, [r4, #0]
 8003614:	2203      	movs	r2, #3
 8003616:	4650      	mov	r0, sl
 8003618:	f7fc fdf2 	bl	8000200 <memchr>
 800361c:	b138      	cbz	r0, 800362e <_vfiprintf_r+0x176>
 800361e:	9b04      	ldr	r3, [sp, #16]
 8003620:	eba0 000a 	sub.w	r0, r0, sl
 8003624:	2240      	movs	r2, #64	@ 0x40
 8003626:	4082      	lsls	r2, r0
 8003628:	4313      	orrs	r3, r2
 800362a:	3401      	adds	r4, #1
 800362c:	9304      	str	r3, [sp, #16]
 800362e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003632:	4829      	ldr	r0, [pc, #164]	@ (80036d8 <_vfiprintf_r+0x220>)
 8003634:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003638:	2206      	movs	r2, #6
 800363a:	f7fc fde1 	bl	8000200 <memchr>
 800363e:	2800      	cmp	r0, #0
 8003640:	d03f      	beq.n	80036c2 <_vfiprintf_r+0x20a>
 8003642:	4b26      	ldr	r3, [pc, #152]	@ (80036dc <_vfiprintf_r+0x224>)
 8003644:	bb1b      	cbnz	r3, 800368e <_vfiprintf_r+0x1d6>
 8003646:	9b03      	ldr	r3, [sp, #12]
 8003648:	3307      	adds	r3, #7
 800364a:	f023 0307 	bic.w	r3, r3, #7
 800364e:	3308      	adds	r3, #8
 8003650:	9303      	str	r3, [sp, #12]
 8003652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003654:	443b      	add	r3, r7
 8003656:	9309      	str	r3, [sp, #36]	@ 0x24
 8003658:	e76a      	b.n	8003530 <_vfiprintf_r+0x78>
 800365a:	fb0c 3202 	mla	r2, ip, r2, r3
 800365e:	460c      	mov	r4, r1
 8003660:	2001      	movs	r0, #1
 8003662:	e7a8      	b.n	80035b6 <_vfiprintf_r+0xfe>
 8003664:	2300      	movs	r3, #0
 8003666:	3401      	adds	r4, #1
 8003668:	9305      	str	r3, [sp, #20]
 800366a:	4619      	mov	r1, r3
 800366c:	f04f 0c0a 	mov.w	ip, #10
 8003670:	4620      	mov	r0, r4
 8003672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003676:	3a30      	subs	r2, #48	@ 0x30
 8003678:	2a09      	cmp	r2, #9
 800367a:	d903      	bls.n	8003684 <_vfiprintf_r+0x1cc>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0c6      	beq.n	800360e <_vfiprintf_r+0x156>
 8003680:	9105      	str	r1, [sp, #20]
 8003682:	e7c4      	b.n	800360e <_vfiprintf_r+0x156>
 8003684:	fb0c 2101 	mla	r1, ip, r1, r2
 8003688:	4604      	mov	r4, r0
 800368a:	2301      	movs	r3, #1
 800368c:	e7f0      	b.n	8003670 <_vfiprintf_r+0x1b8>
 800368e:	ab03      	add	r3, sp, #12
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	462a      	mov	r2, r5
 8003694:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <_vfiprintf_r+0x228>)
 8003696:	a904      	add	r1, sp, #16
 8003698:	4630      	mov	r0, r6
 800369a:	f3af 8000 	nop.w
 800369e:	4607      	mov	r7, r0
 80036a0:	1c78      	adds	r0, r7, #1
 80036a2:	d1d6      	bne.n	8003652 <_vfiprintf_r+0x19a>
 80036a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036a6:	07d9      	lsls	r1, r3, #31
 80036a8:	d405      	bmi.n	80036b6 <_vfiprintf_r+0x1fe>
 80036aa:	89ab      	ldrh	r3, [r5, #12]
 80036ac:	059a      	lsls	r2, r3, #22
 80036ae:	d402      	bmi.n	80036b6 <_vfiprintf_r+0x1fe>
 80036b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036b2:	f7ff fddd 	bl	8003270 <__retarget_lock_release_recursive>
 80036b6:	89ab      	ldrh	r3, [r5, #12]
 80036b8:	065b      	lsls	r3, r3, #25
 80036ba:	f53f af1f 	bmi.w	80034fc <_vfiprintf_r+0x44>
 80036be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036c0:	e71e      	b.n	8003500 <_vfiprintf_r+0x48>
 80036c2:	ab03      	add	r3, sp, #12
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	462a      	mov	r2, r5
 80036c8:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <_vfiprintf_r+0x228>)
 80036ca:	a904      	add	r1, sp, #16
 80036cc:	4630      	mov	r0, r6
 80036ce:	f000 f879 	bl	80037c4 <_printf_i>
 80036d2:	e7e4      	b.n	800369e <_vfiprintf_r+0x1e6>
 80036d4:	08003dfe 	.word	0x08003dfe
 80036d8:	08003e08 	.word	0x08003e08
 80036dc:	00000000 	.word	0x00000000
 80036e0:	08003493 	.word	0x08003493
 80036e4:	08003e04 	.word	0x08003e04

080036e8 <_printf_common>:
 80036e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036ec:	4616      	mov	r6, r2
 80036ee:	4698      	mov	r8, r3
 80036f0:	688a      	ldr	r2, [r1, #8]
 80036f2:	690b      	ldr	r3, [r1, #16]
 80036f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bfb8      	it	lt
 80036fc:	4613      	movlt	r3, r2
 80036fe:	6033      	str	r3, [r6, #0]
 8003700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003704:	4607      	mov	r7, r0
 8003706:	460c      	mov	r4, r1
 8003708:	b10a      	cbz	r2, 800370e <_printf_common+0x26>
 800370a:	3301      	adds	r3, #1
 800370c:	6033      	str	r3, [r6, #0]
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	0699      	lsls	r1, r3, #26
 8003712:	bf42      	ittt	mi
 8003714:	6833      	ldrmi	r3, [r6, #0]
 8003716:	3302      	addmi	r3, #2
 8003718:	6033      	strmi	r3, [r6, #0]
 800371a:	6825      	ldr	r5, [r4, #0]
 800371c:	f015 0506 	ands.w	r5, r5, #6
 8003720:	d106      	bne.n	8003730 <_printf_common+0x48>
 8003722:	f104 0a19 	add.w	sl, r4, #25
 8003726:	68e3      	ldr	r3, [r4, #12]
 8003728:	6832      	ldr	r2, [r6, #0]
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	42ab      	cmp	r3, r5
 800372e:	dc26      	bgt.n	800377e <_printf_common+0x96>
 8003730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	3b00      	subs	r3, #0
 8003738:	bf18      	it	ne
 800373a:	2301      	movne	r3, #1
 800373c:	0692      	lsls	r2, r2, #26
 800373e:	d42b      	bmi.n	8003798 <_printf_common+0xb0>
 8003740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003744:	4641      	mov	r1, r8
 8003746:	4638      	mov	r0, r7
 8003748:	47c8      	blx	r9
 800374a:	3001      	adds	r0, #1
 800374c:	d01e      	beq.n	800378c <_printf_common+0xa4>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	6922      	ldr	r2, [r4, #16]
 8003752:	f003 0306 	and.w	r3, r3, #6
 8003756:	2b04      	cmp	r3, #4
 8003758:	bf02      	ittt	eq
 800375a:	68e5      	ldreq	r5, [r4, #12]
 800375c:	6833      	ldreq	r3, [r6, #0]
 800375e:	1aed      	subeq	r5, r5, r3
 8003760:	68a3      	ldr	r3, [r4, #8]
 8003762:	bf0c      	ite	eq
 8003764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003768:	2500      	movne	r5, #0
 800376a:	4293      	cmp	r3, r2
 800376c:	bfc4      	itt	gt
 800376e:	1a9b      	subgt	r3, r3, r2
 8003770:	18ed      	addgt	r5, r5, r3
 8003772:	2600      	movs	r6, #0
 8003774:	341a      	adds	r4, #26
 8003776:	42b5      	cmp	r5, r6
 8003778:	d11a      	bne.n	80037b0 <_printf_common+0xc8>
 800377a:	2000      	movs	r0, #0
 800377c:	e008      	b.n	8003790 <_printf_common+0xa8>
 800377e:	2301      	movs	r3, #1
 8003780:	4652      	mov	r2, sl
 8003782:	4641      	mov	r1, r8
 8003784:	4638      	mov	r0, r7
 8003786:	47c8      	blx	r9
 8003788:	3001      	adds	r0, #1
 800378a:	d103      	bne.n	8003794 <_printf_common+0xac>
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003794:	3501      	adds	r5, #1
 8003796:	e7c6      	b.n	8003726 <_printf_common+0x3e>
 8003798:	18e1      	adds	r1, r4, r3
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	2030      	movs	r0, #48	@ 0x30
 800379e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80037a2:	4422      	add	r2, r4
 80037a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037ac:	3302      	adds	r3, #2
 80037ae:	e7c7      	b.n	8003740 <_printf_common+0x58>
 80037b0:	2301      	movs	r3, #1
 80037b2:	4622      	mov	r2, r4
 80037b4:	4641      	mov	r1, r8
 80037b6:	4638      	mov	r0, r7
 80037b8:	47c8      	blx	r9
 80037ba:	3001      	adds	r0, #1
 80037bc:	d0e6      	beq.n	800378c <_printf_common+0xa4>
 80037be:	3601      	adds	r6, #1
 80037c0:	e7d9      	b.n	8003776 <_printf_common+0x8e>
	...

080037c4 <_printf_i>:
 80037c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037c8:	7e0f      	ldrb	r7, [r1, #24]
 80037ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037cc:	2f78      	cmp	r7, #120	@ 0x78
 80037ce:	4691      	mov	r9, r2
 80037d0:	4680      	mov	r8, r0
 80037d2:	460c      	mov	r4, r1
 80037d4:	469a      	mov	sl, r3
 80037d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037da:	d807      	bhi.n	80037ec <_printf_i+0x28>
 80037dc:	2f62      	cmp	r7, #98	@ 0x62
 80037de:	d80a      	bhi.n	80037f6 <_printf_i+0x32>
 80037e0:	2f00      	cmp	r7, #0
 80037e2:	f000 80d2 	beq.w	800398a <_printf_i+0x1c6>
 80037e6:	2f58      	cmp	r7, #88	@ 0x58
 80037e8:	f000 80b9 	beq.w	800395e <_printf_i+0x19a>
 80037ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037f4:	e03a      	b.n	800386c <_printf_i+0xa8>
 80037f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037fa:	2b15      	cmp	r3, #21
 80037fc:	d8f6      	bhi.n	80037ec <_printf_i+0x28>
 80037fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003804 <_printf_i+0x40>)
 8003800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003804:	0800385d 	.word	0x0800385d
 8003808:	08003871 	.word	0x08003871
 800380c:	080037ed 	.word	0x080037ed
 8003810:	080037ed 	.word	0x080037ed
 8003814:	080037ed 	.word	0x080037ed
 8003818:	080037ed 	.word	0x080037ed
 800381c:	08003871 	.word	0x08003871
 8003820:	080037ed 	.word	0x080037ed
 8003824:	080037ed 	.word	0x080037ed
 8003828:	080037ed 	.word	0x080037ed
 800382c:	080037ed 	.word	0x080037ed
 8003830:	08003971 	.word	0x08003971
 8003834:	0800389b 	.word	0x0800389b
 8003838:	0800392b 	.word	0x0800392b
 800383c:	080037ed 	.word	0x080037ed
 8003840:	080037ed 	.word	0x080037ed
 8003844:	08003993 	.word	0x08003993
 8003848:	080037ed 	.word	0x080037ed
 800384c:	0800389b 	.word	0x0800389b
 8003850:	080037ed 	.word	0x080037ed
 8003854:	080037ed 	.word	0x080037ed
 8003858:	08003933 	.word	0x08003933
 800385c:	6833      	ldr	r3, [r6, #0]
 800385e:	1d1a      	adds	r2, r3, #4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6032      	str	r2, [r6, #0]
 8003864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800386c:	2301      	movs	r3, #1
 800386e:	e09d      	b.n	80039ac <_printf_i+0x1e8>
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	6820      	ldr	r0, [r4, #0]
 8003874:	1d19      	adds	r1, r3, #4
 8003876:	6031      	str	r1, [r6, #0]
 8003878:	0606      	lsls	r6, r0, #24
 800387a:	d501      	bpl.n	8003880 <_printf_i+0xbc>
 800387c:	681d      	ldr	r5, [r3, #0]
 800387e:	e003      	b.n	8003888 <_printf_i+0xc4>
 8003880:	0645      	lsls	r5, r0, #25
 8003882:	d5fb      	bpl.n	800387c <_printf_i+0xb8>
 8003884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003888:	2d00      	cmp	r5, #0
 800388a:	da03      	bge.n	8003894 <_printf_i+0xd0>
 800388c:	232d      	movs	r3, #45	@ 0x2d
 800388e:	426d      	negs	r5, r5
 8003890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003894:	4859      	ldr	r0, [pc, #356]	@ (80039fc <_printf_i+0x238>)
 8003896:	230a      	movs	r3, #10
 8003898:	e011      	b.n	80038be <_printf_i+0xfa>
 800389a:	6821      	ldr	r1, [r4, #0]
 800389c:	6833      	ldr	r3, [r6, #0]
 800389e:	0608      	lsls	r0, r1, #24
 80038a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80038a4:	d402      	bmi.n	80038ac <_printf_i+0xe8>
 80038a6:	0649      	lsls	r1, r1, #25
 80038a8:	bf48      	it	mi
 80038aa:	b2ad      	uxthmi	r5, r5
 80038ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80038ae:	4853      	ldr	r0, [pc, #332]	@ (80039fc <_printf_i+0x238>)
 80038b0:	6033      	str	r3, [r6, #0]
 80038b2:	bf14      	ite	ne
 80038b4:	230a      	movne	r3, #10
 80038b6:	2308      	moveq	r3, #8
 80038b8:	2100      	movs	r1, #0
 80038ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038be:	6866      	ldr	r6, [r4, #4]
 80038c0:	60a6      	str	r6, [r4, #8]
 80038c2:	2e00      	cmp	r6, #0
 80038c4:	bfa2      	ittt	ge
 80038c6:	6821      	ldrge	r1, [r4, #0]
 80038c8:	f021 0104 	bicge.w	r1, r1, #4
 80038cc:	6021      	strge	r1, [r4, #0]
 80038ce:	b90d      	cbnz	r5, 80038d4 <_printf_i+0x110>
 80038d0:	2e00      	cmp	r6, #0
 80038d2:	d04b      	beq.n	800396c <_printf_i+0x1a8>
 80038d4:	4616      	mov	r6, r2
 80038d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80038da:	fb03 5711 	mls	r7, r3, r1, r5
 80038de:	5dc7      	ldrb	r7, [r0, r7]
 80038e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038e4:	462f      	mov	r7, r5
 80038e6:	42bb      	cmp	r3, r7
 80038e8:	460d      	mov	r5, r1
 80038ea:	d9f4      	bls.n	80038d6 <_printf_i+0x112>
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d10b      	bne.n	8003908 <_printf_i+0x144>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	07df      	lsls	r7, r3, #31
 80038f4:	d508      	bpl.n	8003908 <_printf_i+0x144>
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	6861      	ldr	r1, [r4, #4]
 80038fa:	4299      	cmp	r1, r3
 80038fc:	bfde      	ittt	le
 80038fe:	2330      	movle	r3, #48	@ 0x30
 8003900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003908:	1b92      	subs	r2, r2, r6
 800390a:	6122      	str	r2, [r4, #16]
 800390c:	f8cd a000 	str.w	sl, [sp]
 8003910:	464b      	mov	r3, r9
 8003912:	aa03      	add	r2, sp, #12
 8003914:	4621      	mov	r1, r4
 8003916:	4640      	mov	r0, r8
 8003918:	f7ff fee6 	bl	80036e8 <_printf_common>
 800391c:	3001      	adds	r0, #1
 800391e:	d14a      	bne.n	80039b6 <_printf_i+0x1f2>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	b004      	add	sp, #16
 8003926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	f043 0320 	orr.w	r3, r3, #32
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	4833      	ldr	r0, [pc, #204]	@ (8003a00 <_printf_i+0x23c>)
 8003934:	2778      	movs	r7, #120	@ 0x78
 8003936:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	6831      	ldr	r1, [r6, #0]
 800393e:	061f      	lsls	r7, r3, #24
 8003940:	f851 5b04 	ldr.w	r5, [r1], #4
 8003944:	d402      	bmi.n	800394c <_printf_i+0x188>
 8003946:	065f      	lsls	r7, r3, #25
 8003948:	bf48      	it	mi
 800394a:	b2ad      	uxthmi	r5, r5
 800394c:	6031      	str	r1, [r6, #0]
 800394e:	07d9      	lsls	r1, r3, #31
 8003950:	bf44      	itt	mi
 8003952:	f043 0320 	orrmi.w	r3, r3, #32
 8003956:	6023      	strmi	r3, [r4, #0]
 8003958:	b11d      	cbz	r5, 8003962 <_printf_i+0x19e>
 800395a:	2310      	movs	r3, #16
 800395c:	e7ac      	b.n	80038b8 <_printf_i+0xf4>
 800395e:	4827      	ldr	r0, [pc, #156]	@ (80039fc <_printf_i+0x238>)
 8003960:	e7e9      	b.n	8003936 <_printf_i+0x172>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	f023 0320 	bic.w	r3, r3, #32
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	e7f6      	b.n	800395a <_printf_i+0x196>
 800396c:	4616      	mov	r6, r2
 800396e:	e7bd      	b.n	80038ec <_printf_i+0x128>
 8003970:	6833      	ldr	r3, [r6, #0]
 8003972:	6825      	ldr	r5, [r4, #0]
 8003974:	6961      	ldr	r1, [r4, #20]
 8003976:	1d18      	adds	r0, r3, #4
 8003978:	6030      	str	r0, [r6, #0]
 800397a:	062e      	lsls	r6, r5, #24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	d501      	bpl.n	8003984 <_printf_i+0x1c0>
 8003980:	6019      	str	r1, [r3, #0]
 8003982:	e002      	b.n	800398a <_printf_i+0x1c6>
 8003984:	0668      	lsls	r0, r5, #25
 8003986:	d5fb      	bpl.n	8003980 <_printf_i+0x1bc>
 8003988:	8019      	strh	r1, [r3, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	6123      	str	r3, [r4, #16]
 800398e:	4616      	mov	r6, r2
 8003990:	e7bc      	b.n	800390c <_printf_i+0x148>
 8003992:	6833      	ldr	r3, [r6, #0]
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	6032      	str	r2, [r6, #0]
 8003998:	681e      	ldr	r6, [r3, #0]
 800399a:	6862      	ldr	r2, [r4, #4]
 800399c:	2100      	movs	r1, #0
 800399e:	4630      	mov	r0, r6
 80039a0:	f7fc fc2e 	bl	8000200 <memchr>
 80039a4:	b108      	cbz	r0, 80039aa <_printf_i+0x1e6>
 80039a6:	1b80      	subs	r0, r0, r6
 80039a8:	6060      	str	r0, [r4, #4]
 80039aa:	6863      	ldr	r3, [r4, #4]
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039b4:	e7aa      	b.n	800390c <_printf_i+0x148>
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	4632      	mov	r2, r6
 80039ba:	4649      	mov	r1, r9
 80039bc:	4640      	mov	r0, r8
 80039be:	47d0      	blx	sl
 80039c0:	3001      	adds	r0, #1
 80039c2:	d0ad      	beq.n	8003920 <_printf_i+0x15c>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	079b      	lsls	r3, r3, #30
 80039c8:	d413      	bmi.n	80039f2 <_printf_i+0x22e>
 80039ca:	68e0      	ldr	r0, [r4, #12]
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	4298      	cmp	r0, r3
 80039d0:	bfb8      	it	lt
 80039d2:	4618      	movlt	r0, r3
 80039d4:	e7a6      	b.n	8003924 <_printf_i+0x160>
 80039d6:	2301      	movs	r3, #1
 80039d8:	4632      	mov	r2, r6
 80039da:	4649      	mov	r1, r9
 80039dc:	4640      	mov	r0, r8
 80039de:	47d0      	blx	sl
 80039e0:	3001      	adds	r0, #1
 80039e2:	d09d      	beq.n	8003920 <_printf_i+0x15c>
 80039e4:	3501      	adds	r5, #1
 80039e6:	68e3      	ldr	r3, [r4, #12]
 80039e8:	9903      	ldr	r1, [sp, #12]
 80039ea:	1a5b      	subs	r3, r3, r1
 80039ec:	42ab      	cmp	r3, r5
 80039ee:	dcf2      	bgt.n	80039d6 <_printf_i+0x212>
 80039f0:	e7eb      	b.n	80039ca <_printf_i+0x206>
 80039f2:	2500      	movs	r5, #0
 80039f4:	f104 0619 	add.w	r6, r4, #25
 80039f8:	e7f5      	b.n	80039e6 <_printf_i+0x222>
 80039fa:	bf00      	nop
 80039fc:	08003e0f 	.word	0x08003e0f
 8003a00:	08003e20 	.word	0x08003e20

08003a04 <__sflush_r>:
 8003a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0c:	0716      	lsls	r6, r2, #28
 8003a0e:	4605      	mov	r5, r0
 8003a10:	460c      	mov	r4, r1
 8003a12:	d454      	bmi.n	8003abe <__sflush_r+0xba>
 8003a14:	684b      	ldr	r3, [r1, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	dc02      	bgt.n	8003a20 <__sflush_r+0x1c>
 8003a1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	dd48      	ble.n	8003ab2 <__sflush_r+0xae>
 8003a20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a22:	2e00      	cmp	r6, #0
 8003a24:	d045      	beq.n	8003ab2 <__sflush_r+0xae>
 8003a26:	2300      	movs	r3, #0
 8003a28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a2c:	682f      	ldr	r7, [r5, #0]
 8003a2e:	6a21      	ldr	r1, [r4, #32]
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	d030      	beq.n	8003a96 <__sflush_r+0x92>
 8003a34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	0759      	lsls	r1, r3, #29
 8003a3a:	d505      	bpl.n	8003a48 <__sflush_r+0x44>
 8003a3c:	6863      	ldr	r3, [r4, #4]
 8003a3e:	1ad2      	subs	r2, r2, r3
 8003a40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a42:	b10b      	cbz	r3, 8003a48 <__sflush_r+0x44>
 8003a44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a46:	1ad2      	subs	r2, r2, r3
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a4c:	6a21      	ldr	r1, [r4, #32]
 8003a4e:	4628      	mov	r0, r5
 8003a50:	47b0      	blx	r6
 8003a52:	1c43      	adds	r3, r0, #1
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	d106      	bne.n	8003a66 <__sflush_r+0x62>
 8003a58:	6829      	ldr	r1, [r5, #0]
 8003a5a:	291d      	cmp	r1, #29
 8003a5c:	d82b      	bhi.n	8003ab6 <__sflush_r+0xb2>
 8003a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003b08 <__sflush_r+0x104>)
 8003a60:	410a      	asrs	r2, r1
 8003a62:	07d6      	lsls	r6, r2, #31
 8003a64:	d427      	bmi.n	8003ab6 <__sflush_r+0xb2>
 8003a66:	2200      	movs	r2, #0
 8003a68:	6062      	str	r2, [r4, #4]
 8003a6a:	04d9      	lsls	r1, r3, #19
 8003a6c:	6922      	ldr	r2, [r4, #16]
 8003a6e:	6022      	str	r2, [r4, #0]
 8003a70:	d504      	bpl.n	8003a7c <__sflush_r+0x78>
 8003a72:	1c42      	adds	r2, r0, #1
 8003a74:	d101      	bne.n	8003a7a <__sflush_r+0x76>
 8003a76:	682b      	ldr	r3, [r5, #0]
 8003a78:	b903      	cbnz	r3, 8003a7c <__sflush_r+0x78>
 8003a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a7e:	602f      	str	r7, [r5, #0]
 8003a80:	b1b9      	cbz	r1, 8003ab2 <__sflush_r+0xae>
 8003a82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a86:	4299      	cmp	r1, r3
 8003a88:	d002      	beq.n	8003a90 <__sflush_r+0x8c>
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f7ff fbf2 	bl	8003274 <_free_r>
 8003a90:	2300      	movs	r3, #0
 8003a92:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a94:	e00d      	b.n	8003ab2 <__sflush_r+0xae>
 8003a96:	2301      	movs	r3, #1
 8003a98:	4628      	mov	r0, r5
 8003a9a:	47b0      	blx	r6
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	1c50      	adds	r0, r2, #1
 8003aa0:	d1c9      	bne.n	8003a36 <__sflush_r+0x32>
 8003aa2:	682b      	ldr	r3, [r5, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0c6      	beq.n	8003a36 <__sflush_r+0x32>
 8003aa8:	2b1d      	cmp	r3, #29
 8003aaa:	d001      	beq.n	8003ab0 <__sflush_r+0xac>
 8003aac:	2b16      	cmp	r3, #22
 8003aae:	d11e      	bne.n	8003aee <__sflush_r+0xea>
 8003ab0:	602f      	str	r7, [r5, #0]
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	e022      	b.n	8003afc <__sflush_r+0xf8>
 8003ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aba:	b21b      	sxth	r3, r3
 8003abc:	e01b      	b.n	8003af6 <__sflush_r+0xf2>
 8003abe:	690f      	ldr	r7, [r1, #16]
 8003ac0:	2f00      	cmp	r7, #0
 8003ac2:	d0f6      	beq.n	8003ab2 <__sflush_r+0xae>
 8003ac4:	0793      	lsls	r3, r2, #30
 8003ac6:	680e      	ldr	r6, [r1, #0]
 8003ac8:	bf08      	it	eq
 8003aca:	694b      	ldreq	r3, [r1, #20]
 8003acc:	600f      	str	r7, [r1, #0]
 8003ace:	bf18      	it	ne
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	eba6 0807 	sub.w	r8, r6, r7
 8003ad6:	608b      	str	r3, [r1, #8]
 8003ad8:	f1b8 0f00 	cmp.w	r8, #0
 8003adc:	dde9      	ble.n	8003ab2 <__sflush_r+0xae>
 8003ade:	6a21      	ldr	r1, [r4, #32]
 8003ae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003ae2:	4643      	mov	r3, r8
 8003ae4:	463a      	mov	r2, r7
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	47b0      	blx	r6
 8003aea:	2800      	cmp	r0, #0
 8003aec:	dc08      	bgt.n	8003b00 <__sflush_r+0xfc>
 8003aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af6:	81a3      	strh	r3, [r4, #12]
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b00:	4407      	add	r7, r0
 8003b02:	eba8 0800 	sub.w	r8, r8, r0
 8003b06:	e7e7      	b.n	8003ad8 <__sflush_r+0xd4>
 8003b08:	dfbffffe 	.word	0xdfbffffe

08003b0c <_fflush_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	690b      	ldr	r3, [r1, #16]
 8003b10:	4605      	mov	r5, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	b913      	cbnz	r3, 8003b1c <_fflush_r+0x10>
 8003b16:	2500      	movs	r5, #0
 8003b18:	4628      	mov	r0, r5
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	b118      	cbz	r0, 8003b26 <_fflush_r+0x1a>
 8003b1e:	6a03      	ldr	r3, [r0, #32]
 8003b20:	b90b      	cbnz	r3, 8003b26 <_fflush_r+0x1a>
 8003b22:	f7ff fa9f 	bl	8003064 <__sinit>
 8003b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f3      	beq.n	8003b16 <_fflush_r+0xa>
 8003b2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b30:	07d0      	lsls	r0, r2, #31
 8003b32:	d404      	bmi.n	8003b3e <_fflush_r+0x32>
 8003b34:	0599      	lsls	r1, r3, #22
 8003b36:	d402      	bmi.n	8003b3e <_fflush_r+0x32>
 8003b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b3a:	f7ff fb98 	bl	800326e <__retarget_lock_acquire_recursive>
 8003b3e:	4628      	mov	r0, r5
 8003b40:	4621      	mov	r1, r4
 8003b42:	f7ff ff5f 	bl	8003a04 <__sflush_r>
 8003b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b48:	07da      	lsls	r2, r3, #31
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	d4e4      	bmi.n	8003b18 <_fflush_r+0xc>
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	059b      	lsls	r3, r3, #22
 8003b52:	d4e1      	bmi.n	8003b18 <_fflush_r+0xc>
 8003b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b56:	f7ff fb8b 	bl	8003270 <__retarget_lock_release_recursive>
 8003b5a:	e7dd      	b.n	8003b18 <_fflush_r+0xc>

08003b5c <__swbuf_r>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	460e      	mov	r6, r1
 8003b60:	4614      	mov	r4, r2
 8003b62:	4605      	mov	r5, r0
 8003b64:	b118      	cbz	r0, 8003b6e <__swbuf_r+0x12>
 8003b66:	6a03      	ldr	r3, [r0, #32]
 8003b68:	b90b      	cbnz	r3, 8003b6e <__swbuf_r+0x12>
 8003b6a:	f7ff fa7b 	bl	8003064 <__sinit>
 8003b6e:	69a3      	ldr	r3, [r4, #24]
 8003b70:	60a3      	str	r3, [r4, #8]
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	071a      	lsls	r2, r3, #28
 8003b76:	d501      	bpl.n	8003b7c <__swbuf_r+0x20>
 8003b78:	6923      	ldr	r3, [r4, #16]
 8003b7a:	b943      	cbnz	r3, 8003b8e <__swbuf_r+0x32>
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f000 f82a 	bl	8003bd8 <__swsetup_r>
 8003b84:	b118      	cbz	r0, 8003b8e <__swbuf_r+0x32>
 8003b86:	f04f 37ff 	mov.w	r7, #4294967295
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	6922      	ldr	r2, [r4, #16]
 8003b92:	1a98      	subs	r0, r3, r2
 8003b94:	6963      	ldr	r3, [r4, #20]
 8003b96:	b2f6      	uxtb	r6, r6
 8003b98:	4283      	cmp	r3, r0
 8003b9a:	4637      	mov	r7, r6
 8003b9c:	dc05      	bgt.n	8003baa <__swbuf_r+0x4e>
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	f7ff ffb3 	bl	8003b0c <_fflush_r>
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d1ed      	bne.n	8003b86 <__swbuf_r+0x2a>
 8003baa:	68a3      	ldr	r3, [r4, #8]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	60a3      	str	r3, [r4, #8]
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	6022      	str	r2, [r4, #0]
 8003bb6:	701e      	strb	r6, [r3, #0]
 8003bb8:	6962      	ldr	r2, [r4, #20]
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d004      	beq.n	8003bca <__swbuf_r+0x6e>
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	07db      	lsls	r3, r3, #31
 8003bc4:	d5e1      	bpl.n	8003b8a <__swbuf_r+0x2e>
 8003bc6:	2e0a      	cmp	r6, #10
 8003bc8:	d1df      	bne.n	8003b8a <__swbuf_r+0x2e>
 8003bca:	4621      	mov	r1, r4
 8003bcc:	4628      	mov	r0, r5
 8003bce:	f7ff ff9d 	bl	8003b0c <_fflush_r>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d0d9      	beq.n	8003b8a <__swbuf_r+0x2e>
 8003bd6:	e7d6      	b.n	8003b86 <__swbuf_r+0x2a>

08003bd8 <__swsetup_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4b29      	ldr	r3, [pc, #164]	@ (8003c80 <__swsetup_r+0xa8>)
 8003bdc:	4605      	mov	r5, r0
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	460c      	mov	r4, r1
 8003be2:	b118      	cbz	r0, 8003bec <__swsetup_r+0x14>
 8003be4:	6a03      	ldr	r3, [r0, #32]
 8003be6:	b90b      	cbnz	r3, 8003bec <__swsetup_r+0x14>
 8003be8:	f7ff fa3c 	bl	8003064 <__sinit>
 8003bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bf0:	0719      	lsls	r1, r3, #28
 8003bf2:	d422      	bmi.n	8003c3a <__swsetup_r+0x62>
 8003bf4:	06da      	lsls	r2, r3, #27
 8003bf6:	d407      	bmi.n	8003c08 <__swsetup_r+0x30>
 8003bf8:	2209      	movs	r2, #9
 8003bfa:	602a      	str	r2, [r5, #0]
 8003bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c00:	81a3      	strh	r3, [r4, #12]
 8003c02:	f04f 30ff 	mov.w	r0, #4294967295
 8003c06:	e033      	b.n	8003c70 <__swsetup_r+0x98>
 8003c08:	0758      	lsls	r0, r3, #29
 8003c0a:	d512      	bpl.n	8003c32 <__swsetup_r+0x5a>
 8003c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c0e:	b141      	cbz	r1, 8003c22 <__swsetup_r+0x4a>
 8003c10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c14:	4299      	cmp	r1, r3
 8003c16:	d002      	beq.n	8003c1e <__swsetup_r+0x46>
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f7ff fb2b 	bl	8003274 <_free_r>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c28:	81a3      	strh	r3, [r4, #12]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	6923      	ldr	r3, [r4, #16]
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	89a3      	ldrh	r3, [r4, #12]
 8003c34:	f043 0308 	orr.w	r3, r3, #8
 8003c38:	81a3      	strh	r3, [r4, #12]
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	b94b      	cbnz	r3, 8003c52 <__swsetup_r+0x7a>
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c48:	d003      	beq.n	8003c52 <__swsetup_r+0x7a>
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f000 f84f 	bl	8003cf0 <__smakebuf_r>
 8003c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c56:	f013 0201 	ands.w	r2, r3, #1
 8003c5a:	d00a      	beq.n	8003c72 <__swsetup_r+0x9a>
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60a2      	str	r2, [r4, #8]
 8003c60:	6962      	ldr	r2, [r4, #20]
 8003c62:	4252      	negs	r2, r2
 8003c64:	61a2      	str	r2, [r4, #24]
 8003c66:	6922      	ldr	r2, [r4, #16]
 8003c68:	b942      	cbnz	r2, 8003c7c <__swsetup_r+0xa4>
 8003c6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c6e:	d1c5      	bne.n	8003bfc <__swsetup_r+0x24>
 8003c70:	bd38      	pop	{r3, r4, r5, pc}
 8003c72:	0799      	lsls	r1, r3, #30
 8003c74:	bf58      	it	pl
 8003c76:	6962      	ldrpl	r2, [r4, #20]
 8003c78:	60a2      	str	r2, [r4, #8]
 8003c7a:	e7f4      	b.n	8003c66 <__swsetup_r+0x8e>
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	e7f7      	b.n	8003c70 <__swsetup_r+0x98>
 8003c80:	20000024 	.word	0x20000024

08003c84 <_sbrk_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	4d06      	ldr	r5, [pc, #24]	@ (8003ca0 <_sbrk_r+0x1c>)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	f7fd f898 	bl	8000dc4 <_sbrk>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d102      	bne.n	8003c9e <_sbrk_r+0x1a>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	b103      	cbz	r3, 8003c9e <_sbrk_r+0x1a>
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	200002dc 	.word	0x200002dc

08003ca4 <__swhatbuf_r>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cac:	2900      	cmp	r1, #0
 8003cae:	b096      	sub	sp, #88	@ 0x58
 8003cb0:	4615      	mov	r5, r2
 8003cb2:	461e      	mov	r6, r3
 8003cb4:	da0d      	bge.n	8003cd2 <__swhatbuf_r+0x2e>
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	bf14      	ite	ne
 8003cc2:	2340      	movne	r3, #64	@ 0x40
 8003cc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003cc8:	2000      	movs	r0, #0
 8003cca:	6031      	str	r1, [r6, #0]
 8003ccc:	602b      	str	r3, [r5, #0]
 8003cce:	b016      	add	sp, #88	@ 0x58
 8003cd0:	bd70      	pop	{r4, r5, r6, pc}
 8003cd2:	466a      	mov	r2, sp
 8003cd4:	f000 f848 	bl	8003d68 <_fstat_r>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	dbec      	blt.n	8003cb6 <__swhatbuf_r+0x12>
 8003cdc:	9901      	ldr	r1, [sp, #4]
 8003cde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003ce2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003ce6:	4259      	negs	r1, r3
 8003ce8:	4159      	adcs	r1, r3
 8003cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cee:	e7eb      	b.n	8003cc8 <__swhatbuf_r+0x24>

08003cf0 <__smakebuf_r>:
 8003cf0:	898b      	ldrh	r3, [r1, #12]
 8003cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cf4:	079d      	lsls	r5, r3, #30
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	d507      	bpl.n	8003d0c <__smakebuf_r+0x1c>
 8003cfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	6123      	str	r3, [r4, #16]
 8003d04:	2301      	movs	r3, #1
 8003d06:	6163      	str	r3, [r4, #20]
 8003d08:	b003      	add	sp, #12
 8003d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0c:	ab01      	add	r3, sp, #4
 8003d0e:	466a      	mov	r2, sp
 8003d10:	f7ff ffc8 	bl	8003ca4 <__swhatbuf_r>
 8003d14:	9f00      	ldr	r7, [sp, #0]
 8003d16:	4605      	mov	r5, r0
 8003d18:	4639      	mov	r1, r7
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f7ff fb16 	bl	800334c <_malloc_r>
 8003d20:	b948      	cbnz	r0, 8003d36 <__smakebuf_r+0x46>
 8003d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d26:	059a      	lsls	r2, r3, #22
 8003d28:	d4ee      	bmi.n	8003d08 <__smakebuf_r+0x18>
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	f043 0302 	orr.w	r3, r3, #2
 8003d32:	81a3      	strh	r3, [r4, #12]
 8003d34:	e7e2      	b.n	8003cfc <__smakebuf_r+0xc>
 8003d36:	89a3      	ldrh	r3, [r4, #12]
 8003d38:	6020      	str	r0, [r4, #0]
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	9b01      	ldr	r3, [sp, #4]
 8003d42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d46:	b15b      	cbz	r3, 8003d60 <__smakebuf_r+0x70>
 8003d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f000 f81d 	bl	8003d8c <_isatty_r>
 8003d52:	b128      	cbz	r0, 8003d60 <__smakebuf_r+0x70>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	81a3      	strh	r3, [r4, #12]
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	431d      	orrs	r5, r3
 8003d64:	81a5      	strh	r5, [r4, #12]
 8003d66:	e7cf      	b.n	8003d08 <__smakebuf_r+0x18>

08003d68 <_fstat_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4d07      	ldr	r5, [pc, #28]	@ (8003d88 <_fstat_r+0x20>)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	4604      	mov	r4, r0
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	f7fe ff68 	bl	8002c4a <_fstat>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	d102      	bne.n	8003d84 <_fstat_r+0x1c>
 8003d7e:	682b      	ldr	r3, [r5, #0]
 8003d80:	b103      	cbz	r3, 8003d84 <_fstat_r+0x1c>
 8003d82:	6023      	str	r3, [r4, #0]
 8003d84:	bd38      	pop	{r3, r4, r5, pc}
 8003d86:	bf00      	nop
 8003d88:	200002dc 	.word	0x200002dc

08003d8c <_isatty_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4d06      	ldr	r5, [pc, #24]	@ (8003da8 <_isatty_r+0x1c>)
 8003d90:	2300      	movs	r3, #0
 8003d92:	4604      	mov	r4, r0
 8003d94:	4608      	mov	r0, r1
 8003d96:	602b      	str	r3, [r5, #0]
 8003d98:	f7ff f8ba 	bl	8002f10 <_isatty>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_isatty_r+0x1a>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_isatty_r+0x1a>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	200002dc 	.word	0x200002dc

08003dac <_init>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr

08003db8 <_fini>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr
