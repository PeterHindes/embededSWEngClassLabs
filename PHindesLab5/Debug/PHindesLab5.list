
PHindesLab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003b1c  08003b1c  00004b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c2c  08003c2c  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c34  08003c34  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c34  08003c34  00004c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003c3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005070  2**0
                  CONTENTS
 10 .bss          00000278  20000070  20000070  00005070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  00005070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006ce6  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001874  00000000  00000000  0000bd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  0000d600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000538  00000000  00000000  0000dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002472e  00000000  00000000  0000e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bc8  00000000  00000000  00032996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d22d7  00000000  00000000  0003c55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e835  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000262c  00000000  00000000  0010e878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00110ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003b04 	.word	0x08003b04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003b04 	.word	0x08003b04

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <applicationInit>:
 *      Author: user
 */

#include <ApplicationCode.h>

void applicationInit(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	printf("\nInitializing Gyro\n");
 8000594:	4808      	ldr	r0, [pc, #32]	@ (80005b8 <applicationInit+0x28>)
 8000596:	f002 fc1d 	bl	8002dd4 <puts>
	Gyro_Init();
 800059a:	f000 f93d 	bl	8000818 <Gyro_Init>
	printf("Done\n");
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <applicationInit+0x2c>)
 80005a0:	f002 fc18 	bl	8002dd4 <puts>
	printf("\nInitializing Button\n");
 80005a4:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <applicationInit+0x30>)
 80005a6:	f002 fc15 	bl	8002dd4 <puts>
	BUT_Init();
 80005aa:	f000 f80b 	bl	80005c4 <BUT_Init>
	printf("Done\n");
 80005ae:	4803      	ldr	r0, [pc, #12]	@ (80005bc <applicationInit+0x2c>)
 80005b0:	f002 fc10 	bl	8002dd4 <puts>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	08003b1c 	.word	0x08003b1c
 80005bc:	08003b30 	.word	0x08003b30
 80005c0:	08003b38 	.word	0x08003b38

080005c4 <BUT_Init>:
 *      Author: user
 */

#include <ButtonDriver.h>

void BUT_Init(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	4b17      	ldr	r3, [pc, #92]	@ (800062c <BUT_Init+0x68>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a16      	ldr	r2, [pc, #88]	@ (800062c <BUT_Init+0x68>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <BUT_Init+0x68>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f4:	2301      	movs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005fc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4619      	mov	r1, r3
 8000606:	480a      	ldr	r0, [pc, #40]	@ (8000630 <BUT_Init+0x6c>)
 8000608:	f000 fd70 	bl	80010ec <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2102      	movs	r1, #2
 8000610:	2006      	movs	r0, #6
 8000612:	f000 fd34 	bl	800107e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000616:	2006      	movs	r0, #6
 8000618:	f000 fd4d 	bl	80010b6 <HAL_NVIC_EnableIRQ>

	printf("Button Interrupt Enabled\n");
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <BUT_Init+0x70>)
 800061e:	f002 fbd9 	bl	8002dd4 <puts>
}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000
 8000634:	08003b50 	.word	0x08003b50

08000638 <APPLICATION_ASSERT>:
 *      Author: user
 */

#include <ErrorHandling.h>

void APPLICATION_ASSERT(bool pass){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	if(!pass) {
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f083 0301 	eor.w	r3, r3, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <APPLICATION_ASSERT+0x24>
		printf("\n\nAsert Failed!!!!\n");
 800064e:	4809      	ldr	r0, [pc, #36]	@ (8000674 <APPLICATION_ASSERT+0x3c>)
 8000650:	f002 fbc0 	bl	8002dd4 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
		__disable_irq();
	}
	while (!pass){
 8000658:	e000      	b.n	800065c <APPLICATION_ASSERT+0x24>
		continue;
 800065a:	bf00      	nop
	while (!pass){
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f083 0301 	eor.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f8      	bne.n	800065a <APPLICATION_ASSERT+0x22>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08003b6c 	.word	0x08003b6c

08000678 <SPI5_Init>:
 */
#include <Gyro.h>

SPI_HandleTypeDef smhspi5;
void SPI5_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <SPI5_Init+0xc8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a2e      	ldr	r2, [pc, #184]	@ (8000740 <SPI5_Init+0xc8>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SPI5_Init+0xc8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <SPI5_Init+0xc8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a27      	ldr	r2, [pc, #156]	@ (8000740 <SPI5_Init+0xc8>)
 80006a4:	f043 0320 	orr.w	r3, r3, #32
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <SPI5_Init+0xc8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

	smhspi5.Instance = SPI5;
 80006b6:	4b23      	ldr	r3, [pc, #140]	@ (8000744 <SPI5_Init+0xcc>)
 80006b8:	4a23      	ldr	r2, [pc, #140]	@ (8000748 <SPI5_Init+0xd0>)
 80006ba:	601a      	str	r2, [r3, #0]
	smhspi5.Init.Mode = SPI_MODE_MASTER;
 80006bc:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <SPI5_Init+0xcc>)
 80006be:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c2:	605a      	str	r2, [r3, #4]
	smhspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <SPI5_Init+0xcc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
	smhspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <SPI5_Init+0xcc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
	smhspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <SPI5_Init+0xcc>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	611a      	str	r2, [r3, #16]
	smhspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <SPI5_Init+0xcc>)
 80006d8:	2201      	movs	r2, #1
 80006da:	615a      	str	r2, [r3, #20]
	smhspi5.Init.NSS = SPI_NSS_SOFT;
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <SPI5_Init+0xcc>)
 80006de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e2:	619a      	str	r2, [r3, #24]
	smhspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e4:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <SPI5_Init+0xcc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
	smhspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <SPI5_Init+0xcc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
	smhspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <SPI5_Init+0xcc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	@ 0x24
	smhspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <SPI5_Init+0xcc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	629a      	str	r2, [r3, #40]	@ 0x28
	smhspi5.Init.CRCPolynomial = 10;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <SPI5_Init+0xcc>)
 80006fe:	220a      	movs	r2, #10
 8000700:	62da      	str	r2, [r3, #44]	@ 0x2c
	APPLICATION_ASSERT(HAL_SPI_Init(&smhspi5) == HAL_OK);
 8000702:	4810      	ldr	r0, [pc, #64]	@ (8000744 <SPI5_Init+0xcc>)
 8000704:	f001 fb4c 	bl	8001da0 <HAL_SPI_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf0c      	ite	eq
 800070e:	2301      	moveq	r3, #1
 8000710:	2300      	movne	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff8f 	bl	8000638 <APPLICATION_ASSERT>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GYRO_CS_PIN_NUM;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GYRO_CS_PORT, &GPIO_InitStruct);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4619      	mov	r1, r3
 8000730:	4806      	ldr	r0, [pc, #24]	@ (800074c <SPI5_Init+0xd4>)
 8000732:	f000 fcdb 	bl	80010ec <HAL_GPIO_Init>
}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	2000008c 	.word	0x2000008c
 8000748:	40015000 	.word	0x40015000
 800074c:	40020800 	.word	0x40020800

08000750 <Gyro_Write>:
void Gyro_Write(uint8_t addr, uint8_t data){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	71bb      	strb	r3, [r7, #6]
	uint8_t  tx [2] = {(GYRO_WRITE_BIT | addr) , data};
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	733b      	strb	r3, [r7, #12]
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	737b      	strb	r3, [r7, #13]

	Gyro_Enable_Slave_Comms();
 8000768:	f000 f900 	bl	800096c <Gyro_Enable_Slave_Comms>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(&smhspi5, (uint8_t*) &tx, 2, 1000);
 800076c:	f107 010c 	add.w	r1, r7, #12
 8000770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000774:	2202      	movs	r2, #2
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <Gyro_Write+0x6c>)
 8000778:	f001 fb9b 	bl	8001eb2 <HAL_SPI_Transmit>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
	Gyro_Disable_Slave_Comms();
 8000780:	f000 f90a 	bl	8000998 <Gyro_Disable_Slave_Comms>
	Gyro_Await_Spi_Status(status);
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f8de 	bl	8000948 <Gyro_Await_Spi_Status>
	Gyro_Verify_Spi_Status(status);
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f8c8 	bl	8000924 <Gyro_Verify_Spi_Status>

	uint8_t returnedData = Gyro_Read(addr);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f814 	bl	80007c4 <Gyro_Read>
 800079c:	4603      	mov	r3, r0
 800079e:	73bb      	strb	r3, [r7, #14]
	if (returnedData != data){
 80007a0:	7bba      	ldrb	r2, [r7, #14]
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d005      	beq.n	80007b4 <Gyro_Write+0x64>
		printf("\n\nFailure to Write, Sent: %X But Got: %X\n\n",data, returnedData);
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	7bba      	ldrb	r2, [r7, #14]
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <Gyro_Write+0x70>)
 80007b0:	f002 faa0 	bl	8002cf4 <iprintf>
	}
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000008c 	.word	0x2000008c
 80007c0:	08003b80 	.word	0x08003b80

080007c4 <Gyro_Read>:
uint8_t Gyro_Read(uint8_t addr){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = (GYRO_READ_BIT | addr);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	73bb      	strb	r3, [r7, #14]

	uint8_t RX_Buffer[2];
	Gyro_Enable_Slave_Comms();
 80007d8:	f000 f8c8 	bl	800096c <Gyro_Enable_Slave_Comms>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&smhspi5, & tx, RX_Buffer, 2, HAL_MAX_DELAY);
 80007dc:	f107 020c 	add.w	r2, r7, #12
 80007e0:	f107 010e 	add.w	r1, r7, #14
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2302      	movs	r3, #2
 80007ec:	4809      	ldr	r0, [pc, #36]	@ (8000814 <Gyro_Read+0x50>)
 80007ee:	f001 fca4 	bl	800213a <HAL_SPI_TransmitReceive>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]
	Gyro_Disable_Slave_Comms();
 80007f6:	f000 f8cf 	bl	8000998 <Gyro_Disable_Slave_Comms>
	Gyro_Await_Spi_Status(status);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f8a3 	bl	8000948 <Gyro_Await_Spi_Status>
	Gyro_Verify_Spi_Status(status);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f88d 	bl	8000924 <Gyro_Verify_Spi_Status>

	return RX_Buffer[1];
 800080a:	7b7b      	ldrb	r3, [r7, #13]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000008c 	.word	0x2000008c

08000818 <Gyro_Init>:

void Gyro_Init(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	SPI5_Init();
 800081c:	f7ff ff2c 	bl	8000678 <SPI5_Init>

	HAL_Delay(500);
 8000820:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000824:	f000 fb2c 	bl	8000e80 <HAL_Delay>

	Gyro_Power_On();
 8000828:	f000 f808 	bl	800083c <Gyro_Power_On>
	Gyro_Enable_Fifo();
 800082c:	f000 f80e 	bl	800084c <Gyro_Enable_Fifo>

	HAL_Delay(500);
 8000830:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000834:	f000 fb24 	bl	8000e80 <HAL_Delay>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <Gyro_Power_On>:
void Gyro_Power_On(){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	// Set on bit and bandwith to 01 leaving the rest default
	Gyro_Write(GYRO_CTRL_REG1, 0b00011000);
 8000840:	2118      	movs	r1, #24
 8000842:	2020      	movs	r0, #32
 8000844:	f7ff ff84 	bl	8000750 <Gyro_Write>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <Gyro_Enable_Fifo>:
void Gyro_Enable_Fifo(){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	uint8_t temp = Gyro_Read(0b0100100);
 8000852:	2024      	movs	r0, #36	@ 0x24
 8000854:	f7ff ffb6 	bl	80007c4 <Gyro_Read>
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
	temp |= 0b01000000;
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000862:	71fb      	strb	r3, [r7, #7]
	Gyro_Write(0b0100100, temp);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4619      	mov	r1, r3
 8000868:	2024      	movs	r0, #36	@ 0x24
 800086a:	f7ff ff71 	bl	8000750 <Gyro_Write>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <Gyro_Get_Id>:
void Gyro_Get_Id(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	printf("ID: %X\n", Gyro_Read(GYRO_WHO_AM_I));
 800087c:	200f      	movs	r0, #15
 800087e:	f7ff ffa1 	bl	80007c4 <Gyro_Read>
 8000882:	4603      	mov	r3, r0
 8000884:	4619      	mov	r1, r3
 8000886:	4802      	ldr	r0, [pc, #8]	@ (8000890 <Gyro_Get_Id+0x18>)
 8000888:	f002 fa34 	bl	8002cf4 <iprintf>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08003bac 	.word	0x08003bac

08000894 <convert_to_celsius>:
int16_t convert_to_celsius(int8_t sensor_value) {
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
    // celcius
    const int16_t TEMP_MIN = -40;
 800089e:	f64f 73d8 	movw	r3, #65496	@ 0xffd8
 80008a2:	82fb      	strh	r3, [r7, #22]
    const int16_t TEMP_MAX = 85;
 80008a4:	2355      	movs	r3, #85	@ 0x55
 80008a6:	82bb      	strh	r3, [r7, #20]

    const int16_t temp_range = TEMP_MAX-TEMP_MIN;
 80008a8:	8aba      	ldrh	r2, [r7, #20]
 80008aa:	8afb      	ldrh	r3, [r7, #22]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	827b      	strh	r3, [r7, #18]
    const int16_t sensor_range = 255;
 80008b2:	23ff      	movs	r3, #255	@ 0xff
 80008b4:	823b      	strh	r3, [r7, #16]

    int16_t temperature_celsius = TEMP_MAX - ((sensor_value + (sensor_range/2)) * temp_range) / sensor_range;
 80008b6:	8aba      	ldrh	r2, [r7, #20]
 80008b8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80008bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008c0:	0fd8      	lsrs	r0, r3, #31
 80008c2:	4403      	add	r3, r0
 80008c4:	105b      	asrs	r3, r3, #1
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	440b      	add	r3, r1
 80008ca:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80008ce:	fb03 f101 	mul.w	r1, r3, r1
 80008d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008d6:	fb91 f3f3 	sdiv	r3, r1, r3
 80008da:	b29b      	uxth	r3, r3
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	b29b      	uxth	r3, r3
 80008e0:	81fb      	strh	r3, [r7, #14]

    return temperature_celsius;
 80008e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	371c      	adds	r7, #28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <Gyro_Get_Temp>:
void Gyro_Get_Temp(){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	int8_t temp = Gyro_Read(0b0100110);
 80008fa:	2026      	movs	r0, #38	@ 0x26
 80008fc:	f7ff ff62 	bl	80007c4 <Gyro_Read>
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
	printf("Temperature: %d deg C\n", convert_to_celsius(temp));
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ffc3 	bl	8000894 <convert_to_celsius>
 800090e:	4603      	mov	r3, r0
 8000910:	4619      	mov	r1, r3
 8000912:	4803      	ldr	r0, [pc, #12]	@ (8000920 <Gyro_Get_Temp+0x2c>)
 8000914:	f002 f9ee 	bl	8002cf4 <iprintf>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	08003bb4 	.word	0x08003bb4

08000924 <Gyro_Verify_Spi_Status>:
void Gyro_Verify_Spi_Status(HAL_StatusTypeDef status){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	APPLICATION_ASSERT(status == HAL_OK);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf0c      	ite	eq
 8000934:	2301      	moveq	r3, #1
 8000936:	2300      	movne	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe7c 	bl	8000638 <APPLICATION_ASSERT>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <Gyro_Await_Spi_Status>:
void Gyro_Await_Spi_Status(HAL_StatusTypeDef status){
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	while (status == HAL_BUSY){
 8000952:	e000      	b.n	8000956 <Gyro_Await_Spi_Status+0xe>
		continue;
 8000954:	bf00      	nop
	while (status == HAL_BUSY){
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d0fb      	beq.n	8000954 <Gyro_Await_Spi_Status+0xc>
	}
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <Gyro_Enable_Slave_Comms>:

void Gyro_Enable_Slave_Comms(){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Pull The cs pin low to set spi mode
 8000970:	2200      	movs	r2, #0
 8000972:	2102      	movs	r1, #2
 8000974:	4807      	ldr	r0, [pc, #28]	@ (8000994 <Gyro_Enable_Slave_Comms+0x28>)
 8000976:	f000 fd7d 	bl	8001474 <HAL_GPIO_WritePin>
	// await actual turn on
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1) != GPIO_PIN_RESET){
 800097a:	e000      	b.n	800097e <Gyro_Enable_Slave_Comms+0x12>
		continue;
 800097c:	bf00      	nop
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1) != GPIO_PIN_RESET){
 800097e:	2102      	movs	r1, #2
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <Gyro_Enable_Slave_Comms+0x28>)
 8000982:	f000 fd5f 	bl	8001444 <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1f7      	bne.n	800097c <Gyro_Enable_Slave_Comms+0x10>
	}
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40020800 	.word	0x40020800

08000998 <Gyro_Disable_Slave_Comms>:
void Gyro_Disable_Slave_Comms(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // Pull The cs pin low to set spi mode
 800099c:	2201      	movs	r2, #1
 800099e:	2102      	movs	r1, #2
 80009a0:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <Gyro_Disable_Slave_Comms+0x28>)
 80009a2:	f000 fd67 	bl	8001474 <HAL_GPIO_WritePin>
	// await actual turn on
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1) != GPIO_PIN_SET){
 80009a6:	e000      	b.n	80009aa <Gyro_Disable_Slave_Comms+0x12>
		continue;
 80009a8:	bf00      	nop
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1) != GPIO_PIN_SET){
 80009aa:	2102      	movs	r1, #2
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <Gyro_Disable_Slave_Comms+0x28>)
 80009ae:	f000 fd49 	bl	8001444 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d1f7      	bne.n	80009a8 <Gyro_Disable_Slave_Comms+0x10>
	}
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020800 	.word	0x40020800

080009c4 <addSchedulerEvent>:
#include <Scheduler.h>

// a number who's bits represent the scheduled events
static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	// TODO could add code to check if the event is a single bit / a valid event but it would be slow
	scheduledEvents |= event;
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <addSchedulerEvent+0x20>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	4a03      	ldr	r2, [pc, #12]	@ (80009e4 <addSchedulerEvent+0x20>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	200000e4 	.word	0x200000e4

080009e8 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	43da      	mvns	r2, r3
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <removeSchedulerEvent+0x24>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4013      	ands	r3, r2
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <removeSchedulerEvent+0x24>)
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200000e4 	.word	0x200000e4

08000a10 <getScheduledEvents>:

uint32_t getScheduledEvents() {
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <getScheduledEvents+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200000e4 	.word	0x200000e4

08000a28 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
	printf("\n");
 8000a32:	200a      	movs	r0, #10
 8000a34:	f002 f970 	bl	8002d18 <putchar>
//	printf("INT\n");
	addSchedulerEvent(DELAY_EVENT);
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f7ff ffc3 	bl	80009c4 <addSchedulerEvent>
	addSchedulerEvent(PRINT_TEMP_EVENT);
 8000a3e:	2008      	movs	r0, #8
 8000a40:	f7ff ffc0 	bl	80009c4 <addSchedulerEvent>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8000a52:	f002 f80f 	bl	8002a74 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f000 f9a1 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f81f 	bl	8000a9c <SystemClock_Config>
  MX_SPI5_Init();
  /* USER CODE BEGIN 2 */
#endif
//	addSchedulerEvent(DELAY_EVENT);
//	addSchedulerEvent(PRINT_TEMP_EVENT);
	applicationInit();
 8000a5e:	f7ff fd97 	bl	8000590 <applicationInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t eventsToRun = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
	while (1)
	{
		eventsToRun = getScheduledEvents();
 8000a66:	f7ff ffd3 	bl	8000a10 <getScheduledEvents>
 8000a6a:	6078      	str	r0, [r7, #4]
		if ((eventsToRun & LED_TOGGLE_EVENT) != 0) {
			// TODO
		}
		if ((eventsToRun & DELAY_EVENT) != 0) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d005      	beq.n	8000a82 <main+0x36>
			HAL_Delay(50);
 8000a76:	2032      	movs	r0, #50	@ 0x32
 8000a78:	f000 fa02 	bl	8000e80 <HAL_Delay>
			removeSchedulerEvent(DELAY_EVENT);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff ffb3 	bl	80009e8 <removeSchedulerEvent>
		}
		if ((eventsToRun & POLL_BTN_EVENT) != 0) {
			// TODO
		}
		if ((eventsToRun & PRINT_TEMP_EVENT) != 0) {
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0ec      	beq.n	8000a66 <main+0x1a>
			Gyro_Get_Id();
 8000a8c:	f7ff fef4 	bl	8000878 <Gyro_Get_Id>
			Gyro_Get_Temp();
 8000a90:	f7ff ff30 	bl	80008f4 <Gyro_Get_Temp>
			removeSchedulerEvent(PRINT_TEMP_EVENT);
 8000a94:	2008      	movs	r0, #8
 8000a96:	f7ff ffa7 	bl	80009e8 <removeSchedulerEvent>
		eventsToRun = getScheduledEvents();
 8000a9a:	e7e4      	b.n	8000a66 <main+0x1a>

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	@ 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	@ 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fa72 	bl	8002f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <SystemClock_Config+0xbc>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	4a23      	ldr	r2, [pc, #140]	@ (8000b58 <SystemClock_Config+0xbc>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad0:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <SystemClock_Config+0xbc>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <SystemClock_Config+0xc0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <SystemClock_Config+0xc0>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <SystemClock_Config+0xc0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2310      	movs	r3, #16
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fce1 	bl	80014d8 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b1c:	f000 f820 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000b2c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000b32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 ff42 	bl	80019c8 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b4a:	f000 f809 	bl	8000b60 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	@ 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000baa:	2007      	movs	r0, #7
 8000bac:	f000 fa5c 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	@ (8000c40 <HAL_SPI_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12c      	bne.n	8000c38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <HAL_SPI_MspInit+0x88>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <HAL_SPI_MspInit+0x88>)
 8000be8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <HAL_SPI_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a10      	ldr	r2, [pc, #64]	@ (8000c44 <HAL_SPI_MspInit+0x88>)
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <HAL_SPI_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0320 	and.w	r3, r3, #32
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000c16:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c28:	2305      	movs	r3, #5
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000c34:	f000 fa5a 	bl	80010ec <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	@ 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40015000 	.word	0x40015000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40021400 	.word	0x40021400

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f000 f8cd 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f000 fbfa 	bl	80014a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc0:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <_sbrk+0x5c>)
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <_sbrk+0x60>)
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <_sbrk+0x64>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <_sbrk+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d207      	bcs.n	8000cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce8:	f002 f9a2 	bl	8003030 <__errno>
 8000cec:	4603      	mov	r3, r0
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	e009      	b.n	8000d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <_sbrk+0x64>)
 8000d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20030000 	.word	0x20030000
 8000d18:	00000400 	.word	0x00000400
 8000d1c:	200000e8 	.word	0x200000e8
 8000d20:	200002e8 	.word	0x200002e8

08000d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4c:	f7ff ffea 	bl	8000d24 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f002 f961 	bl	800303c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff fe67 	bl	8000a4c <main>
  bx  lr    
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d8c:	08003c3c 	.word	0x08003c3c
  ldr r2, =_sbss
 8000d90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d94:	200002e8 	.word	0x200002e8

08000d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f94f 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f808 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fecc 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f967 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f92f 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	@ (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	200000ec 	.word	0x200000ec

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200000ec 	.word	0x200000ec

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	@ (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff29 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff3e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff31 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	e177      	b.n	80013f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8166 	bne.w	80013f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d005      	beq.n	800113e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	2b02      	cmp	r3, #2
 800113c:	d130      	bne.n	80011a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 0201 	and.w	r2, r3, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d017      	beq.n	80011dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d123      	bne.n	8001230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	69b9      	ldr	r1, [r7, #24]
 800122c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80c0 	beq.w	80013f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b66      	ldr	r3, [pc, #408]	@ (8001410 <HAL_GPIO_Init+0x324>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a65      	ldr	r2, [pc, #404]	@ (8001410 <HAL_GPIO_Init+0x324>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b63      	ldr	r3, [pc, #396]	@ (8001410 <HAL_GPIO_Init+0x324>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128e:	4a61      	ldr	r2, [pc, #388]	@ (8001414 <HAL_GPIO_Init+0x328>)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a58      	ldr	r2, [pc, #352]	@ (8001418 <HAL_GPIO_Init+0x32c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d037      	beq.n	800132a <HAL_GPIO_Init+0x23e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a57      	ldr	r2, [pc, #348]	@ (800141c <HAL_GPIO_Init+0x330>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d031      	beq.n	8001326 <HAL_GPIO_Init+0x23a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a56      	ldr	r2, [pc, #344]	@ (8001420 <HAL_GPIO_Init+0x334>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d02b      	beq.n	8001322 <HAL_GPIO_Init+0x236>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a55      	ldr	r2, [pc, #340]	@ (8001424 <HAL_GPIO_Init+0x338>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d025      	beq.n	800131e <HAL_GPIO_Init+0x232>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a54      	ldr	r2, [pc, #336]	@ (8001428 <HAL_GPIO_Init+0x33c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01f      	beq.n	800131a <HAL_GPIO_Init+0x22e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a53      	ldr	r2, [pc, #332]	@ (800142c <HAL_GPIO_Init+0x340>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x22a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a52      	ldr	r2, [pc, #328]	@ (8001430 <HAL_GPIO_Init+0x344>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x226>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a51      	ldr	r2, [pc, #324]	@ (8001434 <HAL_GPIO_Init+0x348>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x222>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a50      	ldr	r2, [pc, #320]	@ (8001438 <HAL_GPIO_Init+0x34c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x21e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4f      	ldr	r2, [pc, #316]	@ (800143c <HAL_GPIO_Init+0x350>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x21a>
 8001302:	2309      	movs	r3, #9
 8001304:	e012      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001306:	230a      	movs	r3, #10
 8001308:	e010      	b.n	800132c <HAL_GPIO_Init+0x240>
 800130a:	2308      	movs	r3, #8
 800130c:	e00e      	b.n	800132c <HAL_GPIO_Init+0x240>
 800130e:	2307      	movs	r3, #7
 8001310:	e00c      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001312:	2306      	movs	r3, #6
 8001314:	e00a      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001316:	2305      	movs	r3, #5
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x240>
 800131a:	2304      	movs	r3, #4
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x240>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x240>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4935      	ldr	r1, [pc, #212]	@ (8001414 <HAL_GPIO_Init+0x328>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134a:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <HAL_GPIO_Init+0x354>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136e:	4a34      	ldr	r2, [pc, #208]	@ (8001440 <HAL_GPIO_Init+0x354>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001374:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <HAL_GPIO_Init+0x354>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001398:	4a29      	ldr	r2, [pc, #164]	@ (8001440 <HAL_GPIO_Init+0x354>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139e:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <HAL_GPIO_Init+0x354>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <HAL_GPIO_Init+0x354>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <HAL_GPIO_Init+0x354>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ec:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <HAL_GPIO_Init+0x354>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f ae84 	bls.w	8001108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3724      	adds	r7, #36	@ 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40021800 	.word	0x40021800
 8001434:	40021c00 	.word	0x40021c00
 8001438:	40022000 	.word	0x40022000
 800143c:	40022400 	.word	0x40022400
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001490:	e003      	b.n	800149a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	041a      	lsls	r2, r3, #16
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff faae 	bl	8000a28 <HAL_GPIO_EXTI_Callback>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40013c00 	.word	0x40013c00

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e267      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d075      	beq.n	80015e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014f6:	4b88      	ldr	r3, [pc, #544]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d00c      	beq.n	800151c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b85      	ldr	r3, [pc, #532]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800150a:	2b08      	cmp	r3, #8
 800150c:	d112      	bne.n	8001534 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150e:	4b82      	ldr	r3, [pc, #520]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800151a:	d10b      	bne.n	8001534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	4b7e      	ldr	r3, [pc, #504]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d05b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x108>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d157      	bne.n	80015e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e242      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x74>
 800153e:	4b76      	ldr	r3, [pc, #472]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a75      	ldr	r2, [pc, #468]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e01d      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x98>
 8001556:	4b70      	ldr	r3, [pc, #448]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6f      	ldr	r2, [pc, #444]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b6d      	ldr	r3, [pc, #436]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a6c      	ldr	r2, [pc, #432]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 8001570:	4b69      	ldr	r3, [pc, #420]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a68      	ldr	r2, [pc, #416]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b66      	ldr	r3, [pc, #408]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a65      	ldr	r2, [pc, #404]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fc6a 	bl	8000e68 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fc66 	bl	8000e68 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e207      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0xc0>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc56 	bl	8000e68 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fc52 	bl	8000e68 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	@ 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1f3      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	4b51      	ldr	r3, [pc, #324]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0xe8>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d063      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b47      	ldr	r3, [pc, #284]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001602:	2b08      	cmp	r3, #8
 8001604:	d11c      	bne.n	8001640 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001606:	4b44      	ldr	r3, [pc, #272]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d116      	bne.n	8001640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	4b41      	ldr	r3, [pc, #260]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x152>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d001      	beq.n	800162a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e1c7      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	4b3b      	ldr	r3, [pc, #236]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4937      	ldr	r1, [pc, #220]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	e03a      	b.n	80016b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001648:	4b34      	ldr	r3, [pc, #208]	@ (800171c <HAL_RCC_OscConfig+0x244>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fc0b 	bl	8000e68 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fc07 	bl	8000e68 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1a8      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4925      	ldr	r1, [pc, #148]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
 8001688:	e015      	b.n	80016b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168a:	4b24      	ldr	r3, [pc, #144]	@ (800171c <HAL_RCC_OscConfig+0x244>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fbea 	bl	8000e68 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff fbe6 	bl	8000e68 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e187      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d036      	beq.n	8001730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d016      	beq.n	80016f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_RCC_OscConfig+0x248>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fbca 	bl	8000e68 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fbc6 	bl	8000e68 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e167      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_RCC_OscConfig+0x240>)
 80016ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x200>
 80016f6:	e01b      	b.n	8001730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_RCC_OscConfig+0x248>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fbb3 	bl	8000e68 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	e00e      	b.n	8001724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fbaf 	bl	8000e68 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d907      	bls.n	8001724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e150      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
 8001718:	40023800 	.word	0x40023800
 800171c:	42470000 	.word	0x42470000
 8001720:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b88      	ldr	r3, [pc, #544]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ea      	bne.n	8001706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8097 	beq.w	800186c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b81      	ldr	r3, [pc, #516]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10f      	bne.n	800176e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	4b7d      	ldr	r3, [pc, #500]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	4a7c      	ldr	r2, [pc, #496]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	@ 0x40
 800175e:	4b7a      	ldr	r3, [pc, #488]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176a:	2301      	movs	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	4b77      	ldr	r3, [pc, #476]	@ (800194c <HAL_RCC_OscConfig+0x474>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d118      	bne.n	80017ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177a:	4b74      	ldr	r3, [pc, #464]	@ (800194c <HAL_RCC_OscConfig+0x474>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a73      	ldr	r2, [pc, #460]	@ (800194c <HAL_RCC_OscConfig+0x474>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001786:	f7ff fb6f 	bl	8000e68 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178e:	f7ff fb6b 	bl	8000e68 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e10c      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b6a      	ldr	r3, [pc, #424]	@ (800194c <HAL_RCC_OscConfig+0x474>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x2ea>
 80017b4:	4b64      	ldr	r3, [pc, #400]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b8:	4a63      	ldr	r2, [pc, #396]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c0:	e01c      	b.n	80017fc <HAL_RCC_OscConfig+0x324>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b05      	cmp	r3, #5
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x30c>
 80017ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017da:	4a5b      	ldr	r2, [pc, #364]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0x324>
 80017e4:	4b58      	ldr	r3, [pc, #352]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e8:	4a57      	ldr	r2, [pc, #348]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f0:	4b55      	ldr	r3, [pc, #340]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f4:	4a54      	ldr	r2, [pc, #336]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80017f6:	f023 0304 	bic.w	r3, r3, #4
 80017fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d015      	beq.n	8001830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fb30 	bl	8000e68 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff fb2c 	bl	8000e68 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e0cb      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001822:	4b49      	ldr	r3, [pc, #292]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0ee      	beq.n	800180c <HAL_RCC_OscConfig+0x334>
 800182e:	e014      	b.n	800185a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff fb1a 	bl	8000e68 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff fb16 	bl	8000e68 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e0b5      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184e:	4b3e      	ldr	r3, [pc, #248]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ee      	bne.n	8001838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800185a:	7dfb      	ldrb	r3, [r7, #23]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001860:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	4a38      	ldr	r2, [pc, #224]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800186a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80a1 	beq.w	80019b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001876:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b08      	cmp	r3, #8
 8001880:	d05c      	beq.n	800193c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d141      	bne.n	800190e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b31      	ldr	r3, [pc, #196]	@ (8001950 <HAL_RCC_OscConfig+0x478>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff faea 	bl	8000e68 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fae6 	bl	8000e68 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e087      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69da      	ldr	r2, [r3, #28]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	019b      	lsls	r3, r3, #6
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018cc:	085b      	lsrs	r3, r3, #1
 80018ce:	3b01      	subs	r3, #1
 80018d0:	041b      	lsls	r3, r3, #16
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d8:	061b      	lsls	r3, r3, #24
 80018da:	491b      	ldr	r1, [pc, #108]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_RCC_OscConfig+0x478>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff fabf 	bl	8000e68 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff fabb 	bl	8000e68 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e05c      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x416>
 800190c:	e054      	b.n	80019b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <HAL_RCC_OscConfig+0x478>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff faa8 	bl	8000e68 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff faa4 	bl	8000e68 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e045      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_RCC_OscConfig+0x470>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x444>
 800193a:	e03d      	b.n	80019b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d107      	bne.n	8001954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e038      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000
 8001950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <HAL_RCC_OscConfig+0x4ec>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d028      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d121      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d11a      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001984:	4013      	ands	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800198a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800198c:	4293      	cmp	r3, r2
 800198e:	d111      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	3b01      	subs	r3, #1
 800199e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0cc      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b68      	ldr	r3, [pc, #416]	@ (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d90c      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b65      	ldr	r3, [pc, #404]	@ (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b63      	ldr	r3, [pc, #396]	@ (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0b8      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a1c:	4b59      	ldr	r3, [pc, #356]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a58      	ldr	r2, [pc, #352]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a34:	4b53      	ldr	r3, [pc, #332]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a52      	ldr	r2, [pc, #328]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a40:	4b50      	ldr	r3, [pc, #320]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	494d      	ldr	r1, [pc, #308]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d044      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b47      	ldr	r3, [pc, #284]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d119      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e07f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b3f      	ldr	r3, [pc, #252]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e06f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b3b      	ldr	r3, [pc, #236]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e067      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b37      	ldr	r3, [pc, #220]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4934      	ldr	r1, [pc, #208]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff f9d6 	bl	8000e68 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff f9d2 	bl	8000e68 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e04f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b25      	ldr	r3, [pc, #148]	@ (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d20c      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e032      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4916      	ldr	r1, [pc, #88]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3a:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	490e      	ldr	r1, [pc, #56]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b4e:	f000 f821 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	490a      	ldr	r1, [pc, #40]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	4a09      	ldr	r2, [pc, #36]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f936 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08003bcc 	.word	0x08003bcc
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b98:	b094      	sub	sp, #80	@ 0x50
 8001b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bac:	4b79      	ldr	r3, [pc, #484]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	f200 80e1 	bhi.w	8001d80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x3a>
 8001bc6:	e0db      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc8:	4b73      	ldr	r3, [pc, #460]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bcc:	e0db      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bce:	4b73      	ldr	r3, [pc, #460]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x208>)
 8001bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bd2:	e0d8      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bde:	4b6d      	ldr	r3, [pc, #436]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d063      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bea:	4b6a      	ldr	r3, [pc, #424]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	099b      	lsrs	r3, r3, #6
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c06:	4622      	mov	r2, r4
 8001c08:	462b      	mov	r3, r5
 8001c0a:	f04f 0000 	mov.w	r0, #0
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	0159      	lsls	r1, r3, #5
 8001c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c18:	0150      	lsls	r0, r2, #5
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4621      	mov	r1, r4
 8001c20:	1a51      	subs	r1, r2, r1
 8001c22:	6139      	str	r1, [r7, #16]
 8001c24:	4629      	mov	r1, r5
 8001c26:	eb63 0301 	sbc.w	r3, r3, r1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c38:	4659      	mov	r1, fp
 8001c3a:	018b      	lsls	r3, r1, #6
 8001c3c:	4651      	mov	r1, sl
 8001c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c42:	4651      	mov	r1, sl
 8001c44:	018a      	lsls	r2, r1, #6
 8001c46:	4651      	mov	r1, sl
 8001c48:	ebb2 0801 	subs.w	r8, r2, r1
 8001c4c:	4659      	mov	r1, fp
 8001c4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c66:	4690      	mov	r8, r2
 8001c68:	4699      	mov	r9, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	eb18 0303 	adds.w	r3, r8, r3
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	462b      	mov	r3, r5
 8001c74:	eb49 0303 	adc.w	r3, r9, r3
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c86:	4629      	mov	r1, r5
 8001c88:	024b      	lsls	r3, r1, #9
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c90:	4621      	mov	r1, r4
 8001c92:	024a      	lsls	r2, r1, #9
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ca0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ca4:	f7fe fafc 	bl	80002a0 <__aeabi_uldivmod>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4613      	mov	r3, r2
 8001cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cb0:	e058      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb2:	4b38      	ldr	r3, [pc, #224]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ccc:	4642      	mov	r2, r8
 8001cce:	464b      	mov	r3, r9
 8001cd0:	f04f 0000 	mov.w	r0, #0
 8001cd4:	f04f 0100 	mov.w	r1, #0
 8001cd8:	0159      	lsls	r1, r3, #5
 8001cda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cde:	0150      	lsls	r0, r2, #5
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4641      	mov	r1, r8
 8001ce6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cea:	4649      	mov	r1, r9
 8001cec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d04:	ebb2 040a 	subs.w	r4, r2, sl
 8001d08:	eb63 050b 	sbc.w	r5, r3, fp
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	00eb      	lsls	r3, r5, #3
 8001d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d1a:	00e2      	lsls	r2, r4, #3
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	461d      	mov	r5, r3
 8001d20:	4643      	mov	r3, r8
 8001d22:	18e3      	adds	r3, r4, r3
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	464b      	mov	r3, r9
 8001d28:	eb45 0303 	adc.w	r3, r5, r3
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	028b      	lsls	r3, r1, #10
 8001d3e:	4621      	mov	r1, r4
 8001d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d44:	4621      	mov	r1, r4
 8001d46:	028a      	lsls	r2, r1, #10
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	61fa      	str	r2, [r7, #28]
 8001d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d58:	f7fe faa2 	bl	80002a0 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4613      	mov	r3, r2
 8001d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d7e:	e002      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3750      	adds	r7, #80	@ 0x50
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	007a1200 	.word	0x007a1200

08001da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e07b      	b.n	8001eaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dc2:	d009      	beq.n	8001dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
 8001dca:	e005      	b.n	8001dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe fee2 	bl	8000bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5c:	ea42 0103 	orr.w	r1, r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	f003 0104 	and.w	r1, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	f003 0210 	and.w	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b088      	sub	sp, #32
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ec2:	f7fe ffd1 	bl	8000e68 <HAL_GetTick>
 8001ec6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d001      	beq.n	8001edc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e12a      	b.n	8002132 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_SPI_Transmit+0x36>
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e122      	b.n	8002132 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_SPI_Transmit+0x48>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e11b      	b.n	8002132 <HAL_SPI_Transmit+0x280>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2203      	movs	r2, #3
 8001f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	88fa      	ldrh	r2, [r7, #6]
 8001f20:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f48:	d10f      	bne.n	8001f6a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f74:	2b40      	cmp	r3, #64	@ 0x40
 8001f76:	d007      	beq.n	8001f88 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f90:	d152      	bne.n	8002038 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_SPI_Transmit+0xee>
 8001f9a:	8b7b      	ldrh	r3, [r7, #26]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d145      	bne.n	800202c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	881a      	ldrh	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb0:	1c9a      	adds	r2, r3, #2
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fc4:	e032      	b.n	800202c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d112      	bne.n	8001ffa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	881a      	ldrh	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	1c9a      	adds	r2, r3, #2
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001ff8:	e018      	b.n	800202c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ffa:	f7fe ff35 	bl	8000e68 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d803      	bhi.n	8002012 <HAL_SPI_Transmit+0x160>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d102      	bne.n	8002018 <HAL_SPI_Transmit+0x166>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e082      	b.n	8002132 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1c7      	bne.n	8001fc6 <HAL_SPI_Transmit+0x114>
 8002036:	e053      	b.n	80020e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_SPI_Transmit+0x194>
 8002040:	8b7b      	ldrh	r3, [r7, #26]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d147      	bne.n	80020d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	330c      	adds	r3, #12
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800206c:	e033      	b.n	80020d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b02      	cmp	r3, #2
 800207a:	d113      	bne.n	80020a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	330c      	adds	r3, #12
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020a2:	e018      	b.n	80020d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020a4:	f7fe fee0 	bl	8000e68 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d803      	bhi.n	80020bc <HAL_SPI_Transmit+0x20a>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ba:	d102      	bne.n	80020c2 <HAL_SPI_Transmit+0x210>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e02d      	b.n	8002132 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1c6      	bne.n	800206e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fa59 	bl	800259c <SPI_EndRxTxTransaction>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002130:	2300      	movs	r3, #0
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b08a      	sub	sp, #40	@ 0x28
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002148:	2301      	movs	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800214c:	f7fe fe8c 	bl	8000e68 <HAL_GetTick>
 8002150:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002158:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002164:	7ffb      	ldrb	r3, [r7, #31]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d00c      	beq.n	8002184 <HAL_SPI_TransmitReceive+0x4a>
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002170:	d106      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x46>
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d001      	beq.n	8002184 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002180:	2302      	movs	r3, #2
 8002182:	e17f      	b.n	8002484 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_SPI_TransmitReceive+0x5c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_SPI_TransmitReceive+0x5c>
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e174      	b.n	8002484 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x6e>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e16d      	b.n	8002484 <HAL_SPI_TransmitReceive+0x34a>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d003      	beq.n	80021c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2205      	movs	r2, #5
 80021c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	887a      	ldrh	r2, [r7, #2]
 80021da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	887a      	ldrh	r2, [r7, #2]
 80021e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002204:	2b40      	cmp	r3, #64	@ 0x40
 8002206:	d007      	beq.n	8002218 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002220:	d17e      	bne.n	8002320 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_SPI_TransmitReceive+0xf6>
 800222a:	8afb      	ldrh	r3, [r7, #22]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d16c      	bne.n	800230a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	881a      	ldrh	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	1c9a      	adds	r2, r3, #2
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002254:	e059      	b.n	800230a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d11b      	bne.n	800229c <HAL_SPI_TransmitReceive+0x162>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d016      	beq.n	800229c <HAL_SPI_TransmitReceive+0x162>
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	2b01      	cmp	r3, #1
 8002272:	d113      	bne.n	800229c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	1c9a      	adds	r2, r3, #2
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d119      	bne.n	80022de <HAL_SPI_TransmitReceive+0x1a4>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d014      	beq.n	80022de <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022be:	b292      	uxth	r2, r2
 80022c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c6:	1c9a      	adds	r2, r3, #2
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022da:	2301      	movs	r3, #1
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022de:	f7fe fdc3 	bl	8000e68 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d80d      	bhi.n	800230a <HAL_SPI_TransmitReceive+0x1d0>
 80022ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d009      	beq.n	800230a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0bc      	b.n	8002484 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1a0      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x11c>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d19b      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x11c>
 800231e:	e082      	b.n	8002426 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_SPI_TransmitReceive+0x1f4>
 8002328:	8afb      	ldrh	r3, [r7, #22]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d171      	bne.n	8002412 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002354:	e05d      	b.n	8002412 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d11c      	bne.n	800239e <HAL_SPI_TransmitReceive+0x264>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d017      	beq.n	800239e <HAL_SPI_TransmitReceive+0x264>
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	2b01      	cmp	r3, #1
 8002372:	d114      	bne.n	800239e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	330c      	adds	r3, #12
 800237e:	7812      	ldrb	r2, [r2, #0]
 8002380:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d119      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x2a6>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d014      	beq.n	80023e0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023dc:	2301      	movs	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023e0:	f7fe fd42 	bl	8000e68 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d803      	bhi.n	80023f8 <HAL_SPI_TransmitReceive+0x2be>
 80023f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f6:	d102      	bne.n	80023fe <HAL_SPI_TransmitReceive+0x2c4>
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e038      	b.n	8002484 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d19c      	bne.n	8002356 <HAL_SPI_TransmitReceive+0x21c>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d197      	bne.n	8002356 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002426:	6a3a      	ldr	r2, [r7, #32]
 8002428:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f8b6 	bl	800259c <SPI_EndRxTxTransaction>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e01d      	b.n	8002484 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002482:	2300      	movs	r3, #0
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	3728      	adds	r7, #40	@ 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800249c:	f7fe fce4 	bl	8000e68 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024ac:	f7fe fcdc 	bl	8000e68 <HAL_GetTick>
 80024b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024b2:	4b39      	ldr	r3, [pc, #228]	@ (8002598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	015b      	lsls	r3, r3, #5
 80024b8:	0d1b      	lsrs	r3, r3, #20
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024c2:	e054      	b.n	800256e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d050      	beq.n	800256e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024cc:	f7fe fccc 	bl	8000e68 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d902      	bls.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d13d      	bne.n	800255e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024fa:	d111      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002504:	d004      	beq.n	8002510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250e:	d107      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800251e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002528:	d10f      	bne.n	800254a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e017      	b.n	800258e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3b01      	subs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4013      	ands	r3, r2
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	429a      	cmp	r2, r3
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	429a      	cmp	r2, r3
 800258a:	d19b      	bne.n	80024c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000000 	.word	0x20000000

0800259c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2201      	movs	r2, #1
 80025b0:	2102      	movs	r1, #2
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f7ff ff6a 	bl	800248c <SPI_WaitFlagStateUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	f043 0220 	orr.w	r2, r3, #32
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e032      	b.n	8002634 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025ce:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <SPI_EndRxTxTransaction+0xa0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002640 <SPI_EndRxTxTransaction+0xa4>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0d5b      	lsrs	r3, r3, #21
 80025da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025ec:	d112      	bne.n	8002614 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff ff47 	bl	800248c <SPI_WaitFlagStateUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d016      	beq.n	8002632 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e00f      	b.n	8002634 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3b01      	subs	r3, #1
 800261e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b80      	cmp	r3, #128	@ 0x80
 800262c:	d0f2      	beq.n	8002614 <SPI_EndRxTxTransaction+0x78>
 800262e:	e000      	b.n	8002632 <SPI_EndRxTxTransaction+0x96>
        break;
 8002630:	bf00      	nop
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000000 	.word	0x20000000
 8002640:	165e9f81 	.word	0x165e9f81

08002644 <findslot>:
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <findslot+0x2c>)
 8002646:	b510      	push	{r4, lr}
 8002648:	4604      	mov	r4, r0
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	b118      	cbz	r0, 8002656 <findslot+0x12>
 800264e:	6a03      	ldr	r3, [r0, #32]
 8002650:	b90b      	cbnz	r3, 8002656 <findslot+0x12>
 8002652:	f000 fb19 	bl	8002c88 <__sinit>
 8002656:	2c13      	cmp	r4, #19
 8002658:	d807      	bhi.n	800266a <findslot+0x26>
 800265a:	4806      	ldr	r0, [pc, #24]	@ (8002674 <findslot+0x30>)
 800265c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002660:	3201      	adds	r2, #1
 8002662:	d002      	beq.n	800266a <findslot+0x26>
 8002664:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002668:	bd10      	pop	{r4, pc}
 800266a:	2000      	movs	r0, #0
 800266c:	e7fc      	b.n	8002668 <findslot+0x24>
 800266e:	bf00      	nop
 8002670:	20000020 	.word	0x20000020
 8002674:	200000fc 	.word	0x200000fc

08002678 <error>:
 8002678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267a:	4604      	mov	r4, r0
 800267c:	f000 fcd8 	bl	8003030 <__errno>
 8002680:	2613      	movs	r6, #19
 8002682:	4605      	mov	r5, r0
 8002684:	2700      	movs	r7, #0
 8002686:	4630      	mov	r0, r6
 8002688:	4639      	mov	r1, r7
 800268a:	beab      	bkpt	0x00ab
 800268c:	4606      	mov	r6, r0
 800268e:	602e      	str	r6, [r5, #0]
 8002690:	4620      	mov	r0, r4
 8002692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002694 <checkerror>:
 8002694:	1c43      	adds	r3, r0, #1
 8002696:	d101      	bne.n	800269c <checkerror+0x8>
 8002698:	f7ff bfee 	b.w	8002678 <error>
 800269c:	4770      	bx	lr

0800269e <_swiread>:
 800269e:	b530      	push	{r4, r5, lr}
 80026a0:	b085      	sub	sp, #20
 80026a2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80026a6:	9203      	str	r2, [sp, #12]
 80026a8:	2406      	movs	r4, #6
 80026aa:	ad01      	add	r5, sp, #4
 80026ac:	4620      	mov	r0, r4
 80026ae:	4629      	mov	r1, r5
 80026b0:	beab      	bkpt	0x00ab
 80026b2:	4604      	mov	r4, r0
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff ffed 	bl	8002694 <checkerror>
 80026ba:	b005      	add	sp, #20
 80026bc:	bd30      	pop	{r4, r5, pc}

080026be <_read>:
 80026be:	b570      	push	{r4, r5, r6, lr}
 80026c0:	460e      	mov	r6, r1
 80026c2:	4614      	mov	r4, r2
 80026c4:	f7ff ffbe 	bl	8002644 <findslot>
 80026c8:	4605      	mov	r5, r0
 80026ca:	b930      	cbnz	r0, 80026da <_read+0x1c>
 80026cc:	f000 fcb0 	bl	8003030 <__errno>
 80026d0:	2309      	movs	r3, #9
 80026d2:	6003      	str	r3, [r0, #0]
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	bd70      	pop	{r4, r5, r6, pc}
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	4622      	mov	r2, r4
 80026de:	4631      	mov	r1, r6
 80026e0:	f7ff ffdd 	bl	800269e <_swiread>
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d0f5      	beq.n	80026d4 <_read+0x16>
 80026e8:	686b      	ldr	r3, [r5, #4]
 80026ea:	1a20      	subs	r0, r4, r0
 80026ec:	4403      	add	r3, r0
 80026ee:	606b      	str	r3, [r5, #4]
 80026f0:	e7f2      	b.n	80026d8 <_read+0x1a>

080026f2 <_swilseek>:
 80026f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026f4:	460c      	mov	r4, r1
 80026f6:	4616      	mov	r6, r2
 80026f8:	f7ff ffa4 	bl	8002644 <findslot>
 80026fc:	4605      	mov	r5, r0
 80026fe:	b940      	cbnz	r0, 8002712 <_swilseek+0x20>
 8002700:	f000 fc96 	bl	8003030 <__errno>
 8002704:	2309      	movs	r3, #9
 8002706:	6003      	str	r3, [r0, #0]
 8002708:	f04f 34ff 	mov.w	r4, #4294967295
 800270c:	4620      	mov	r0, r4
 800270e:	b003      	add	sp, #12
 8002710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002712:	2e02      	cmp	r6, #2
 8002714:	d903      	bls.n	800271e <_swilseek+0x2c>
 8002716:	f000 fc8b 	bl	8003030 <__errno>
 800271a:	2316      	movs	r3, #22
 800271c:	e7f3      	b.n	8002706 <_swilseek+0x14>
 800271e:	2e01      	cmp	r6, #1
 8002720:	d112      	bne.n	8002748 <_swilseek+0x56>
 8002722:	6843      	ldr	r3, [r0, #4]
 8002724:	18e4      	adds	r4, r4, r3
 8002726:	d4f6      	bmi.n	8002716 <_swilseek+0x24>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	260a      	movs	r6, #10
 800272c:	e9cd 3400 	strd	r3, r4, [sp]
 8002730:	466f      	mov	r7, sp
 8002732:	4630      	mov	r0, r6
 8002734:	4639      	mov	r1, r7
 8002736:	beab      	bkpt	0x00ab
 8002738:	4606      	mov	r6, r0
 800273a:	4630      	mov	r0, r6
 800273c:	f7ff ffaa 	bl	8002694 <checkerror>
 8002740:	2800      	cmp	r0, #0
 8002742:	dbe1      	blt.n	8002708 <_swilseek+0x16>
 8002744:	606c      	str	r4, [r5, #4]
 8002746:	e7e1      	b.n	800270c <_swilseek+0x1a>
 8002748:	2e02      	cmp	r6, #2
 800274a:	6803      	ldr	r3, [r0, #0]
 800274c:	d1ec      	bne.n	8002728 <_swilseek+0x36>
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	260c      	movs	r6, #12
 8002752:	466f      	mov	r7, sp
 8002754:	4630      	mov	r0, r6
 8002756:	4639      	mov	r1, r7
 8002758:	beab      	bkpt	0x00ab
 800275a:	4606      	mov	r6, r0
 800275c:	4630      	mov	r0, r6
 800275e:	f7ff ff99 	bl	8002694 <checkerror>
 8002762:	1c43      	adds	r3, r0, #1
 8002764:	d0d0      	beq.n	8002708 <_swilseek+0x16>
 8002766:	4404      	add	r4, r0
 8002768:	e7de      	b.n	8002728 <_swilseek+0x36>

0800276a <_lseek>:
 800276a:	f7ff bfc2 	b.w	80026f2 <_swilseek>

0800276e <_swiwrite>:
 800276e:	b530      	push	{r4, r5, lr}
 8002770:	b085      	sub	sp, #20
 8002772:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002776:	9203      	str	r2, [sp, #12]
 8002778:	2405      	movs	r4, #5
 800277a:	ad01      	add	r5, sp, #4
 800277c:	4620      	mov	r0, r4
 800277e:	4629      	mov	r1, r5
 8002780:	beab      	bkpt	0x00ab
 8002782:	4604      	mov	r4, r0
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff85 	bl	8002694 <checkerror>
 800278a:	b005      	add	sp, #20
 800278c:	bd30      	pop	{r4, r5, pc}

0800278e <_write>:
 800278e:	b570      	push	{r4, r5, r6, lr}
 8002790:	460e      	mov	r6, r1
 8002792:	4615      	mov	r5, r2
 8002794:	f7ff ff56 	bl	8002644 <findslot>
 8002798:	4604      	mov	r4, r0
 800279a:	b930      	cbnz	r0, 80027aa <_write+0x1c>
 800279c:	f000 fc48 	bl	8003030 <__errno>
 80027a0:	2309      	movs	r3, #9
 80027a2:	6003      	str	r3, [r0, #0]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	462a      	mov	r2, r5
 80027ae:	4631      	mov	r1, r6
 80027b0:	f7ff ffdd 	bl	800276e <_swiwrite>
 80027b4:	1e03      	subs	r3, r0, #0
 80027b6:	dbf5      	blt.n	80027a4 <_write+0x16>
 80027b8:	6862      	ldr	r2, [r4, #4]
 80027ba:	1ae8      	subs	r0, r5, r3
 80027bc:	4402      	add	r2, r0
 80027be:	42ab      	cmp	r3, r5
 80027c0:	6062      	str	r2, [r4, #4]
 80027c2:	d1f1      	bne.n	80027a8 <_write+0x1a>
 80027c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7ff bf55 	b.w	8002678 <error>

080027ce <_swiclose>:
 80027ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027d0:	2402      	movs	r4, #2
 80027d2:	9001      	str	r0, [sp, #4]
 80027d4:	ad01      	add	r5, sp, #4
 80027d6:	4620      	mov	r0, r4
 80027d8:	4629      	mov	r1, r5
 80027da:	beab      	bkpt	0x00ab
 80027dc:	4604      	mov	r4, r0
 80027de:	4620      	mov	r0, r4
 80027e0:	f7ff ff58 	bl	8002694 <checkerror>
 80027e4:	b003      	add	sp, #12
 80027e6:	bd30      	pop	{r4, r5, pc}

080027e8 <_close>:
 80027e8:	b538      	push	{r3, r4, r5, lr}
 80027ea:	4605      	mov	r5, r0
 80027ec:	f7ff ff2a 	bl	8002644 <findslot>
 80027f0:	4604      	mov	r4, r0
 80027f2:	b930      	cbnz	r0, 8002802 <_close+0x1a>
 80027f4:	f000 fc1c 	bl	8003030 <__errno>
 80027f8:	2309      	movs	r3, #9
 80027fa:	6003      	str	r3, [r0, #0]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	bd38      	pop	{r3, r4, r5, pc}
 8002802:	3d01      	subs	r5, #1
 8002804:	2d01      	cmp	r5, #1
 8002806:	d809      	bhi.n	800281c <_close+0x34>
 8002808:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <_close+0x40>)
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	429a      	cmp	r2, r3
 8002810:	d104      	bne.n	800281c <_close+0x34>
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	6023      	str	r3, [r4, #0]
 8002818:	2000      	movs	r0, #0
 800281a:	e7f1      	b.n	8002800 <_close+0x18>
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	f7ff ffd6 	bl	80027ce <_swiclose>
 8002822:	2800      	cmp	r0, #0
 8002824:	d0f5      	beq.n	8002812 <_close+0x2a>
 8002826:	e7eb      	b.n	8002800 <_close+0x18>
 8002828:	200000fc 	.word	0x200000fc

0800282c <_swistat>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	460c      	mov	r4, r1
 8002830:	f7ff ff08 	bl	8002644 <findslot>
 8002834:	4605      	mov	r5, r0
 8002836:	b930      	cbnz	r0, 8002846 <_swistat+0x1a>
 8002838:	f000 fbfa 	bl	8003030 <__errno>
 800283c:	2309      	movs	r3, #9
 800283e:	6003      	str	r3, [r0, #0]
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	bd70      	pop	{r4, r5, r6, pc}
 8002846:	6863      	ldr	r3, [r4, #4]
 8002848:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800284c:	6063      	str	r3, [r4, #4]
 800284e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002852:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002854:	260c      	movs	r6, #12
 8002856:	4630      	mov	r0, r6
 8002858:	4629      	mov	r1, r5
 800285a:	beab      	bkpt	0x00ab
 800285c:	4605      	mov	r5, r0
 800285e:	4628      	mov	r0, r5
 8002860:	f7ff ff18 	bl	8002694 <checkerror>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	d0eb      	beq.n	8002840 <_swistat+0x14>
 8002868:	6120      	str	r0, [r4, #16]
 800286a:	2000      	movs	r0, #0
 800286c:	e7ea      	b.n	8002844 <_swistat+0x18>

0800286e <_fstat>:
 800286e:	460b      	mov	r3, r1
 8002870:	b510      	push	{r4, lr}
 8002872:	2100      	movs	r1, #0
 8002874:	4604      	mov	r4, r0
 8002876:	2258      	movs	r2, #88	@ 0x58
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fb8b 	bl	8002f94 <memset>
 800287e:	4601      	mov	r1, r0
 8002880:	4620      	mov	r0, r4
 8002882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002886:	f7ff bfd1 	b.w	800282c <_swistat>

0800288a <_stat>:
 800288a:	b538      	push	{r3, r4, r5, lr}
 800288c:	460d      	mov	r5, r1
 800288e:	4604      	mov	r4, r0
 8002890:	2258      	movs	r2, #88	@ 0x58
 8002892:	2100      	movs	r1, #0
 8002894:	4628      	mov	r0, r5
 8002896:	f000 fb7d 	bl	8002f94 <memset>
 800289a:	4620      	mov	r0, r4
 800289c:	2100      	movs	r1, #0
 800289e:	f000 f811 	bl	80028c4 <_swiopen>
 80028a2:	1c43      	adds	r3, r0, #1
 80028a4:	4604      	mov	r4, r0
 80028a6:	d00b      	beq.n	80028c0 <_stat+0x36>
 80028a8:	686b      	ldr	r3, [r5, #4]
 80028aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80028ae:	606b      	str	r3, [r5, #4]
 80028b0:	4629      	mov	r1, r5
 80028b2:	f7ff ffbb 	bl	800282c <_swistat>
 80028b6:	4605      	mov	r5, r0
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff ff95 	bl	80027e8 <_close>
 80028be:	462c      	mov	r4, r5
 80028c0:	4620      	mov	r0, r4
 80028c2:	bd38      	pop	{r3, r4, r5, pc}

080028c4 <_swiopen>:
 80028c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c8:	4f29      	ldr	r7, [pc, #164]	@ (8002970 <_swiopen+0xac>)
 80028ca:	b096      	sub	sp, #88	@ 0x58
 80028cc:	4682      	mov	sl, r0
 80028ce:	460e      	mov	r6, r1
 80028d0:	2400      	movs	r4, #0
 80028d2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80028d6:	3301      	adds	r3, #1
 80028d8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80028dc:	d00c      	beq.n	80028f8 <_swiopen+0x34>
 80028de:	3401      	adds	r4, #1
 80028e0:	2c14      	cmp	r4, #20
 80028e2:	d1f6      	bne.n	80028d2 <_swiopen+0xe>
 80028e4:	f000 fba4 	bl	8003030 <__errno>
 80028e8:	2318      	movs	r3, #24
 80028ea:	6003      	str	r3, [r0, #0]
 80028ec:	f04f 34ff 	mov.w	r4, #4294967295
 80028f0:	4620      	mov	r0, r4
 80028f2:	b016      	add	sp, #88	@ 0x58
 80028f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028f8:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80028fc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002900:	46e9      	mov	r9, sp
 8002902:	d109      	bne.n	8002918 <_swiopen+0x54>
 8002904:	4649      	mov	r1, r9
 8002906:	4650      	mov	r0, sl
 8002908:	f7ff ffbf 	bl	800288a <_stat>
 800290c:	3001      	adds	r0, #1
 800290e:	d003      	beq.n	8002918 <_swiopen+0x54>
 8002910:	f000 fb8e 	bl	8003030 <__errno>
 8002914:	2311      	movs	r3, #17
 8002916:	e7e8      	b.n	80028ea <_swiopen+0x26>
 8002918:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800291c:	f240 6301 	movw	r3, #1537	@ 0x601
 8002920:	07b2      	lsls	r2, r6, #30
 8002922:	bf48      	it	mi
 8002924:	f045 0502 	orrmi.w	r5, r5, #2
 8002928:	421e      	tst	r6, r3
 800292a:	bf18      	it	ne
 800292c:	f045 0504 	orrne.w	r5, r5, #4
 8002930:	0733      	lsls	r3, r6, #28
 8002932:	bf48      	it	mi
 8002934:	f025 0504 	bicmi.w	r5, r5, #4
 8002938:	4650      	mov	r0, sl
 800293a:	bf48      	it	mi
 800293c:	f045 0508 	orrmi.w	r5, r5, #8
 8002940:	f8cd a000 	str.w	sl, [sp]
 8002944:	f7fd fc54 	bl	80001f0 <strlen>
 8002948:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800294c:	2501      	movs	r5, #1
 800294e:	4628      	mov	r0, r5
 8002950:	4649      	mov	r1, r9
 8002952:	beab      	bkpt	0x00ab
 8002954:	4605      	mov	r5, r0
 8002956:	2d00      	cmp	r5, #0
 8002958:	db05      	blt.n	8002966 <_swiopen+0xa2>
 800295a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800295e:	4447      	add	r7, r8
 8002960:	2300      	movs	r3, #0
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	e7c4      	b.n	80028f0 <_swiopen+0x2c>
 8002966:	4628      	mov	r0, r5
 8002968:	f7ff fe86 	bl	8002678 <error>
 800296c:	4604      	mov	r4, r0
 800296e:	e7bf      	b.n	80028f0 <_swiopen+0x2c>
 8002970:	200000fc 	.word	0x200000fc

08002974 <_get_semihosting_exts>:
 8002974:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002978:	4606      	mov	r6, r0
 800297a:	460f      	mov	r7, r1
 800297c:	4829      	ldr	r0, [pc, #164]	@ (8002a24 <_get_semihosting_exts+0xb0>)
 800297e:	2100      	movs	r1, #0
 8002980:	4615      	mov	r5, r2
 8002982:	f7ff ff9f 	bl	80028c4 <_swiopen>
 8002986:	462a      	mov	r2, r5
 8002988:	4604      	mov	r4, r0
 800298a:	2100      	movs	r1, #0
 800298c:	4630      	mov	r0, r6
 800298e:	f000 fb01 	bl	8002f94 <memset>
 8002992:	1c63      	adds	r3, r4, #1
 8002994:	d014      	beq.n	80029c0 <_get_semihosting_exts+0x4c>
 8002996:	4620      	mov	r0, r4
 8002998:	f7ff fe54 	bl	8002644 <findslot>
 800299c:	f04f 080c 	mov.w	r8, #12
 80029a0:	4681      	mov	r9, r0
 80029a2:	4640      	mov	r0, r8
 80029a4:	4649      	mov	r1, r9
 80029a6:	beab      	bkpt	0x00ab
 80029a8:	4680      	mov	r8, r0
 80029aa:	4640      	mov	r0, r8
 80029ac:	f7ff fe72 	bl	8002694 <checkerror>
 80029b0:	2803      	cmp	r0, #3
 80029b2:	dd02      	ble.n	80029ba <_get_semihosting_exts+0x46>
 80029b4:	1ec3      	subs	r3, r0, #3
 80029b6:	42ab      	cmp	r3, r5
 80029b8:	dc07      	bgt.n	80029ca <_get_semihosting_exts+0x56>
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7ff ff14 	bl	80027e8 <_close>
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	b003      	add	sp, #12
 80029c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ca:	2204      	movs	r2, #4
 80029cc:	eb0d 0102 	add.w	r1, sp, r2
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7ff fe74 	bl	80026be <_read>
 80029d6:	2803      	cmp	r0, #3
 80029d8:	ddef      	ble.n	80029ba <_get_semihosting_exts+0x46>
 80029da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029de:	2b53      	cmp	r3, #83	@ 0x53
 80029e0:	d1eb      	bne.n	80029ba <_get_semihosting_exts+0x46>
 80029e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80029e6:	2b48      	cmp	r3, #72	@ 0x48
 80029e8:	d1e7      	bne.n	80029ba <_get_semihosting_exts+0x46>
 80029ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80029ee:	2b46      	cmp	r3, #70	@ 0x46
 80029f0:	d1e3      	bne.n	80029ba <_get_semihosting_exts+0x46>
 80029f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80029f6:	2b42      	cmp	r3, #66	@ 0x42
 80029f8:	d1df      	bne.n	80029ba <_get_semihosting_exts+0x46>
 80029fa:	2201      	movs	r2, #1
 80029fc:	4639      	mov	r1, r7
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff fe77 	bl	80026f2 <_swilseek>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	dbd8      	blt.n	80029ba <_get_semihosting_exts+0x46>
 8002a08:	462a      	mov	r2, r5
 8002a0a:	4631      	mov	r1, r6
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7ff fe56 	bl	80026be <_read>
 8002a12:	4605      	mov	r5, r0
 8002a14:	4620      	mov	r0, r4
 8002a16:	f7ff fee7 	bl	80027e8 <_close>
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f7ff fe3a 	bl	8002694 <checkerror>
 8002a20:	e7d0      	b.n	80029c4 <_get_semihosting_exts+0x50>
 8002a22:	bf00      	nop
 8002a24:	08003bdc 	.word	0x08003bdc

08002a28 <initialise_semihosting_exts>:
 8002a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a2a:	4d0a      	ldr	r5, [pc, #40]	@ (8002a54 <initialise_semihosting_exts+0x2c>)
 8002a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a58 <initialise_semihosting_exts+0x30>)
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2201      	movs	r2, #1
 8002a32:	a801      	add	r0, sp, #4
 8002a34:	6029      	str	r1, [r5, #0]
 8002a36:	6022      	str	r2, [r4, #0]
 8002a38:	f7ff ff9c 	bl	8002974 <_get_semihosting_exts>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	dd07      	ble.n	8002a50 <initialise_semihosting_exts+0x28>
 8002a40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a44:	f003 0201 	and.w	r2, r3, #1
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	602a      	str	r2, [r5, #0]
 8002a4e:	6023      	str	r3, [r4, #0]
 8002a50:	b003      	add	sp, #12
 8002a52:	bd30      	pop	{r4, r5, pc}
 8002a54:	20000010 	.word	0x20000010
 8002a58:	2000000c 	.word	0x2000000c

08002a5c <_has_ext_stdout_stderr>:
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	4c04      	ldr	r4, [pc, #16]	@ (8002a70 <_has_ext_stdout_stderr+0x14>)
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	da01      	bge.n	8002a6a <_has_ext_stdout_stderr+0xe>
 8002a66:	f7ff ffdf 	bl	8002a28 <initialise_semihosting_exts>
 8002a6a:	6820      	ldr	r0, [r4, #0]
 8002a6c:	bd10      	pop	{r4, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000000c 	.word	0x2000000c

08002a74 <initialise_monitor_handles>:
 8002a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8002b2c <initialise_monitor_handles+0xb8>
 8002a7e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002a82:	2303      	movs	r3, #3
 8002a84:	2400      	movs	r4, #0
 8002a86:	9303      	str	r3, [sp, #12]
 8002a88:	af01      	add	r7, sp, #4
 8002a8a:	9402      	str	r4, [sp, #8]
 8002a8c:	2501      	movs	r5, #1
 8002a8e:	4628      	mov	r0, r5
 8002a90:	4639      	mov	r1, r7
 8002a92:	beab      	bkpt	0x00ab
 8002a94:	4605      	mov	r5, r0
 8002a96:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002b30 <initialise_monitor_handles+0xbc>
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	4c20      	ldr	r4, [pc, #128]	@ (8002b20 <initialise_monitor_handles+0xac>)
 8002a9e:	f8c8 5000 	str.w	r5, [r8]
 8002aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	2b14      	cmp	r3, #20
 8002aae:	d1fa      	bne.n	8002aa6 <initialise_monitor_handles+0x32>
 8002ab0:	f7ff ffd4 	bl	8002a5c <_has_ext_stdout_stderr>
 8002ab4:	4d1b      	ldr	r5, [pc, #108]	@ (8002b24 <initialise_monitor_handles+0xb0>)
 8002ab6:	b1d0      	cbz	r0, 8002aee <initialise_monitor_handles+0x7a>
 8002ab8:	f04f 0a03 	mov.w	sl, #3
 8002abc:	2304      	movs	r3, #4
 8002abe:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ac2:	2601      	movs	r6, #1
 8002ac4:	f8cd a00c 	str.w	sl, [sp, #12]
 8002ac8:	9302      	str	r3, [sp, #8]
 8002aca:	4630      	mov	r0, r6
 8002acc:	4639      	mov	r1, r7
 8002ace:	beab      	bkpt	0x00ab
 8002ad0:	4683      	mov	fp, r0
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <initialise_monitor_handles+0xb4>)
 8002ad4:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ad8:	f8c3 b000 	str.w	fp, [r3]
 8002adc:	2308      	movs	r3, #8
 8002ade:	f8cd a00c 	str.w	sl, [sp, #12]
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	4639      	mov	r1, r7
 8002ae8:	beab      	bkpt	0x00ab
 8002aea:	4606      	mov	r6, r0
 8002aec:	602e      	str	r6, [r5, #0]
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	bf02      	ittt	eq
 8002af4:	4b0c      	ldreq	r3, [pc, #48]	@ (8002b28 <initialise_monitor_handles+0xb4>)
 8002af6:	681b      	ldreq	r3, [r3, #0]
 8002af8:	602b      	streq	r3, [r5, #0]
 8002afa:	2600      	movs	r6, #0
 8002afc:	f8d8 3000 	ldr.w	r3, [r8]
 8002b00:	6023      	str	r3, [r4, #0]
 8002b02:	6066      	str	r6, [r4, #4]
 8002b04:	f7ff ffaa 	bl	8002a5c <_has_ext_stdout_stderr>
 8002b08:	b130      	cbz	r0, 8002b18 <initialise_monitor_handles+0xa4>
 8002b0a:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <initialise_monitor_handles+0xb4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002b12:	682b      	ldr	r3, [r5, #0]
 8002b14:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002b18:	b005      	add	sp, #20
 8002b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b1e:	bf00      	nop
 8002b20:	200000fc 	.word	0x200000fc
 8002b24:	200000f0 	.word	0x200000f0
 8002b28:	200000f4 	.word	0x200000f4
 8002b2c:	08003bf2 	.word	0x08003bf2
 8002b30:	200000f8 	.word	0x200000f8

08002b34 <_isatty>:
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	f7ff fd85 	bl	8002644 <findslot>
 8002b3a:	2409      	movs	r4, #9
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	b920      	cbnz	r0, 8002b4a <_isatty+0x16>
 8002b40:	f000 fa76 	bl	8003030 <__errno>
 8002b44:	6004      	str	r4, [r0, #0]
 8002b46:	2000      	movs	r0, #0
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	beab      	bkpt	0x00ab
 8002b50:	4604      	mov	r4, r0
 8002b52:	2c01      	cmp	r4, #1
 8002b54:	4620      	mov	r0, r4
 8002b56:	d0f7      	beq.n	8002b48 <_isatty+0x14>
 8002b58:	f000 fa6a 	bl	8003030 <__errno>
 8002b5c:	2513      	movs	r5, #19
 8002b5e:	4604      	mov	r4, r0
 8002b60:	2600      	movs	r6, #0
 8002b62:	4628      	mov	r0, r5
 8002b64:	4631      	mov	r1, r6
 8002b66:	beab      	bkpt	0x00ab
 8002b68:	4605      	mov	r5, r0
 8002b6a:	6025      	str	r5, [r4, #0]
 8002b6c:	e7eb      	b.n	8002b46 <_isatty+0x12>
	...

08002b70 <std>:
 8002b70:	2300      	movs	r3, #0
 8002b72:	b510      	push	{r4, lr}
 8002b74:	4604      	mov	r4, r0
 8002b76:	e9c0 3300 	strd	r3, r3, [r0]
 8002b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b7e:	6083      	str	r3, [r0, #8]
 8002b80:	8181      	strh	r1, [r0, #12]
 8002b82:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b84:	81c2      	strh	r2, [r0, #14]
 8002b86:	6183      	str	r3, [r0, #24]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	305c      	adds	r0, #92	@ 0x5c
 8002b8e:	f000 fa01 	bl	8002f94 <memset>
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <std+0x58>)
 8002b94:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <std+0x5c>)
 8002b98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <std+0x60>)
 8002b9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <std+0x64>)
 8002ba0:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <std+0x68>)
 8002ba4:	6224      	str	r4, [r4, #32]
 8002ba6:	429c      	cmp	r4, r3
 8002ba8:	d006      	beq.n	8002bb8 <std+0x48>
 8002baa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002bae:	4294      	cmp	r4, r2
 8002bb0:	d002      	beq.n	8002bb8 <std+0x48>
 8002bb2:	33d0      	adds	r3, #208	@ 0xd0
 8002bb4:	429c      	cmp	r4, r3
 8002bb6:	d105      	bne.n	8002bc4 <std+0x54>
 8002bb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bc0:	f000 ba60 	b.w	8003084 <__retarget_lock_init_recursive>
 8002bc4:	bd10      	pop	{r4, pc}
 8002bc6:	bf00      	nop
 8002bc8:	08002de5 	.word	0x08002de5
 8002bcc:	08002e07 	.word	0x08002e07
 8002bd0:	08002e3f 	.word	0x08002e3f
 8002bd4:	08002e63 	.word	0x08002e63
 8002bd8:	2000019c 	.word	0x2000019c

08002bdc <stdio_exit_handler>:
 8002bdc:	4a02      	ldr	r2, [pc, #8]	@ (8002be8 <stdio_exit_handler+0xc>)
 8002bde:	4903      	ldr	r1, [pc, #12]	@ (8002bec <stdio_exit_handler+0x10>)
 8002be0:	4803      	ldr	r0, [pc, #12]	@ (8002bf0 <stdio_exit_handler+0x14>)
 8002be2:	f000 b869 	b.w	8002cb8 <_fwalk_sglue>
 8002be6:	bf00      	nop
 8002be8:	20000014 	.word	0x20000014
 8002bec:	08003925 	.word	0x08003925
 8002bf0:	20000024 	.word	0x20000024

08002bf4 <cleanup_stdio>:
 8002bf4:	6841      	ldr	r1, [r0, #4]
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <cleanup_stdio+0x34>)
 8002bf8:	4299      	cmp	r1, r3
 8002bfa:	b510      	push	{r4, lr}
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	d001      	beq.n	8002c04 <cleanup_stdio+0x10>
 8002c00:	f000 fe90 	bl	8003924 <_fflush_r>
 8002c04:	68a1      	ldr	r1, [r4, #8]
 8002c06:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <cleanup_stdio+0x38>)
 8002c08:	4299      	cmp	r1, r3
 8002c0a:	d002      	beq.n	8002c12 <cleanup_stdio+0x1e>
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f000 fe89 	bl	8003924 <_fflush_r>
 8002c12:	68e1      	ldr	r1, [r4, #12]
 8002c14:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <cleanup_stdio+0x3c>)
 8002c16:	4299      	cmp	r1, r3
 8002c18:	d004      	beq.n	8002c24 <cleanup_stdio+0x30>
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c20:	f000 be80 	b.w	8003924 <_fflush_r>
 8002c24:	bd10      	pop	{r4, pc}
 8002c26:	bf00      	nop
 8002c28:	2000019c 	.word	0x2000019c
 8002c2c:	20000204 	.word	0x20000204
 8002c30:	2000026c 	.word	0x2000026c

08002c34 <global_stdio_init.part.0>:
 8002c34:	b510      	push	{r4, lr}
 8002c36:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <global_stdio_init.part.0+0x30>)
 8002c38:	4c0b      	ldr	r4, [pc, #44]	@ (8002c68 <global_stdio_init.part.0+0x34>)
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c6c <global_stdio_init.part.0+0x38>)
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	4620      	mov	r0, r4
 8002c40:	2200      	movs	r2, #0
 8002c42:	2104      	movs	r1, #4
 8002c44:	f7ff ff94 	bl	8002b70 <std>
 8002c48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2109      	movs	r1, #9
 8002c50:	f7ff ff8e 	bl	8002b70 <std>
 8002c54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c58:	2202      	movs	r2, #2
 8002c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c5e:	2112      	movs	r1, #18
 8002c60:	f7ff bf86 	b.w	8002b70 <std>
 8002c64:	200002d4 	.word	0x200002d4
 8002c68:	2000019c 	.word	0x2000019c
 8002c6c:	08002bdd 	.word	0x08002bdd

08002c70 <__sfp_lock_acquire>:
 8002c70:	4801      	ldr	r0, [pc, #4]	@ (8002c78 <__sfp_lock_acquire+0x8>)
 8002c72:	f000 ba08 	b.w	8003086 <__retarget_lock_acquire_recursive>
 8002c76:	bf00      	nop
 8002c78:	200002dd 	.word	0x200002dd

08002c7c <__sfp_lock_release>:
 8002c7c:	4801      	ldr	r0, [pc, #4]	@ (8002c84 <__sfp_lock_release+0x8>)
 8002c7e:	f000 ba03 	b.w	8003088 <__retarget_lock_release_recursive>
 8002c82:	bf00      	nop
 8002c84:	200002dd 	.word	0x200002dd

08002c88 <__sinit>:
 8002c88:	b510      	push	{r4, lr}
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	f7ff fff0 	bl	8002c70 <__sfp_lock_acquire>
 8002c90:	6a23      	ldr	r3, [r4, #32]
 8002c92:	b11b      	cbz	r3, 8002c9c <__sinit+0x14>
 8002c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c98:	f7ff bff0 	b.w	8002c7c <__sfp_lock_release>
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <__sinit+0x28>)
 8002c9e:	6223      	str	r3, [r4, #32]
 8002ca0:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <__sinit+0x2c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f5      	bne.n	8002c94 <__sinit+0xc>
 8002ca8:	f7ff ffc4 	bl	8002c34 <global_stdio_init.part.0>
 8002cac:	e7f2      	b.n	8002c94 <__sinit+0xc>
 8002cae:	bf00      	nop
 8002cb0:	08002bf5 	.word	0x08002bf5
 8002cb4:	200002d4 	.word	0x200002d4

08002cb8 <_fwalk_sglue>:
 8002cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cbc:	4607      	mov	r7, r0
 8002cbe:	4688      	mov	r8, r1
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	2600      	movs	r6, #0
 8002cc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cc8:	f1b9 0901 	subs.w	r9, r9, #1
 8002ccc:	d505      	bpl.n	8002cda <_fwalk_sglue+0x22>
 8002cce:	6824      	ldr	r4, [r4, #0]
 8002cd0:	2c00      	cmp	r4, #0
 8002cd2:	d1f7      	bne.n	8002cc4 <_fwalk_sglue+0xc>
 8002cd4:	4630      	mov	r0, r6
 8002cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cda:	89ab      	ldrh	r3, [r5, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d907      	bls.n	8002cf0 <_fwalk_sglue+0x38>
 8002ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	d003      	beq.n	8002cf0 <_fwalk_sglue+0x38>
 8002ce8:	4629      	mov	r1, r5
 8002cea:	4638      	mov	r0, r7
 8002cec:	47c0      	blx	r8
 8002cee:	4306      	orrs	r6, r0
 8002cf0:	3568      	adds	r5, #104	@ 0x68
 8002cf2:	e7e9      	b.n	8002cc8 <_fwalk_sglue+0x10>

08002cf4 <iprintf>:
 8002cf4:	b40f      	push	{r0, r1, r2, r3}
 8002cf6:	b507      	push	{r0, r1, r2, lr}
 8002cf8:	4906      	ldr	r1, [pc, #24]	@ (8002d14 <iprintf+0x20>)
 8002cfa:	ab04      	add	r3, sp, #16
 8002cfc:	6808      	ldr	r0, [r1, #0]
 8002cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d02:	6881      	ldr	r1, [r0, #8]
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	f000 fae3 	bl	80032d0 <_vfiprintf_r>
 8002d0a:	b003      	add	sp, #12
 8002d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d10:	b004      	add	sp, #16
 8002d12:	4770      	bx	lr
 8002d14:	20000020 	.word	0x20000020

08002d18 <putchar>:
 8002d18:	4b02      	ldr	r3, [pc, #8]	@ (8002d24 <putchar+0xc>)
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	6882      	ldr	r2, [r0, #8]
 8002d20:	f000 be8a 	b.w	8003a38 <_putc_r>
 8002d24:	20000020 	.word	0x20000020

08002d28 <_puts_r>:
 8002d28:	6a03      	ldr	r3, [r0, #32]
 8002d2a:	b570      	push	{r4, r5, r6, lr}
 8002d2c:	6884      	ldr	r4, [r0, #8]
 8002d2e:	4605      	mov	r5, r0
 8002d30:	460e      	mov	r6, r1
 8002d32:	b90b      	cbnz	r3, 8002d38 <_puts_r+0x10>
 8002d34:	f7ff ffa8 	bl	8002c88 <__sinit>
 8002d38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d3a:	07db      	lsls	r3, r3, #31
 8002d3c:	d405      	bmi.n	8002d4a <_puts_r+0x22>
 8002d3e:	89a3      	ldrh	r3, [r4, #12]
 8002d40:	0598      	lsls	r0, r3, #22
 8002d42:	d402      	bmi.n	8002d4a <_puts_r+0x22>
 8002d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d46:	f000 f99e 	bl	8003086 <__retarget_lock_acquire_recursive>
 8002d4a:	89a3      	ldrh	r3, [r4, #12]
 8002d4c:	0719      	lsls	r1, r3, #28
 8002d4e:	d502      	bpl.n	8002d56 <_puts_r+0x2e>
 8002d50:	6923      	ldr	r3, [r4, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d135      	bne.n	8002dc2 <_puts_r+0x9a>
 8002d56:	4621      	mov	r1, r4
 8002d58:	4628      	mov	r0, r5
 8002d5a:	f000 f8c5 	bl	8002ee8 <__swsetup_r>
 8002d5e:	b380      	cbz	r0, 8002dc2 <_puts_r+0x9a>
 8002d60:	f04f 35ff 	mov.w	r5, #4294967295
 8002d64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d66:	07da      	lsls	r2, r3, #31
 8002d68:	d405      	bmi.n	8002d76 <_puts_r+0x4e>
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	059b      	lsls	r3, r3, #22
 8002d6e:	d402      	bmi.n	8002d76 <_puts_r+0x4e>
 8002d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d72:	f000 f989 	bl	8003088 <__retarget_lock_release_recursive>
 8002d76:	4628      	mov	r0, r5
 8002d78:	bd70      	pop	{r4, r5, r6, pc}
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	da04      	bge.n	8002d88 <_puts_r+0x60>
 8002d7e:	69a2      	ldr	r2, [r4, #24]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	dc17      	bgt.n	8002db4 <_puts_r+0x8c>
 8002d84:	290a      	cmp	r1, #10
 8002d86:	d015      	beq.n	8002db4 <_puts_r+0x8c>
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	6022      	str	r2, [r4, #0]
 8002d8e:	7019      	strb	r1, [r3, #0]
 8002d90:	68a3      	ldr	r3, [r4, #8]
 8002d92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60a3      	str	r3, [r4, #8]
 8002d9a:	2900      	cmp	r1, #0
 8002d9c:	d1ed      	bne.n	8002d7a <_puts_r+0x52>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	da11      	bge.n	8002dc6 <_puts_r+0x9e>
 8002da2:	4622      	mov	r2, r4
 8002da4:	210a      	movs	r1, #10
 8002da6:	4628      	mov	r0, r5
 8002da8:	f000 f85f 	bl	8002e6a <__swbuf_r>
 8002dac:	3001      	adds	r0, #1
 8002dae:	d0d7      	beq.n	8002d60 <_puts_r+0x38>
 8002db0:	250a      	movs	r5, #10
 8002db2:	e7d7      	b.n	8002d64 <_puts_r+0x3c>
 8002db4:	4622      	mov	r2, r4
 8002db6:	4628      	mov	r0, r5
 8002db8:	f000 f857 	bl	8002e6a <__swbuf_r>
 8002dbc:	3001      	adds	r0, #1
 8002dbe:	d1e7      	bne.n	8002d90 <_puts_r+0x68>
 8002dc0:	e7ce      	b.n	8002d60 <_puts_r+0x38>
 8002dc2:	3e01      	subs	r6, #1
 8002dc4:	e7e4      	b.n	8002d90 <_puts_r+0x68>
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	6022      	str	r2, [r4, #0]
 8002dcc:	220a      	movs	r2, #10
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e7ee      	b.n	8002db0 <_puts_r+0x88>
	...

08002dd4 <puts>:
 8002dd4:	4b02      	ldr	r3, [pc, #8]	@ (8002de0 <puts+0xc>)
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	f7ff bfa5 	b.w	8002d28 <_puts_r>
 8002dde:	bf00      	nop
 8002de0:	20000020 	.word	0x20000020

08002de4 <__sread>:
 8002de4:	b510      	push	{r4, lr}
 8002de6:	460c      	mov	r4, r1
 8002de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dec:	f000 f8fc 	bl	8002fe8 <_read_r>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	bfab      	itete	ge
 8002df4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002df6:	89a3      	ldrhlt	r3, [r4, #12]
 8002df8:	181b      	addge	r3, r3, r0
 8002dfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002dfe:	bfac      	ite	ge
 8002e00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e02:	81a3      	strhlt	r3, [r4, #12]
 8002e04:	bd10      	pop	{r4, pc}

08002e06 <__swrite>:
 8002e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e0a:	461f      	mov	r7, r3
 8002e0c:	898b      	ldrh	r3, [r1, #12]
 8002e0e:	05db      	lsls	r3, r3, #23
 8002e10:	4605      	mov	r5, r0
 8002e12:	460c      	mov	r4, r1
 8002e14:	4616      	mov	r6, r2
 8002e16:	d505      	bpl.n	8002e24 <__swrite+0x1e>
 8002e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f000 f8d0 	bl	8002fc4 <_lseek_r>
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e2e:	81a3      	strh	r3, [r4, #12]
 8002e30:	4632      	mov	r2, r6
 8002e32:	463b      	mov	r3, r7
 8002e34:	4628      	mov	r0, r5
 8002e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e3a:	f000 b8e7 	b.w	800300c <_write_r>

08002e3e <__sseek>:
 8002e3e:	b510      	push	{r4, lr}
 8002e40:	460c      	mov	r4, r1
 8002e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e46:	f000 f8bd 	bl	8002fc4 <_lseek_r>
 8002e4a:	1c43      	adds	r3, r0, #1
 8002e4c:	89a3      	ldrh	r3, [r4, #12]
 8002e4e:	bf15      	itete	ne
 8002e50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e5a:	81a3      	strheq	r3, [r4, #12]
 8002e5c:	bf18      	it	ne
 8002e5e:	81a3      	strhne	r3, [r4, #12]
 8002e60:	bd10      	pop	{r4, pc}

08002e62 <__sclose>:
 8002e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e66:	f000 b89d 	b.w	8002fa4 <_close_r>

08002e6a <__swbuf_r>:
 8002e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6c:	460e      	mov	r6, r1
 8002e6e:	4614      	mov	r4, r2
 8002e70:	4605      	mov	r5, r0
 8002e72:	b118      	cbz	r0, 8002e7c <__swbuf_r+0x12>
 8002e74:	6a03      	ldr	r3, [r0, #32]
 8002e76:	b90b      	cbnz	r3, 8002e7c <__swbuf_r+0x12>
 8002e78:	f7ff ff06 	bl	8002c88 <__sinit>
 8002e7c:	69a3      	ldr	r3, [r4, #24]
 8002e7e:	60a3      	str	r3, [r4, #8]
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	071a      	lsls	r2, r3, #28
 8002e84:	d501      	bpl.n	8002e8a <__swbuf_r+0x20>
 8002e86:	6923      	ldr	r3, [r4, #16]
 8002e88:	b943      	cbnz	r3, 8002e9c <__swbuf_r+0x32>
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f000 f82b 	bl	8002ee8 <__swsetup_r>
 8002e92:	b118      	cbz	r0, 8002e9c <__swbuf_r+0x32>
 8002e94:	f04f 37ff 	mov.w	r7, #4294967295
 8002e98:	4638      	mov	r0, r7
 8002e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	6922      	ldr	r2, [r4, #16]
 8002ea0:	1a98      	subs	r0, r3, r2
 8002ea2:	6963      	ldr	r3, [r4, #20]
 8002ea4:	b2f6      	uxtb	r6, r6
 8002ea6:	4283      	cmp	r3, r0
 8002ea8:	4637      	mov	r7, r6
 8002eaa:	dc05      	bgt.n	8002eb8 <__swbuf_r+0x4e>
 8002eac:	4621      	mov	r1, r4
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f000 fd38 	bl	8003924 <_fflush_r>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d1ed      	bne.n	8002e94 <__swbuf_r+0x2a>
 8002eb8:	68a3      	ldr	r3, [r4, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60a3      	str	r3, [r4, #8]
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	6022      	str	r2, [r4, #0]
 8002ec4:	701e      	strb	r6, [r3, #0]
 8002ec6:	6962      	ldr	r2, [r4, #20]
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d004      	beq.n	8002ed8 <__swbuf_r+0x6e>
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	07db      	lsls	r3, r3, #31
 8002ed2:	d5e1      	bpl.n	8002e98 <__swbuf_r+0x2e>
 8002ed4:	2e0a      	cmp	r6, #10
 8002ed6:	d1df      	bne.n	8002e98 <__swbuf_r+0x2e>
 8002ed8:	4621      	mov	r1, r4
 8002eda:	4628      	mov	r0, r5
 8002edc:	f000 fd22 	bl	8003924 <_fflush_r>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d0d9      	beq.n	8002e98 <__swbuf_r+0x2e>
 8002ee4:	e7d6      	b.n	8002e94 <__swbuf_r+0x2a>
	...

08002ee8 <__swsetup_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4b29      	ldr	r3, [pc, #164]	@ (8002f90 <__swsetup_r+0xa8>)
 8002eec:	4605      	mov	r5, r0
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	b118      	cbz	r0, 8002efc <__swsetup_r+0x14>
 8002ef4:	6a03      	ldr	r3, [r0, #32]
 8002ef6:	b90b      	cbnz	r3, 8002efc <__swsetup_r+0x14>
 8002ef8:	f7ff fec6 	bl	8002c88 <__sinit>
 8002efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f00:	0719      	lsls	r1, r3, #28
 8002f02:	d422      	bmi.n	8002f4a <__swsetup_r+0x62>
 8002f04:	06da      	lsls	r2, r3, #27
 8002f06:	d407      	bmi.n	8002f18 <__swsetup_r+0x30>
 8002f08:	2209      	movs	r2, #9
 8002f0a:	602a      	str	r2, [r5, #0]
 8002f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f10:	81a3      	strh	r3, [r4, #12]
 8002f12:	f04f 30ff 	mov.w	r0, #4294967295
 8002f16:	e033      	b.n	8002f80 <__swsetup_r+0x98>
 8002f18:	0758      	lsls	r0, r3, #29
 8002f1a:	d512      	bpl.n	8002f42 <__swsetup_r+0x5a>
 8002f1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f1e:	b141      	cbz	r1, 8002f32 <__swsetup_r+0x4a>
 8002f20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f24:	4299      	cmp	r1, r3
 8002f26:	d002      	beq.n	8002f2e <__swsetup_r+0x46>
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f000 f8af 	bl	800308c <_free_r>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f38:	81a3      	strh	r3, [r4, #12]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	6063      	str	r3, [r4, #4]
 8002f3e:	6923      	ldr	r3, [r4, #16]
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	89a3      	ldrh	r3, [r4, #12]
 8002f44:	f043 0308 	orr.w	r3, r3, #8
 8002f48:	81a3      	strh	r3, [r4, #12]
 8002f4a:	6923      	ldr	r3, [r4, #16]
 8002f4c:	b94b      	cbnz	r3, 8002f62 <__swsetup_r+0x7a>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f58:	d003      	beq.n	8002f62 <__swsetup_r+0x7a>
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 fd2f 	bl	80039c0 <__smakebuf_r>
 8002f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f66:	f013 0201 	ands.w	r2, r3, #1
 8002f6a:	d00a      	beq.n	8002f82 <__swsetup_r+0x9a>
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	60a2      	str	r2, [r4, #8]
 8002f70:	6962      	ldr	r2, [r4, #20]
 8002f72:	4252      	negs	r2, r2
 8002f74:	61a2      	str	r2, [r4, #24]
 8002f76:	6922      	ldr	r2, [r4, #16]
 8002f78:	b942      	cbnz	r2, 8002f8c <__swsetup_r+0xa4>
 8002f7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f7e:	d1c5      	bne.n	8002f0c <__swsetup_r+0x24>
 8002f80:	bd38      	pop	{r3, r4, r5, pc}
 8002f82:	0799      	lsls	r1, r3, #30
 8002f84:	bf58      	it	pl
 8002f86:	6962      	ldrpl	r2, [r4, #20]
 8002f88:	60a2      	str	r2, [r4, #8]
 8002f8a:	e7f4      	b.n	8002f76 <__swsetup_r+0x8e>
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	e7f7      	b.n	8002f80 <__swsetup_r+0x98>
 8002f90:	20000020 	.word	0x20000020

08002f94 <memset>:
 8002f94:	4402      	add	r2, r0
 8002f96:	4603      	mov	r3, r0
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d100      	bne.n	8002f9e <memset+0xa>
 8002f9c:	4770      	bx	lr
 8002f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa2:	e7f9      	b.n	8002f98 <memset+0x4>

08002fa4 <_close_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4d06      	ldr	r5, [pc, #24]	@ (8002fc0 <_close_r+0x1c>)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	4604      	mov	r4, r0
 8002fac:	4608      	mov	r0, r1
 8002fae:	602b      	str	r3, [r5, #0]
 8002fb0:	f7ff fc1a 	bl	80027e8 <_close>
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	d102      	bne.n	8002fbe <_close_r+0x1a>
 8002fb8:	682b      	ldr	r3, [r5, #0]
 8002fba:	b103      	cbz	r3, 8002fbe <_close_r+0x1a>
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
 8002fc0:	200002d8 	.word	0x200002d8

08002fc4 <_lseek_r>:
 8002fc4:	b538      	push	{r3, r4, r5, lr}
 8002fc6:	4d07      	ldr	r5, [pc, #28]	@ (8002fe4 <_lseek_r+0x20>)
 8002fc8:	4604      	mov	r4, r0
 8002fca:	4608      	mov	r0, r1
 8002fcc:	4611      	mov	r1, r2
 8002fce:	2200      	movs	r2, #0
 8002fd0:	602a      	str	r2, [r5, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f7ff fbc9 	bl	800276a <_lseek>
 8002fd8:	1c43      	adds	r3, r0, #1
 8002fda:	d102      	bne.n	8002fe2 <_lseek_r+0x1e>
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	b103      	cbz	r3, 8002fe2 <_lseek_r+0x1e>
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	bd38      	pop	{r3, r4, r5, pc}
 8002fe4:	200002d8 	.word	0x200002d8

08002fe8 <_read_r>:
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	4d07      	ldr	r5, [pc, #28]	@ (8003008 <_read_r+0x20>)
 8002fec:	4604      	mov	r4, r0
 8002fee:	4608      	mov	r0, r1
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	602a      	str	r2, [r5, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f7ff fb61 	bl	80026be <_read>
 8002ffc:	1c43      	adds	r3, r0, #1
 8002ffe:	d102      	bne.n	8003006 <_read_r+0x1e>
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	b103      	cbz	r3, 8003006 <_read_r+0x1e>
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	bd38      	pop	{r3, r4, r5, pc}
 8003008:	200002d8 	.word	0x200002d8

0800300c <_write_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4d07      	ldr	r5, [pc, #28]	@ (800302c <_write_r+0x20>)
 8003010:	4604      	mov	r4, r0
 8003012:	4608      	mov	r0, r1
 8003014:	4611      	mov	r1, r2
 8003016:	2200      	movs	r2, #0
 8003018:	602a      	str	r2, [r5, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	f7ff fbb7 	bl	800278e <_write>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d102      	bne.n	800302a <_write_r+0x1e>
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	b103      	cbz	r3, 800302a <_write_r+0x1e>
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	200002d8 	.word	0x200002d8

08003030 <__errno>:
 8003030:	4b01      	ldr	r3, [pc, #4]	@ (8003038 <__errno+0x8>)
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000020 	.word	0x20000020

0800303c <__libc_init_array>:
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	4d0d      	ldr	r5, [pc, #52]	@ (8003074 <__libc_init_array+0x38>)
 8003040:	4c0d      	ldr	r4, [pc, #52]	@ (8003078 <__libc_init_array+0x3c>)
 8003042:	1b64      	subs	r4, r4, r5
 8003044:	10a4      	asrs	r4, r4, #2
 8003046:	2600      	movs	r6, #0
 8003048:	42a6      	cmp	r6, r4
 800304a:	d109      	bne.n	8003060 <__libc_init_array+0x24>
 800304c:	4d0b      	ldr	r5, [pc, #44]	@ (800307c <__libc_init_array+0x40>)
 800304e:	4c0c      	ldr	r4, [pc, #48]	@ (8003080 <__libc_init_array+0x44>)
 8003050:	f000 fd58 	bl	8003b04 <_init>
 8003054:	1b64      	subs	r4, r4, r5
 8003056:	10a4      	asrs	r4, r4, #2
 8003058:	2600      	movs	r6, #0
 800305a:	42a6      	cmp	r6, r4
 800305c:	d105      	bne.n	800306a <__libc_init_array+0x2e>
 800305e:	bd70      	pop	{r4, r5, r6, pc}
 8003060:	f855 3b04 	ldr.w	r3, [r5], #4
 8003064:	4798      	blx	r3
 8003066:	3601      	adds	r6, #1
 8003068:	e7ee      	b.n	8003048 <__libc_init_array+0xc>
 800306a:	f855 3b04 	ldr.w	r3, [r5], #4
 800306e:	4798      	blx	r3
 8003070:	3601      	adds	r6, #1
 8003072:	e7f2      	b.n	800305a <__libc_init_array+0x1e>
 8003074:	08003c34 	.word	0x08003c34
 8003078:	08003c34 	.word	0x08003c34
 800307c:	08003c34 	.word	0x08003c34
 8003080:	08003c38 	.word	0x08003c38

08003084 <__retarget_lock_init_recursive>:
 8003084:	4770      	bx	lr

08003086 <__retarget_lock_acquire_recursive>:
 8003086:	4770      	bx	lr

08003088 <__retarget_lock_release_recursive>:
 8003088:	4770      	bx	lr
	...

0800308c <_free_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4605      	mov	r5, r0
 8003090:	2900      	cmp	r1, #0
 8003092:	d041      	beq.n	8003118 <_free_r+0x8c>
 8003094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003098:	1f0c      	subs	r4, r1, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	bfb8      	it	lt
 800309e:	18e4      	addlt	r4, r4, r3
 80030a0:	f000 f8e0 	bl	8003264 <__malloc_lock>
 80030a4:	4a1d      	ldr	r2, [pc, #116]	@ (800311c <_free_r+0x90>)
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	b933      	cbnz	r3, 80030b8 <_free_r+0x2c>
 80030aa:	6063      	str	r3, [r4, #4]
 80030ac:	6014      	str	r4, [r2, #0]
 80030ae:	4628      	mov	r0, r5
 80030b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030b4:	f000 b8dc 	b.w	8003270 <__malloc_unlock>
 80030b8:	42a3      	cmp	r3, r4
 80030ba:	d908      	bls.n	80030ce <_free_r+0x42>
 80030bc:	6820      	ldr	r0, [r4, #0]
 80030be:	1821      	adds	r1, r4, r0
 80030c0:	428b      	cmp	r3, r1
 80030c2:	bf01      	itttt	eq
 80030c4:	6819      	ldreq	r1, [r3, #0]
 80030c6:	685b      	ldreq	r3, [r3, #4]
 80030c8:	1809      	addeq	r1, r1, r0
 80030ca:	6021      	streq	r1, [r4, #0]
 80030cc:	e7ed      	b.n	80030aa <_free_r+0x1e>
 80030ce:	461a      	mov	r2, r3
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	b10b      	cbz	r3, 80030d8 <_free_r+0x4c>
 80030d4:	42a3      	cmp	r3, r4
 80030d6:	d9fa      	bls.n	80030ce <_free_r+0x42>
 80030d8:	6811      	ldr	r1, [r2, #0]
 80030da:	1850      	adds	r0, r2, r1
 80030dc:	42a0      	cmp	r0, r4
 80030de:	d10b      	bne.n	80030f8 <_free_r+0x6c>
 80030e0:	6820      	ldr	r0, [r4, #0]
 80030e2:	4401      	add	r1, r0
 80030e4:	1850      	adds	r0, r2, r1
 80030e6:	4283      	cmp	r3, r0
 80030e8:	6011      	str	r1, [r2, #0]
 80030ea:	d1e0      	bne.n	80030ae <_free_r+0x22>
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	6053      	str	r3, [r2, #4]
 80030f2:	4408      	add	r0, r1
 80030f4:	6010      	str	r0, [r2, #0]
 80030f6:	e7da      	b.n	80030ae <_free_r+0x22>
 80030f8:	d902      	bls.n	8003100 <_free_r+0x74>
 80030fa:	230c      	movs	r3, #12
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	e7d6      	b.n	80030ae <_free_r+0x22>
 8003100:	6820      	ldr	r0, [r4, #0]
 8003102:	1821      	adds	r1, r4, r0
 8003104:	428b      	cmp	r3, r1
 8003106:	bf04      	itt	eq
 8003108:	6819      	ldreq	r1, [r3, #0]
 800310a:	685b      	ldreq	r3, [r3, #4]
 800310c:	6063      	str	r3, [r4, #4]
 800310e:	bf04      	itt	eq
 8003110:	1809      	addeq	r1, r1, r0
 8003112:	6021      	streq	r1, [r4, #0]
 8003114:	6054      	str	r4, [r2, #4]
 8003116:	e7ca      	b.n	80030ae <_free_r+0x22>
 8003118:	bd38      	pop	{r3, r4, r5, pc}
 800311a:	bf00      	nop
 800311c:	200002e4 	.word	0x200002e4

08003120 <sbrk_aligned>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	4e0f      	ldr	r6, [pc, #60]	@ (8003160 <sbrk_aligned+0x40>)
 8003124:	460c      	mov	r4, r1
 8003126:	6831      	ldr	r1, [r6, #0]
 8003128:	4605      	mov	r5, r0
 800312a:	b911      	cbnz	r1, 8003132 <sbrk_aligned+0x12>
 800312c:	f000 fcda 	bl	8003ae4 <_sbrk_r>
 8003130:	6030      	str	r0, [r6, #0]
 8003132:	4621      	mov	r1, r4
 8003134:	4628      	mov	r0, r5
 8003136:	f000 fcd5 	bl	8003ae4 <_sbrk_r>
 800313a:	1c43      	adds	r3, r0, #1
 800313c:	d103      	bne.n	8003146 <sbrk_aligned+0x26>
 800313e:	f04f 34ff 	mov.w	r4, #4294967295
 8003142:	4620      	mov	r0, r4
 8003144:	bd70      	pop	{r4, r5, r6, pc}
 8003146:	1cc4      	adds	r4, r0, #3
 8003148:	f024 0403 	bic.w	r4, r4, #3
 800314c:	42a0      	cmp	r0, r4
 800314e:	d0f8      	beq.n	8003142 <sbrk_aligned+0x22>
 8003150:	1a21      	subs	r1, r4, r0
 8003152:	4628      	mov	r0, r5
 8003154:	f000 fcc6 	bl	8003ae4 <_sbrk_r>
 8003158:	3001      	adds	r0, #1
 800315a:	d1f2      	bne.n	8003142 <sbrk_aligned+0x22>
 800315c:	e7ef      	b.n	800313e <sbrk_aligned+0x1e>
 800315e:	bf00      	nop
 8003160:	200002e0 	.word	0x200002e0

08003164 <_malloc_r>:
 8003164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003168:	1ccd      	adds	r5, r1, #3
 800316a:	f025 0503 	bic.w	r5, r5, #3
 800316e:	3508      	adds	r5, #8
 8003170:	2d0c      	cmp	r5, #12
 8003172:	bf38      	it	cc
 8003174:	250c      	movcc	r5, #12
 8003176:	2d00      	cmp	r5, #0
 8003178:	4606      	mov	r6, r0
 800317a:	db01      	blt.n	8003180 <_malloc_r+0x1c>
 800317c:	42a9      	cmp	r1, r5
 800317e:	d904      	bls.n	800318a <_malloc_r+0x26>
 8003180:	230c      	movs	r3, #12
 8003182:	6033      	str	r3, [r6, #0]
 8003184:	2000      	movs	r0, #0
 8003186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800318a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003260 <_malloc_r+0xfc>
 800318e:	f000 f869 	bl	8003264 <__malloc_lock>
 8003192:	f8d8 3000 	ldr.w	r3, [r8]
 8003196:	461c      	mov	r4, r3
 8003198:	bb44      	cbnz	r4, 80031ec <_malloc_r+0x88>
 800319a:	4629      	mov	r1, r5
 800319c:	4630      	mov	r0, r6
 800319e:	f7ff ffbf 	bl	8003120 <sbrk_aligned>
 80031a2:	1c43      	adds	r3, r0, #1
 80031a4:	4604      	mov	r4, r0
 80031a6:	d158      	bne.n	800325a <_malloc_r+0xf6>
 80031a8:	f8d8 4000 	ldr.w	r4, [r8]
 80031ac:	4627      	mov	r7, r4
 80031ae:	2f00      	cmp	r7, #0
 80031b0:	d143      	bne.n	800323a <_malloc_r+0xd6>
 80031b2:	2c00      	cmp	r4, #0
 80031b4:	d04b      	beq.n	800324e <_malloc_r+0xea>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	4639      	mov	r1, r7
 80031ba:	4630      	mov	r0, r6
 80031bc:	eb04 0903 	add.w	r9, r4, r3
 80031c0:	f000 fc90 	bl	8003ae4 <_sbrk_r>
 80031c4:	4581      	cmp	r9, r0
 80031c6:	d142      	bne.n	800324e <_malloc_r+0xea>
 80031c8:	6821      	ldr	r1, [r4, #0]
 80031ca:	1a6d      	subs	r5, r5, r1
 80031cc:	4629      	mov	r1, r5
 80031ce:	4630      	mov	r0, r6
 80031d0:	f7ff ffa6 	bl	8003120 <sbrk_aligned>
 80031d4:	3001      	adds	r0, #1
 80031d6:	d03a      	beq.n	800324e <_malloc_r+0xea>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	442b      	add	r3, r5
 80031dc:	6023      	str	r3, [r4, #0]
 80031de:	f8d8 3000 	ldr.w	r3, [r8]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	bb62      	cbnz	r2, 8003240 <_malloc_r+0xdc>
 80031e6:	f8c8 7000 	str.w	r7, [r8]
 80031ea:	e00f      	b.n	800320c <_malloc_r+0xa8>
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	1b52      	subs	r2, r2, r5
 80031f0:	d420      	bmi.n	8003234 <_malloc_r+0xd0>
 80031f2:	2a0b      	cmp	r2, #11
 80031f4:	d917      	bls.n	8003226 <_malloc_r+0xc2>
 80031f6:	1961      	adds	r1, r4, r5
 80031f8:	42a3      	cmp	r3, r4
 80031fa:	6025      	str	r5, [r4, #0]
 80031fc:	bf18      	it	ne
 80031fe:	6059      	strne	r1, [r3, #4]
 8003200:	6863      	ldr	r3, [r4, #4]
 8003202:	bf08      	it	eq
 8003204:	f8c8 1000 	streq.w	r1, [r8]
 8003208:	5162      	str	r2, [r4, r5]
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	4630      	mov	r0, r6
 800320e:	f000 f82f 	bl	8003270 <__malloc_unlock>
 8003212:	f104 000b 	add.w	r0, r4, #11
 8003216:	1d23      	adds	r3, r4, #4
 8003218:	f020 0007 	bic.w	r0, r0, #7
 800321c:	1ac2      	subs	r2, r0, r3
 800321e:	bf1c      	itt	ne
 8003220:	1a1b      	subne	r3, r3, r0
 8003222:	50a3      	strne	r3, [r4, r2]
 8003224:	e7af      	b.n	8003186 <_malloc_r+0x22>
 8003226:	6862      	ldr	r2, [r4, #4]
 8003228:	42a3      	cmp	r3, r4
 800322a:	bf0c      	ite	eq
 800322c:	f8c8 2000 	streq.w	r2, [r8]
 8003230:	605a      	strne	r2, [r3, #4]
 8003232:	e7eb      	b.n	800320c <_malloc_r+0xa8>
 8003234:	4623      	mov	r3, r4
 8003236:	6864      	ldr	r4, [r4, #4]
 8003238:	e7ae      	b.n	8003198 <_malloc_r+0x34>
 800323a:	463c      	mov	r4, r7
 800323c:	687f      	ldr	r7, [r7, #4]
 800323e:	e7b6      	b.n	80031ae <_malloc_r+0x4a>
 8003240:	461a      	mov	r2, r3
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	42a3      	cmp	r3, r4
 8003246:	d1fb      	bne.n	8003240 <_malloc_r+0xdc>
 8003248:	2300      	movs	r3, #0
 800324a:	6053      	str	r3, [r2, #4]
 800324c:	e7de      	b.n	800320c <_malloc_r+0xa8>
 800324e:	230c      	movs	r3, #12
 8003250:	6033      	str	r3, [r6, #0]
 8003252:	4630      	mov	r0, r6
 8003254:	f000 f80c 	bl	8003270 <__malloc_unlock>
 8003258:	e794      	b.n	8003184 <_malloc_r+0x20>
 800325a:	6005      	str	r5, [r0, #0]
 800325c:	e7d6      	b.n	800320c <_malloc_r+0xa8>
 800325e:	bf00      	nop
 8003260:	200002e4 	.word	0x200002e4

08003264 <__malloc_lock>:
 8003264:	4801      	ldr	r0, [pc, #4]	@ (800326c <__malloc_lock+0x8>)
 8003266:	f7ff bf0e 	b.w	8003086 <__retarget_lock_acquire_recursive>
 800326a:	bf00      	nop
 800326c:	200002dc 	.word	0x200002dc

08003270 <__malloc_unlock>:
 8003270:	4801      	ldr	r0, [pc, #4]	@ (8003278 <__malloc_unlock+0x8>)
 8003272:	f7ff bf09 	b.w	8003088 <__retarget_lock_release_recursive>
 8003276:	bf00      	nop
 8003278:	200002dc 	.word	0x200002dc

0800327c <__sfputc_r>:
 800327c:	6893      	ldr	r3, [r2, #8]
 800327e:	3b01      	subs	r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	b410      	push	{r4}
 8003284:	6093      	str	r3, [r2, #8]
 8003286:	da08      	bge.n	800329a <__sfputc_r+0x1e>
 8003288:	6994      	ldr	r4, [r2, #24]
 800328a:	42a3      	cmp	r3, r4
 800328c:	db01      	blt.n	8003292 <__sfputc_r+0x16>
 800328e:	290a      	cmp	r1, #10
 8003290:	d103      	bne.n	800329a <__sfputc_r+0x1e>
 8003292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003296:	f7ff bde8 	b.w	8002e6a <__swbuf_r>
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	1c58      	adds	r0, r3, #1
 800329e:	6010      	str	r0, [r2, #0]
 80032a0:	7019      	strb	r1, [r3, #0]
 80032a2:	4608      	mov	r0, r1
 80032a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <__sfputs_r>:
 80032aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ac:	4606      	mov	r6, r0
 80032ae:	460f      	mov	r7, r1
 80032b0:	4614      	mov	r4, r2
 80032b2:	18d5      	adds	r5, r2, r3
 80032b4:	42ac      	cmp	r4, r5
 80032b6:	d101      	bne.n	80032bc <__sfputs_r+0x12>
 80032b8:	2000      	movs	r0, #0
 80032ba:	e007      	b.n	80032cc <__sfputs_r+0x22>
 80032bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032c0:	463a      	mov	r2, r7
 80032c2:	4630      	mov	r0, r6
 80032c4:	f7ff ffda 	bl	800327c <__sfputc_r>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d1f3      	bne.n	80032b4 <__sfputs_r+0xa>
 80032cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032d0 <_vfiprintf_r>:
 80032d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d4:	460d      	mov	r5, r1
 80032d6:	b09d      	sub	sp, #116	@ 0x74
 80032d8:	4614      	mov	r4, r2
 80032da:	4698      	mov	r8, r3
 80032dc:	4606      	mov	r6, r0
 80032de:	b118      	cbz	r0, 80032e8 <_vfiprintf_r+0x18>
 80032e0:	6a03      	ldr	r3, [r0, #32]
 80032e2:	b90b      	cbnz	r3, 80032e8 <_vfiprintf_r+0x18>
 80032e4:	f7ff fcd0 	bl	8002c88 <__sinit>
 80032e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032ea:	07d9      	lsls	r1, r3, #31
 80032ec:	d405      	bmi.n	80032fa <_vfiprintf_r+0x2a>
 80032ee:	89ab      	ldrh	r3, [r5, #12]
 80032f0:	059a      	lsls	r2, r3, #22
 80032f2:	d402      	bmi.n	80032fa <_vfiprintf_r+0x2a>
 80032f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032f6:	f7ff fec6 	bl	8003086 <__retarget_lock_acquire_recursive>
 80032fa:	89ab      	ldrh	r3, [r5, #12]
 80032fc:	071b      	lsls	r3, r3, #28
 80032fe:	d501      	bpl.n	8003304 <_vfiprintf_r+0x34>
 8003300:	692b      	ldr	r3, [r5, #16]
 8003302:	b99b      	cbnz	r3, 800332c <_vfiprintf_r+0x5c>
 8003304:	4629      	mov	r1, r5
 8003306:	4630      	mov	r0, r6
 8003308:	f7ff fdee 	bl	8002ee8 <__swsetup_r>
 800330c:	b170      	cbz	r0, 800332c <_vfiprintf_r+0x5c>
 800330e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003310:	07dc      	lsls	r4, r3, #31
 8003312:	d504      	bpl.n	800331e <_vfiprintf_r+0x4e>
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	b01d      	add	sp, #116	@ 0x74
 800331a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331e:	89ab      	ldrh	r3, [r5, #12]
 8003320:	0598      	lsls	r0, r3, #22
 8003322:	d4f7      	bmi.n	8003314 <_vfiprintf_r+0x44>
 8003324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003326:	f7ff feaf 	bl	8003088 <__retarget_lock_release_recursive>
 800332a:	e7f3      	b.n	8003314 <_vfiprintf_r+0x44>
 800332c:	2300      	movs	r3, #0
 800332e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003330:	2320      	movs	r3, #32
 8003332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003336:	f8cd 800c 	str.w	r8, [sp, #12]
 800333a:	2330      	movs	r3, #48	@ 0x30
 800333c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80034ec <_vfiprintf_r+0x21c>
 8003340:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003344:	f04f 0901 	mov.w	r9, #1
 8003348:	4623      	mov	r3, r4
 800334a:	469a      	mov	sl, r3
 800334c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003350:	b10a      	cbz	r2, 8003356 <_vfiprintf_r+0x86>
 8003352:	2a25      	cmp	r2, #37	@ 0x25
 8003354:	d1f9      	bne.n	800334a <_vfiprintf_r+0x7a>
 8003356:	ebba 0b04 	subs.w	fp, sl, r4
 800335a:	d00b      	beq.n	8003374 <_vfiprintf_r+0xa4>
 800335c:	465b      	mov	r3, fp
 800335e:	4622      	mov	r2, r4
 8003360:	4629      	mov	r1, r5
 8003362:	4630      	mov	r0, r6
 8003364:	f7ff ffa1 	bl	80032aa <__sfputs_r>
 8003368:	3001      	adds	r0, #1
 800336a:	f000 80a7 	beq.w	80034bc <_vfiprintf_r+0x1ec>
 800336e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003370:	445a      	add	r2, fp
 8003372:	9209      	str	r2, [sp, #36]	@ 0x24
 8003374:	f89a 3000 	ldrb.w	r3, [sl]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 809f 	beq.w	80034bc <_vfiprintf_r+0x1ec>
 800337e:	2300      	movs	r3, #0
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003388:	f10a 0a01 	add.w	sl, sl, #1
 800338c:	9304      	str	r3, [sp, #16]
 800338e:	9307      	str	r3, [sp, #28]
 8003390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003394:	931a      	str	r3, [sp, #104]	@ 0x68
 8003396:	4654      	mov	r4, sl
 8003398:	2205      	movs	r2, #5
 800339a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800339e:	4853      	ldr	r0, [pc, #332]	@ (80034ec <_vfiprintf_r+0x21c>)
 80033a0:	f7fc ff2e 	bl	8000200 <memchr>
 80033a4:	9a04      	ldr	r2, [sp, #16]
 80033a6:	b9d8      	cbnz	r0, 80033e0 <_vfiprintf_r+0x110>
 80033a8:	06d1      	lsls	r1, r2, #27
 80033aa:	bf44      	itt	mi
 80033ac:	2320      	movmi	r3, #32
 80033ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033b2:	0713      	lsls	r3, r2, #28
 80033b4:	bf44      	itt	mi
 80033b6:	232b      	movmi	r3, #43	@ 0x2b
 80033b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033bc:	f89a 3000 	ldrb.w	r3, [sl]
 80033c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80033c2:	d015      	beq.n	80033f0 <_vfiprintf_r+0x120>
 80033c4:	9a07      	ldr	r2, [sp, #28]
 80033c6:	4654      	mov	r4, sl
 80033c8:	2000      	movs	r0, #0
 80033ca:	f04f 0c0a 	mov.w	ip, #10
 80033ce:	4621      	mov	r1, r4
 80033d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033d4:	3b30      	subs	r3, #48	@ 0x30
 80033d6:	2b09      	cmp	r3, #9
 80033d8:	d94b      	bls.n	8003472 <_vfiprintf_r+0x1a2>
 80033da:	b1b0      	cbz	r0, 800340a <_vfiprintf_r+0x13a>
 80033dc:	9207      	str	r2, [sp, #28]
 80033de:	e014      	b.n	800340a <_vfiprintf_r+0x13a>
 80033e0:	eba0 0308 	sub.w	r3, r0, r8
 80033e4:	fa09 f303 	lsl.w	r3, r9, r3
 80033e8:	4313      	orrs	r3, r2
 80033ea:	9304      	str	r3, [sp, #16]
 80033ec:	46a2      	mov	sl, r4
 80033ee:	e7d2      	b.n	8003396 <_vfiprintf_r+0xc6>
 80033f0:	9b03      	ldr	r3, [sp, #12]
 80033f2:	1d19      	adds	r1, r3, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	9103      	str	r1, [sp, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bfbb      	ittet	lt
 80033fc:	425b      	neglt	r3, r3
 80033fe:	f042 0202 	orrlt.w	r2, r2, #2
 8003402:	9307      	strge	r3, [sp, #28]
 8003404:	9307      	strlt	r3, [sp, #28]
 8003406:	bfb8      	it	lt
 8003408:	9204      	strlt	r2, [sp, #16]
 800340a:	7823      	ldrb	r3, [r4, #0]
 800340c:	2b2e      	cmp	r3, #46	@ 0x2e
 800340e:	d10a      	bne.n	8003426 <_vfiprintf_r+0x156>
 8003410:	7863      	ldrb	r3, [r4, #1]
 8003412:	2b2a      	cmp	r3, #42	@ 0x2a
 8003414:	d132      	bne.n	800347c <_vfiprintf_r+0x1ac>
 8003416:	9b03      	ldr	r3, [sp, #12]
 8003418:	1d1a      	adds	r2, r3, #4
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	9203      	str	r2, [sp, #12]
 800341e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003422:	3402      	adds	r4, #2
 8003424:	9305      	str	r3, [sp, #20]
 8003426:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80034fc <_vfiprintf_r+0x22c>
 800342a:	7821      	ldrb	r1, [r4, #0]
 800342c:	2203      	movs	r2, #3
 800342e:	4650      	mov	r0, sl
 8003430:	f7fc fee6 	bl	8000200 <memchr>
 8003434:	b138      	cbz	r0, 8003446 <_vfiprintf_r+0x176>
 8003436:	9b04      	ldr	r3, [sp, #16]
 8003438:	eba0 000a 	sub.w	r0, r0, sl
 800343c:	2240      	movs	r2, #64	@ 0x40
 800343e:	4082      	lsls	r2, r0
 8003440:	4313      	orrs	r3, r2
 8003442:	3401      	adds	r4, #1
 8003444:	9304      	str	r3, [sp, #16]
 8003446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800344a:	4829      	ldr	r0, [pc, #164]	@ (80034f0 <_vfiprintf_r+0x220>)
 800344c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003450:	2206      	movs	r2, #6
 8003452:	f7fc fed5 	bl	8000200 <memchr>
 8003456:	2800      	cmp	r0, #0
 8003458:	d03f      	beq.n	80034da <_vfiprintf_r+0x20a>
 800345a:	4b26      	ldr	r3, [pc, #152]	@ (80034f4 <_vfiprintf_r+0x224>)
 800345c:	bb1b      	cbnz	r3, 80034a6 <_vfiprintf_r+0x1d6>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	3307      	adds	r3, #7
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	3308      	adds	r3, #8
 8003468:	9303      	str	r3, [sp, #12]
 800346a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800346c:	443b      	add	r3, r7
 800346e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003470:	e76a      	b.n	8003348 <_vfiprintf_r+0x78>
 8003472:	fb0c 3202 	mla	r2, ip, r2, r3
 8003476:	460c      	mov	r4, r1
 8003478:	2001      	movs	r0, #1
 800347a:	e7a8      	b.n	80033ce <_vfiprintf_r+0xfe>
 800347c:	2300      	movs	r3, #0
 800347e:	3401      	adds	r4, #1
 8003480:	9305      	str	r3, [sp, #20]
 8003482:	4619      	mov	r1, r3
 8003484:	f04f 0c0a 	mov.w	ip, #10
 8003488:	4620      	mov	r0, r4
 800348a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800348e:	3a30      	subs	r2, #48	@ 0x30
 8003490:	2a09      	cmp	r2, #9
 8003492:	d903      	bls.n	800349c <_vfiprintf_r+0x1cc>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0c6      	beq.n	8003426 <_vfiprintf_r+0x156>
 8003498:	9105      	str	r1, [sp, #20]
 800349a:	e7c4      	b.n	8003426 <_vfiprintf_r+0x156>
 800349c:	fb0c 2101 	mla	r1, ip, r1, r2
 80034a0:	4604      	mov	r4, r0
 80034a2:	2301      	movs	r3, #1
 80034a4:	e7f0      	b.n	8003488 <_vfiprintf_r+0x1b8>
 80034a6:	ab03      	add	r3, sp, #12
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	462a      	mov	r2, r5
 80034ac:	4b12      	ldr	r3, [pc, #72]	@ (80034f8 <_vfiprintf_r+0x228>)
 80034ae:	a904      	add	r1, sp, #16
 80034b0:	4630      	mov	r0, r6
 80034b2:	f3af 8000 	nop.w
 80034b6:	4607      	mov	r7, r0
 80034b8:	1c78      	adds	r0, r7, #1
 80034ba:	d1d6      	bne.n	800346a <_vfiprintf_r+0x19a>
 80034bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034be:	07d9      	lsls	r1, r3, #31
 80034c0:	d405      	bmi.n	80034ce <_vfiprintf_r+0x1fe>
 80034c2:	89ab      	ldrh	r3, [r5, #12]
 80034c4:	059a      	lsls	r2, r3, #22
 80034c6:	d402      	bmi.n	80034ce <_vfiprintf_r+0x1fe>
 80034c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034ca:	f7ff fddd 	bl	8003088 <__retarget_lock_release_recursive>
 80034ce:	89ab      	ldrh	r3, [r5, #12]
 80034d0:	065b      	lsls	r3, r3, #25
 80034d2:	f53f af1f 	bmi.w	8003314 <_vfiprintf_r+0x44>
 80034d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034d8:	e71e      	b.n	8003318 <_vfiprintf_r+0x48>
 80034da:	ab03      	add	r3, sp, #12
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	462a      	mov	r2, r5
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <_vfiprintf_r+0x228>)
 80034e2:	a904      	add	r1, sp, #16
 80034e4:	4630      	mov	r0, r6
 80034e6:	f000 f879 	bl	80035dc <_printf_i>
 80034ea:	e7e4      	b.n	80034b6 <_vfiprintf_r+0x1e6>
 80034ec:	08003bf6 	.word	0x08003bf6
 80034f0:	08003c00 	.word	0x08003c00
 80034f4:	00000000 	.word	0x00000000
 80034f8:	080032ab 	.word	0x080032ab
 80034fc:	08003bfc 	.word	0x08003bfc

08003500 <_printf_common>:
 8003500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	4616      	mov	r6, r2
 8003506:	4698      	mov	r8, r3
 8003508:	688a      	ldr	r2, [r1, #8]
 800350a:	690b      	ldr	r3, [r1, #16]
 800350c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003510:	4293      	cmp	r3, r2
 8003512:	bfb8      	it	lt
 8003514:	4613      	movlt	r3, r2
 8003516:	6033      	str	r3, [r6, #0]
 8003518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800351c:	4607      	mov	r7, r0
 800351e:	460c      	mov	r4, r1
 8003520:	b10a      	cbz	r2, 8003526 <_printf_common+0x26>
 8003522:	3301      	adds	r3, #1
 8003524:	6033      	str	r3, [r6, #0]
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	0699      	lsls	r1, r3, #26
 800352a:	bf42      	ittt	mi
 800352c:	6833      	ldrmi	r3, [r6, #0]
 800352e:	3302      	addmi	r3, #2
 8003530:	6033      	strmi	r3, [r6, #0]
 8003532:	6825      	ldr	r5, [r4, #0]
 8003534:	f015 0506 	ands.w	r5, r5, #6
 8003538:	d106      	bne.n	8003548 <_printf_common+0x48>
 800353a:	f104 0a19 	add.w	sl, r4, #25
 800353e:	68e3      	ldr	r3, [r4, #12]
 8003540:	6832      	ldr	r2, [r6, #0]
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	42ab      	cmp	r3, r5
 8003546:	dc26      	bgt.n	8003596 <_printf_common+0x96>
 8003548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800354c:	6822      	ldr	r2, [r4, #0]
 800354e:	3b00      	subs	r3, #0
 8003550:	bf18      	it	ne
 8003552:	2301      	movne	r3, #1
 8003554:	0692      	lsls	r2, r2, #26
 8003556:	d42b      	bmi.n	80035b0 <_printf_common+0xb0>
 8003558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800355c:	4641      	mov	r1, r8
 800355e:	4638      	mov	r0, r7
 8003560:	47c8      	blx	r9
 8003562:	3001      	adds	r0, #1
 8003564:	d01e      	beq.n	80035a4 <_printf_common+0xa4>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	6922      	ldr	r2, [r4, #16]
 800356a:	f003 0306 	and.w	r3, r3, #6
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf02      	ittt	eq
 8003572:	68e5      	ldreq	r5, [r4, #12]
 8003574:	6833      	ldreq	r3, [r6, #0]
 8003576:	1aed      	subeq	r5, r5, r3
 8003578:	68a3      	ldr	r3, [r4, #8]
 800357a:	bf0c      	ite	eq
 800357c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003580:	2500      	movne	r5, #0
 8003582:	4293      	cmp	r3, r2
 8003584:	bfc4      	itt	gt
 8003586:	1a9b      	subgt	r3, r3, r2
 8003588:	18ed      	addgt	r5, r5, r3
 800358a:	2600      	movs	r6, #0
 800358c:	341a      	adds	r4, #26
 800358e:	42b5      	cmp	r5, r6
 8003590:	d11a      	bne.n	80035c8 <_printf_common+0xc8>
 8003592:	2000      	movs	r0, #0
 8003594:	e008      	b.n	80035a8 <_printf_common+0xa8>
 8003596:	2301      	movs	r3, #1
 8003598:	4652      	mov	r2, sl
 800359a:	4641      	mov	r1, r8
 800359c:	4638      	mov	r0, r7
 800359e:	47c8      	blx	r9
 80035a0:	3001      	adds	r0, #1
 80035a2:	d103      	bne.n	80035ac <_printf_common+0xac>
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ac:	3501      	adds	r5, #1
 80035ae:	e7c6      	b.n	800353e <_printf_common+0x3e>
 80035b0:	18e1      	adds	r1, r4, r3
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	2030      	movs	r0, #48	@ 0x30
 80035b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035ba:	4422      	add	r2, r4
 80035bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035c4:	3302      	adds	r3, #2
 80035c6:	e7c7      	b.n	8003558 <_printf_common+0x58>
 80035c8:	2301      	movs	r3, #1
 80035ca:	4622      	mov	r2, r4
 80035cc:	4641      	mov	r1, r8
 80035ce:	4638      	mov	r0, r7
 80035d0:	47c8      	blx	r9
 80035d2:	3001      	adds	r0, #1
 80035d4:	d0e6      	beq.n	80035a4 <_printf_common+0xa4>
 80035d6:	3601      	adds	r6, #1
 80035d8:	e7d9      	b.n	800358e <_printf_common+0x8e>
	...

080035dc <_printf_i>:
 80035dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035e0:	7e0f      	ldrb	r7, [r1, #24]
 80035e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035e4:	2f78      	cmp	r7, #120	@ 0x78
 80035e6:	4691      	mov	r9, r2
 80035e8:	4680      	mov	r8, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	469a      	mov	sl, r3
 80035ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035f2:	d807      	bhi.n	8003604 <_printf_i+0x28>
 80035f4:	2f62      	cmp	r7, #98	@ 0x62
 80035f6:	d80a      	bhi.n	800360e <_printf_i+0x32>
 80035f8:	2f00      	cmp	r7, #0
 80035fa:	f000 80d2 	beq.w	80037a2 <_printf_i+0x1c6>
 80035fe:	2f58      	cmp	r7, #88	@ 0x58
 8003600:	f000 80b9 	beq.w	8003776 <_printf_i+0x19a>
 8003604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800360c:	e03a      	b.n	8003684 <_printf_i+0xa8>
 800360e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003612:	2b15      	cmp	r3, #21
 8003614:	d8f6      	bhi.n	8003604 <_printf_i+0x28>
 8003616:	a101      	add	r1, pc, #4	@ (adr r1, 800361c <_printf_i+0x40>)
 8003618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800361c:	08003675 	.word	0x08003675
 8003620:	08003689 	.word	0x08003689
 8003624:	08003605 	.word	0x08003605
 8003628:	08003605 	.word	0x08003605
 800362c:	08003605 	.word	0x08003605
 8003630:	08003605 	.word	0x08003605
 8003634:	08003689 	.word	0x08003689
 8003638:	08003605 	.word	0x08003605
 800363c:	08003605 	.word	0x08003605
 8003640:	08003605 	.word	0x08003605
 8003644:	08003605 	.word	0x08003605
 8003648:	08003789 	.word	0x08003789
 800364c:	080036b3 	.word	0x080036b3
 8003650:	08003743 	.word	0x08003743
 8003654:	08003605 	.word	0x08003605
 8003658:	08003605 	.word	0x08003605
 800365c:	080037ab 	.word	0x080037ab
 8003660:	08003605 	.word	0x08003605
 8003664:	080036b3 	.word	0x080036b3
 8003668:	08003605 	.word	0x08003605
 800366c:	08003605 	.word	0x08003605
 8003670:	0800374b 	.word	0x0800374b
 8003674:	6833      	ldr	r3, [r6, #0]
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6032      	str	r2, [r6, #0]
 800367c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003684:	2301      	movs	r3, #1
 8003686:	e09d      	b.n	80037c4 <_printf_i+0x1e8>
 8003688:	6833      	ldr	r3, [r6, #0]
 800368a:	6820      	ldr	r0, [r4, #0]
 800368c:	1d19      	adds	r1, r3, #4
 800368e:	6031      	str	r1, [r6, #0]
 8003690:	0606      	lsls	r6, r0, #24
 8003692:	d501      	bpl.n	8003698 <_printf_i+0xbc>
 8003694:	681d      	ldr	r5, [r3, #0]
 8003696:	e003      	b.n	80036a0 <_printf_i+0xc4>
 8003698:	0645      	lsls	r5, r0, #25
 800369a:	d5fb      	bpl.n	8003694 <_printf_i+0xb8>
 800369c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036a0:	2d00      	cmp	r5, #0
 80036a2:	da03      	bge.n	80036ac <_printf_i+0xd0>
 80036a4:	232d      	movs	r3, #45	@ 0x2d
 80036a6:	426d      	negs	r5, r5
 80036a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036ac:	4859      	ldr	r0, [pc, #356]	@ (8003814 <_printf_i+0x238>)
 80036ae:	230a      	movs	r3, #10
 80036b0:	e011      	b.n	80036d6 <_printf_i+0xfa>
 80036b2:	6821      	ldr	r1, [r4, #0]
 80036b4:	6833      	ldr	r3, [r6, #0]
 80036b6:	0608      	lsls	r0, r1, #24
 80036b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80036bc:	d402      	bmi.n	80036c4 <_printf_i+0xe8>
 80036be:	0649      	lsls	r1, r1, #25
 80036c0:	bf48      	it	mi
 80036c2:	b2ad      	uxthmi	r5, r5
 80036c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80036c6:	4853      	ldr	r0, [pc, #332]	@ (8003814 <_printf_i+0x238>)
 80036c8:	6033      	str	r3, [r6, #0]
 80036ca:	bf14      	ite	ne
 80036cc:	230a      	movne	r3, #10
 80036ce:	2308      	moveq	r3, #8
 80036d0:	2100      	movs	r1, #0
 80036d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036d6:	6866      	ldr	r6, [r4, #4]
 80036d8:	60a6      	str	r6, [r4, #8]
 80036da:	2e00      	cmp	r6, #0
 80036dc:	bfa2      	ittt	ge
 80036de:	6821      	ldrge	r1, [r4, #0]
 80036e0:	f021 0104 	bicge.w	r1, r1, #4
 80036e4:	6021      	strge	r1, [r4, #0]
 80036e6:	b90d      	cbnz	r5, 80036ec <_printf_i+0x110>
 80036e8:	2e00      	cmp	r6, #0
 80036ea:	d04b      	beq.n	8003784 <_printf_i+0x1a8>
 80036ec:	4616      	mov	r6, r2
 80036ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80036f2:	fb03 5711 	mls	r7, r3, r1, r5
 80036f6:	5dc7      	ldrb	r7, [r0, r7]
 80036f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036fc:	462f      	mov	r7, r5
 80036fe:	42bb      	cmp	r3, r7
 8003700:	460d      	mov	r5, r1
 8003702:	d9f4      	bls.n	80036ee <_printf_i+0x112>
 8003704:	2b08      	cmp	r3, #8
 8003706:	d10b      	bne.n	8003720 <_printf_i+0x144>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	07df      	lsls	r7, r3, #31
 800370c:	d508      	bpl.n	8003720 <_printf_i+0x144>
 800370e:	6923      	ldr	r3, [r4, #16]
 8003710:	6861      	ldr	r1, [r4, #4]
 8003712:	4299      	cmp	r1, r3
 8003714:	bfde      	ittt	le
 8003716:	2330      	movle	r3, #48	@ 0x30
 8003718:	f806 3c01 	strble.w	r3, [r6, #-1]
 800371c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003720:	1b92      	subs	r2, r2, r6
 8003722:	6122      	str	r2, [r4, #16]
 8003724:	f8cd a000 	str.w	sl, [sp]
 8003728:	464b      	mov	r3, r9
 800372a:	aa03      	add	r2, sp, #12
 800372c:	4621      	mov	r1, r4
 800372e:	4640      	mov	r0, r8
 8003730:	f7ff fee6 	bl	8003500 <_printf_common>
 8003734:	3001      	adds	r0, #1
 8003736:	d14a      	bne.n	80037ce <_printf_i+0x1f2>
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	b004      	add	sp, #16
 800373e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	f043 0320 	orr.w	r3, r3, #32
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	4833      	ldr	r0, [pc, #204]	@ (8003818 <_printf_i+0x23c>)
 800374c:	2778      	movs	r7, #120	@ 0x78
 800374e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	6831      	ldr	r1, [r6, #0]
 8003756:	061f      	lsls	r7, r3, #24
 8003758:	f851 5b04 	ldr.w	r5, [r1], #4
 800375c:	d402      	bmi.n	8003764 <_printf_i+0x188>
 800375e:	065f      	lsls	r7, r3, #25
 8003760:	bf48      	it	mi
 8003762:	b2ad      	uxthmi	r5, r5
 8003764:	6031      	str	r1, [r6, #0]
 8003766:	07d9      	lsls	r1, r3, #31
 8003768:	bf44      	itt	mi
 800376a:	f043 0320 	orrmi.w	r3, r3, #32
 800376e:	6023      	strmi	r3, [r4, #0]
 8003770:	b11d      	cbz	r5, 800377a <_printf_i+0x19e>
 8003772:	2310      	movs	r3, #16
 8003774:	e7ac      	b.n	80036d0 <_printf_i+0xf4>
 8003776:	4827      	ldr	r0, [pc, #156]	@ (8003814 <_printf_i+0x238>)
 8003778:	e7e9      	b.n	800374e <_printf_i+0x172>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	f023 0320 	bic.w	r3, r3, #32
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	e7f6      	b.n	8003772 <_printf_i+0x196>
 8003784:	4616      	mov	r6, r2
 8003786:	e7bd      	b.n	8003704 <_printf_i+0x128>
 8003788:	6833      	ldr	r3, [r6, #0]
 800378a:	6825      	ldr	r5, [r4, #0]
 800378c:	6961      	ldr	r1, [r4, #20]
 800378e:	1d18      	adds	r0, r3, #4
 8003790:	6030      	str	r0, [r6, #0]
 8003792:	062e      	lsls	r6, r5, #24
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	d501      	bpl.n	800379c <_printf_i+0x1c0>
 8003798:	6019      	str	r1, [r3, #0]
 800379a:	e002      	b.n	80037a2 <_printf_i+0x1c6>
 800379c:	0668      	lsls	r0, r5, #25
 800379e:	d5fb      	bpl.n	8003798 <_printf_i+0x1bc>
 80037a0:	8019      	strh	r1, [r3, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	6123      	str	r3, [r4, #16]
 80037a6:	4616      	mov	r6, r2
 80037a8:	e7bc      	b.n	8003724 <_printf_i+0x148>
 80037aa:	6833      	ldr	r3, [r6, #0]
 80037ac:	1d1a      	adds	r2, r3, #4
 80037ae:	6032      	str	r2, [r6, #0]
 80037b0:	681e      	ldr	r6, [r3, #0]
 80037b2:	6862      	ldr	r2, [r4, #4]
 80037b4:	2100      	movs	r1, #0
 80037b6:	4630      	mov	r0, r6
 80037b8:	f7fc fd22 	bl	8000200 <memchr>
 80037bc:	b108      	cbz	r0, 80037c2 <_printf_i+0x1e6>
 80037be:	1b80      	subs	r0, r0, r6
 80037c0:	6060      	str	r0, [r4, #4]
 80037c2:	6863      	ldr	r3, [r4, #4]
 80037c4:	6123      	str	r3, [r4, #16]
 80037c6:	2300      	movs	r3, #0
 80037c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037cc:	e7aa      	b.n	8003724 <_printf_i+0x148>
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	4632      	mov	r2, r6
 80037d2:	4649      	mov	r1, r9
 80037d4:	4640      	mov	r0, r8
 80037d6:	47d0      	blx	sl
 80037d8:	3001      	adds	r0, #1
 80037da:	d0ad      	beq.n	8003738 <_printf_i+0x15c>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	079b      	lsls	r3, r3, #30
 80037e0:	d413      	bmi.n	800380a <_printf_i+0x22e>
 80037e2:	68e0      	ldr	r0, [r4, #12]
 80037e4:	9b03      	ldr	r3, [sp, #12]
 80037e6:	4298      	cmp	r0, r3
 80037e8:	bfb8      	it	lt
 80037ea:	4618      	movlt	r0, r3
 80037ec:	e7a6      	b.n	800373c <_printf_i+0x160>
 80037ee:	2301      	movs	r3, #1
 80037f0:	4632      	mov	r2, r6
 80037f2:	4649      	mov	r1, r9
 80037f4:	4640      	mov	r0, r8
 80037f6:	47d0      	blx	sl
 80037f8:	3001      	adds	r0, #1
 80037fa:	d09d      	beq.n	8003738 <_printf_i+0x15c>
 80037fc:	3501      	adds	r5, #1
 80037fe:	68e3      	ldr	r3, [r4, #12]
 8003800:	9903      	ldr	r1, [sp, #12]
 8003802:	1a5b      	subs	r3, r3, r1
 8003804:	42ab      	cmp	r3, r5
 8003806:	dcf2      	bgt.n	80037ee <_printf_i+0x212>
 8003808:	e7eb      	b.n	80037e2 <_printf_i+0x206>
 800380a:	2500      	movs	r5, #0
 800380c:	f104 0619 	add.w	r6, r4, #25
 8003810:	e7f5      	b.n	80037fe <_printf_i+0x222>
 8003812:	bf00      	nop
 8003814:	08003c07 	.word	0x08003c07
 8003818:	08003c18 	.word	0x08003c18

0800381c <__sflush_r>:
 800381c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003824:	0716      	lsls	r6, r2, #28
 8003826:	4605      	mov	r5, r0
 8003828:	460c      	mov	r4, r1
 800382a:	d454      	bmi.n	80038d6 <__sflush_r+0xba>
 800382c:	684b      	ldr	r3, [r1, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	dc02      	bgt.n	8003838 <__sflush_r+0x1c>
 8003832:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	dd48      	ble.n	80038ca <__sflush_r+0xae>
 8003838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800383a:	2e00      	cmp	r6, #0
 800383c:	d045      	beq.n	80038ca <__sflush_r+0xae>
 800383e:	2300      	movs	r3, #0
 8003840:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003844:	682f      	ldr	r7, [r5, #0]
 8003846:	6a21      	ldr	r1, [r4, #32]
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	d030      	beq.n	80038ae <__sflush_r+0x92>
 800384c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	0759      	lsls	r1, r3, #29
 8003852:	d505      	bpl.n	8003860 <__sflush_r+0x44>
 8003854:	6863      	ldr	r3, [r4, #4]
 8003856:	1ad2      	subs	r2, r2, r3
 8003858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800385a:	b10b      	cbz	r3, 8003860 <__sflush_r+0x44>
 800385c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800385e:	1ad2      	subs	r2, r2, r3
 8003860:	2300      	movs	r3, #0
 8003862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003864:	6a21      	ldr	r1, [r4, #32]
 8003866:	4628      	mov	r0, r5
 8003868:	47b0      	blx	r6
 800386a:	1c43      	adds	r3, r0, #1
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	d106      	bne.n	800387e <__sflush_r+0x62>
 8003870:	6829      	ldr	r1, [r5, #0]
 8003872:	291d      	cmp	r1, #29
 8003874:	d82b      	bhi.n	80038ce <__sflush_r+0xb2>
 8003876:	4a2a      	ldr	r2, [pc, #168]	@ (8003920 <__sflush_r+0x104>)
 8003878:	410a      	asrs	r2, r1
 800387a:	07d6      	lsls	r6, r2, #31
 800387c:	d427      	bmi.n	80038ce <__sflush_r+0xb2>
 800387e:	2200      	movs	r2, #0
 8003880:	6062      	str	r2, [r4, #4]
 8003882:	04d9      	lsls	r1, r3, #19
 8003884:	6922      	ldr	r2, [r4, #16]
 8003886:	6022      	str	r2, [r4, #0]
 8003888:	d504      	bpl.n	8003894 <__sflush_r+0x78>
 800388a:	1c42      	adds	r2, r0, #1
 800388c:	d101      	bne.n	8003892 <__sflush_r+0x76>
 800388e:	682b      	ldr	r3, [r5, #0]
 8003890:	b903      	cbnz	r3, 8003894 <__sflush_r+0x78>
 8003892:	6560      	str	r0, [r4, #84]	@ 0x54
 8003894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003896:	602f      	str	r7, [r5, #0]
 8003898:	b1b9      	cbz	r1, 80038ca <__sflush_r+0xae>
 800389a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800389e:	4299      	cmp	r1, r3
 80038a0:	d002      	beq.n	80038a8 <__sflush_r+0x8c>
 80038a2:	4628      	mov	r0, r5
 80038a4:	f7ff fbf2 	bl	800308c <_free_r>
 80038a8:	2300      	movs	r3, #0
 80038aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80038ac:	e00d      	b.n	80038ca <__sflush_r+0xae>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b0      	blx	r6
 80038b4:	4602      	mov	r2, r0
 80038b6:	1c50      	adds	r0, r2, #1
 80038b8:	d1c9      	bne.n	800384e <__sflush_r+0x32>
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0c6      	beq.n	800384e <__sflush_r+0x32>
 80038c0:	2b1d      	cmp	r3, #29
 80038c2:	d001      	beq.n	80038c8 <__sflush_r+0xac>
 80038c4:	2b16      	cmp	r3, #22
 80038c6:	d11e      	bne.n	8003906 <__sflush_r+0xea>
 80038c8:	602f      	str	r7, [r5, #0]
 80038ca:	2000      	movs	r0, #0
 80038cc:	e022      	b.n	8003914 <__sflush_r+0xf8>
 80038ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038d2:	b21b      	sxth	r3, r3
 80038d4:	e01b      	b.n	800390e <__sflush_r+0xf2>
 80038d6:	690f      	ldr	r7, [r1, #16]
 80038d8:	2f00      	cmp	r7, #0
 80038da:	d0f6      	beq.n	80038ca <__sflush_r+0xae>
 80038dc:	0793      	lsls	r3, r2, #30
 80038de:	680e      	ldr	r6, [r1, #0]
 80038e0:	bf08      	it	eq
 80038e2:	694b      	ldreq	r3, [r1, #20]
 80038e4:	600f      	str	r7, [r1, #0]
 80038e6:	bf18      	it	ne
 80038e8:	2300      	movne	r3, #0
 80038ea:	eba6 0807 	sub.w	r8, r6, r7
 80038ee:	608b      	str	r3, [r1, #8]
 80038f0:	f1b8 0f00 	cmp.w	r8, #0
 80038f4:	dde9      	ble.n	80038ca <__sflush_r+0xae>
 80038f6:	6a21      	ldr	r1, [r4, #32]
 80038f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80038fa:	4643      	mov	r3, r8
 80038fc:	463a      	mov	r2, r7
 80038fe:	4628      	mov	r0, r5
 8003900:	47b0      	blx	r6
 8003902:	2800      	cmp	r0, #0
 8003904:	dc08      	bgt.n	8003918 <__sflush_r+0xfc>
 8003906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800390a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800390e:	81a3      	strh	r3, [r4, #12]
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003918:	4407      	add	r7, r0
 800391a:	eba8 0800 	sub.w	r8, r8, r0
 800391e:	e7e7      	b.n	80038f0 <__sflush_r+0xd4>
 8003920:	dfbffffe 	.word	0xdfbffffe

08003924 <_fflush_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	690b      	ldr	r3, [r1, #16]
 8003928:	4605      	mov	r5, r0
 800392a:	460c      	mov	r4, r1
 800392c:	b913      	cbnz	r3, 8003934 <_fflush_r+0x10>
 800392e:	2500      	movs	r5, #0
 8003930:	4628      	mov	r0, r5
 8003932:	bd38      	pop	{r3, r4, r5, pc}
 8003934:	b118      	cbz	r0, 800393e <_fflush_r+0x1a>
 8003936:	6a03      	ldr	r3, [r0, #32]
 8003938:	b90b      	cbnz	r3, 800393e <_fflush_r+0x1a>
 800393a:	f7ff f9a5 	bl	8002c88 <__sinit>
 800393e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f3      	beq.n	800392e <_fflush_r+0xa>
 8003946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003948:	07d0      	lsls	r0, r2, #31
 800394a:	d404      	bmi.n	8003956 <_fflush_r+0x32>
 800394c:	0599      	lsls	r1, r3, #22
 800394e:	d402      	bmi.n	8003956 <_fflush_r+0x32>
 8003950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003952:	f7ff fb98 	bl	8003086 <__retarget_lock_acquire_recursive>
 8003956:	4628      	mov	r0, r5
 8003958:	4621      	mov	r1, r4
 800395a:	f7ff ff5f 	bl	800381c <__sflush_r>
 800395e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003960:	07da      	lsls	r2, r3, #31
 8003962:	4605      	mov	r5, r0
 8003964:	d4e4      	bmi.n	8003930 <_fflush_r+0xc>
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	059b      	lsls	r3, r3, #22
 800396a:	d4e1      	bmi.n	8003930 <_fflush_r+0xc>
 800396c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800396e:	f7ff fb8b 	bl	8003088 <__retarget_lock_release_recursive>
 8003972:	e7dd      	b.n	8003930 <_fflush_r+0xc>

08003974 <__swhatbuf_r>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	460c      	mov	r4, r1
 8003978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397c:	2900      	cmp	r1, #0
 800397e:	b096      	sub	sp, #88	@ 0x58
 8003980:	4615      	mov	r5, r2
 8003982:	461e      	mov	r6, r3
 8003984:	da0d      	bge.n	80039a2 <__swhatbuf_r+0x2e>
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800398c:	f04f 0100 	mov.w	r1, #0
 8003990:	bf14      	ite	ne
 8003992:	2340      	movne	r3, #64	@ 0x40
 8003994:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003998:	2000      	movs	r0, #0
 800399a:	6031      	str	r1, [r6, #0]
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	b016      	add	sp, #88	@ 0x58
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
 80039a2:	466a      	mov	r2, sp
 80039a4:	f000 f87c 	bl	8003aa0 <_fstat_r>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	dbec      	blt.n	8003986 <__swhatbuf_r+0x12>
 80039ac:	9901      	ldr	r1, [sp, #4]
 80039ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80039b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80039b6:	4259      	negs	r1, r3
 80039b8:	4159      	adcs	r1, r3
 80039ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039be:	e7eb      	b.n	8003998 <__swhatbuf_r+0x24>

080039c0 <__smakebuf_r>:
 80039c0:	898b      	ldrh	r3, [r1, #12]
 80039c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039c4:	079d      	lsls	r5, r3, #30
 80039c6:	4606      	mov	r6, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	d507      	bpl.n	80039dc <__smakebuf_r+0x1c>
 80039cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	6123      	str	r3, [r4, #16]
 80039d4:	2301      	movs	r3, #1
 80039d6:	6163      	str	r3, [r4, #20]
 80039d8:	b003      	add	sp, #12
 80039da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039dc:	ab01      	add	r3, sp, #4
 80039de:	466a      	mov	r2, sp
 80039e0:	f7ff ffc8 	bl	8003974 <__swhatbuf_r>
 80039e4:	9f00      	ldr	r7, [sp, #0]
 80039e6:	4605      	mov	r5, r0
 80039e8:	4639      	mov	r1, r7
 80039ea:	4630      	mov	r0, r6
 80039ec:	f7ff fbba 	bl	8003164 <_malloc_r>
 80039f0:	b948      	cbnz	r0, 8003a06 <__smakebuf_r+0x46>
 80039f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f6:	059a      	lsls	r2, r3, #22
 80039f8:	d4ee      	bmi.n	80039d8 <__smakebuf_r+0x18>
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	f043 0302 	orr.w	r3, r3, #2
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	e7e2      	b.n	80039cc <__smakebuf_r+0xc>
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	6020      	str	r0, [r4, #0]
 8003a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	9b01      	ldr	r3, [sp, #4]
 8003a12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a16:	b15b      	cbz	r3, 8003a30 <__smakebuf_r+0x70>
 8003a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f000 f851 	bl	8003ac4 <_isatty_r>
 8003a22:	b128      	cbz	r0, 8003a30 <__smakebuf_r+0x70>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	431d      	orrs	r5, r3
 8003a34:	81a5      	strh	r5, [r4, #12]
 8003a36:	e7cf      	b.n	80039d8 <__smakebuf_r+0x18>

08003a38 <_putc_r>:
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	460d      	mov	r5, r1
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	4606      	mov	r6, r0
 8003a40:	b118      	cbz	r0, 8003a4a <_putc_r+0x12>
 8003a42:	6a03      	ldr	r3, [r0, #32]
 8003a44:	b90b      	cbnz	r3, 8003a4a <_putc_r+0x12>
 8003a46:	f7ff f91f 	bl	8002c88 <__sinit>
 8003a4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a4c:	07d8      	lsls	r0, r3, #31
 8003a4e:	d405      	bmi.n	8003a5c <_putc_r+0x24>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	0599      	lsls	r1, r3, #22
 8003a54:	d402      	bmi.n	8003a5c <_putc_r+0x24>
 8003a56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a58:	f7ff fb15 	bl	8003086 <__retarget_lock_acquire_recursive>
 8003a5c:	68a3      	ldr	r3, [r4, #8]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	60a3      	str	r3, [r4, #8]
 8003a64:	da05      	bge.n	8003a72 <_putc_r+0x3a>
 8003a66:	69a2      	ldr	r2, [r4, #24]
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	db12      	blt.n	8003a92 <_putc_r+0x5a>
 8003a6c:	b2eb      	uxtb	r3, r5
 8003a6e:	2b0a      	cmp	r3, #10
 8003a70:	d00f      	beq.n	8003a92 <_putc_r+0x5a>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	6022      	str	r2, [r4, #0]
 8003a78:	701d      	strb	r5, [r3, #0]
 8003a7a:	b2ed      	uxtb	r5, r5
 8003a7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a7e:	07da      	lsls	r2, r3, #31
 8003a80:	d405      	bmi.n	8003a8e <_putc_r+0x56>
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	059b      	lsls	r3, r3, #22
 8003a86:	d402      	bmi.n	8003a8e <_putc_r+0x56>
 8003a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a8a:	f7ff fafd 	bl	8003088 <__retarget_lock_release_recursive>
 8003a8e:	4628      	mov	r0, r5
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
 8003a92:	4629      	mov	r1, r5
 8003a94:	4622      	mov	r2, r4
 8003a96:	4630      	mov	r0, r6
 8003a98:	f7ff f9e7 	bl	8002e6a <__swbuf_r>
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	e7ed      	b.n	8003a7c <_putc_r+0x44>

08003aa0 <_fstat_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4d07      	ldr	r5, [pc, #28]	@ (8003ac0 <_fstat_r+0x20>)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	f7fe fede 	bl	800286e <_fstat>
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	d102      	bne.n	8003abc <_fstat_r+0x1c>
 8003ab6:	682b      	ldr	r3, [r5, #0]
 8003ab8:	b103      	cbz	r3, 8003abc <_fstat_r+0x1c>
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
 8003abe:	bf00      	nop
 8003ac0:	200002d8 	.word	0x200002d8

08003ac4 <_isatty_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4d06      	ldr	r5, [pc, #24]	@ (8003ae0 <_isatty_r+0x1c>)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	4604      	mov	r4, r0
 8003acc:	4608      	mov	r0, r1
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	f7ff f830 	bl	8002b34 <_isatty>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_isatty_r+0x1a>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_isatty_r+0x1a>
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	200002d8 	.word	0x200002d8

08003ae4 <_sbrk_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4d06      	ldr	r5, [pc, #24]	@ (8003b00 <_sbrk_r+0x1c>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4604      	mov	r4, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	f7fd f8e2 	bl	8000cb8 <_sbrk>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_sbrk_r+0x1a>
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_sbrk_r+0x1a>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	200002d8 	.word	0x200002d8

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
